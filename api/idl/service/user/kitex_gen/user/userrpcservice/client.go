// Code generated by Kitex v0.5.2. DO NOT EDIT.

package userrpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	user "resume-resolving/api/idl/service/user/kitex_gen/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	UserChangePassword(ctx context.Context, request *user.UserChangePasswordRPCRequest, callOptions ...callopt.Option) (r *user.UserChangePasswordRPCResponse, err error)
	UserLogin(ctx context.Context, request *user.UserLoginRPCRequest, callOptions ...callopt.Option) (r *user.UserLoginRPCResponse, err error)
	UserRegister(ctx context.Context, request *user.UserRegisterRPCRequest, callOptions ...callopt.Option) (r *user.UserRegisterRPCResponse, err error)
	HRRegister(ctx context.Context, request *user.HRRegisterRPCRequest, callOptions ...callopt.Option) (r *user.HRRegisterRPCResponse, err error)
	HRDelete(ctx context.Context, request *user.HRDeleteRPCRequest, callOptions ...callopt.Option) (r *user.HRDeleteRPCResponse, err error)
	GetHRByDepartment(ctx context.Context, request *user.GetHRByDepartmentRPCRequest, callOptions ...callopt.Option) (r *user.GetHRByDepartmentRPCResponse, err error)
	GetUserByName(ctx context.Context, request *user.GetUserByNameRPCRequest, callOptions ...callopt.Option) (r *user.GetUserByNameRPCResponse, err error)
	GetHRByName(ctx context.Context, request *user.GetHRByNameRPCRequest, callOptions ...callopt.Option) (r *user.GetHRByNameRPCResponse, err error)
	DeleteHRByDepartmentId(ctx context.Context, request *user.DeleteHRByDepartmentIdRPCRequest, callOptions ...callopt.Option) (r *user.DeleteHRByDepartmentIdRPCResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserRPCServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserRPCServiceClient struct {
	*kClient
}

func (p *kUserRPCServiceClient) UserChangePassword(ctx context.Context, request *user.UserChangePasswordRPCRequest, callOptions ...callopt.Option) (r *user.UserChangePasswordRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserChangePassword(ctx, request)
}

func (p *kUserRPCServiceClient) UserLogin(ctx context.Context, request *user.UserLoginRPCRequest, callOptions ...callopt.Option) (r *user.UserLoginRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserLogin(ctx, request)
}

func (p *kUserRPCServiceClient) UserRegister(ctx context.Context, request *user.UserRegisterRPCRequest, callOptions ...callopt.Option) (r *user.UserRegisterRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserRegister(ctx, request)
}

func (p *kUserRPCServiceClient) HRRegister(ctx context.Context, request *user.HRRegisterRPCRequest, callOptions ...callopt.Option) (r *user.HRRegisterRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HRRegister(ctx, request)
}

func (p *kUserRPCServiceClient) HRDelete(ctx context.Context, request *user.HRDeleteRPCRequest, callOptions ...callopt.Option) (r *user.HRDeleteRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.HRDelete(ctx, request)
}

func (p *kUserRPCServiceClient) GetHRByDepartment(ctx context.Context, request *user.GetHRByDepartmentRPCRequest, callOptions ...callopt.Option) (r *user.GetHRByDepartmentRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetHRByDepartment(ctx, request)
}

func (p *kUserRPCServiceClient) GetUserByName(ctx context.Context, request *user.GetUserByNameRPCRequest, callOptions ...callopt.Option) (r *user.GetUserByNameRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserByName(ctx, request)
}

func (p *kUserRPCServiceClient) GetHRByName(ctx context.Context, request *user.GetHRByNameRPCRequest, callOptions ...callopt.Option) (r *user.GetHRByNameRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetHRByName(ctx, request)
}

func (p *kUserRPCServiceClient) DeleteHRByDepartmentId(ctx context.Context, request *user.DeleteHRByDepartmentIdRPCRequest, callOptions ...callopt.Option) (r *user.DeleteHRByDepartmentIdRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteHRByDepartmentId(ctx, request)
}
