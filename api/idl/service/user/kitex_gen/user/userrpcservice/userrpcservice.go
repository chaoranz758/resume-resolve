// Code generated by Kitex v0.5.2. DO NOT EDIT.

package userrpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "resume-resolving/api/idl/service/user/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userRPCServiceServiceInfo
}

var userRPCServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserRPCService"
	handlerType := (*user.UserRPCService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserChangePassword":     kitex.NewMethodInfo(userChangePasswordHandler, newUserRPCServiceUserChangePasswordArgs, newUserRPCServiceUserChangePasswordResult, false),
		"UserLogin":              kitex.NewMethodInfo(userLoginHandler, newUserRPCServiceUserLoginArgs, newUserRPCServiceUserLoginResult, false),
		"UserRegister":           kitex.NewMethodInfo(userRegisterHandler, newUserRPCServiceUserRegisterArgs, newUserRPCServiceUserRegisterResult, false),
		"HRRegister":             kitex.NewMethodInfo(hRRegisterHandler, newUserRPCServiceHRRegisterArgs, newUserRPCServiceHRRegisterResult, false),
		"HRDelete":               kitex.NewMethodInfo(hRDeleteHandler, newUserRPCServiceHRDeleteArgs, newUserRPCServiceHRDeleteResult, false),
		"GetHRByDepartment":      kitex.NewMethodInfo(getHRByDepartmentHandler, newUserRPCServiceGetHRByDepartmentArgs, newUserRPCServiceGetHRByDepartmentResult, false),
		"GetUserByName":          kitex.NewMethodInfo(getUserByNameHandler, newUserRPCServiceGetUserByNameArgs, newUserRPCServiceGetUserByNameResult, false),
		"GetHRByName":            kitex.NewMethodInfo(getHRByNameHandler, newUserRPCServiceGetHRByNameArgs, newUserRPCServiceGetHRByNameResult, false),
		"DeleteHRByDepartmentId": kitex.NewMethodInfo(deleteHRByDepartmentIdHandler, newUserRPCServiceDeleteHRByDepartmentIdArgs, newUserRPCServiceDeleteHRByDepartmentIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func userChangePasswordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRPCServiceUserChangePasswordArgs)
	realResult := result.(*user.UserRPCServiceUserChangePasswordResult)
	success, err := handler.(user.UserRPCService).UserChangePassword(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRPCServiceUserChangePasswordArgs() interface{} {
	return user.NewUserRPCServiceUserChangePasswordArgs()
}

func newUserRPCServiceUserChangePasswordResult() interface{} {
	return user.NewUserRPCServiceUserChangePasswordResult()
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRPCServiceUserLoginArgs)
	realResult := result.(*user.UserRPCServiceUserLoginResult)
	success, err := handler.(user.UserRPCService).UserLogin(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRPCServiceUserLoginArgs() interface{} {
	return user.NewUserRPCServiceUserLoginArgs()
}

func newUserRPCServiceUserLoginResult() interface{} {
	return user.NewUserRPCServiceUserLoginResult()
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRPCServiceUserRegisterArgs)
	realResult := result.(*user.UserRPCServiceUserRegisterResult)
	success, err := handler.(user.UserRPCService).UserRegister(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRPCServiceUserRegisterArgs() interface{} {
	return user.NewUserRPCServiceUserRegisterArgs()
}

func newUserRPCServiceUserRegisterResult() interface{} {
	return user.NewUserRPCServiceUserRegisterResult()
}

func hRRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRPCServiceHRRegisterArgs)
	realResult := result.(*user.UserRPCServiceHRRegisterResult)
	success, err := handler.(user.UserRPCService).HRRegister(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRPCServiceHRRegisterArgs() interface{} {
	return user.NewUserRPCServiceHRRegisterArgs()
}

func newUserRPCServiceHRRegisterResult() interface{} {
	return user.NewUserRPCServiceHRRegisterResult()
}

func hRDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRPCServiceHRDeleteArgs)
	realResult := result.(*user.UserRPCServiceHRDeleteResult)
	success, err := handler.(user.UserRPCService).HRDelete(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRPCServiceHRDeleteArgs() interface{} {
	return user.NewUserRPCServiceHRDeleteArgs()
}

func newUserRPCServiceHRDeleteResult() interface{} {
	return user.NewUserRPCServiceHRDeleteResult()
}

func getHRByDepartmentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRPCServiceGetHRByDepartmentArgs)
	realResult := result.(*user.UserRPCServiceGetHRByDepartmentResult)
	success, err := handler.(user.UserRPCService).GetHRByDepartment(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRPCServiceGetHRByDepartmentArgs() interface{} {
	return user.NewUserRPCServiceGetHRByDepartmentArgs()
}

func newUserRPCServiceGetHRByDepartmentResult() interface{} {
	return user.NewUserRPCServiceGetHRByDepartmentResult()
}

func getUserByNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRPCServiceGetUserByNameArgs)
	realResult := result.(*user.UserRPCServiceGetUserByNameResult)
	success, err := handler.(user.UserRPCService).GetUserByName(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRPCServiceGetUserByNameArgs() interface{} {
	return user.NewUserRPCServiceGetUserByNameArgs()
}

func newUserRPCServiceGetUserByNameResult() interface{} {
	return user.NewUserRPCServiceGetUserByNameResult()
}

func getHRByNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRPCServiceGetHRByNameArgs)
	realResult := result.(*user.UserRPCServiceGetHRByNameResult)
	success, err := handler.(user.UserRPCService).GetHRByName(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRPCServiceGetHRByNameArgs() interface{} {
	return user.NewUserRPCServiceGetHRByNameArgs()
}

func newUserRPCServiceGetHRByNameResult() interface{} {
	return user.NewUserRPCServiceGetHRByNameResult()
}

func deleteHRByDepartmentIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRPCServiceDeleteHRByDepartmentIdArgs)
	realResult := result.(*user.UserRPCServiceDeleteHRByDepartmentIdResult)
	success, err := handler.(user.UserRPCService).DeleteHRByDepartmentId(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRPCServiceDeleteHRByDepartmentIdArgs() interface{} {
	return user.NewUserRPCServiceDeleteHRByDepartmentIdArgs()
}

func newUserRPCServiceDeleteHRByDepartmentIdResult() interface{} {
	return user.NewUserRPCServiceDeleteHRByDepartmentIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserChangePassword(ctx context.Context, request *user.UserChangePasswordRPCRequest) (r *user.UserChangePasswordRPCResponse, err error) {
	var _args user.UserRPCServiceUserChangePasswordArgs
	_args.Request = request
	var _result user.UserRPCServiceUserChangePasswordResult
	if err = p.c.Call(ctx, "UserChangePassword", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, request *user.UserLoginRPCRequest) (r *user.UserLoginRPCResponse, err error) {
	var _args user.UserRPCServiceUserLoginArgs
	_args.Request = request
	var _result user.UserRPCServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserRegister(ctx context.Context, request *user.UserRegisterRPCRequest) (r *user.UserRegisterRPCResponse, err error) {
	var _args user.UserRPCServiceUserRegisterArgs
	_args.Request = request
	var _result user.UserRPCServiceUserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HRRegister(ctx context.Context, request *user.HRRegisterRPCRequest) (r *user.HRRegisterRPCResponse, err error) {
	var _args user.UserRPCServiceHRRegisterArgs
	_args.Request = request
	var _result user.UserRPCServiceHRRegisterResult
	if err = p.c.Call(ctx, "HRRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) HRDelete(ctx context.Context, request *user.HRDeleteRPCRequest) (r *user.HRDeleteRPCResponse, err error) {
	var _args user.UserRPCServiceHRDeleteArgs
	_args.Request = request
	var _result user.UserRPCServiceHRDeleteResult
	if err = p.c.Call(ctx, "HRDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHRByDepartment(ctx context.Context, request *user.GetHRByDepartmentRPCRequest) (r *user.GetHRByDepartmentRPCResponse, err error) {
	var _args user.UserRPCServiceGetHRByDepartmentArgs
	_args.Request = request
	var _result user.UserRPCServiceGetHRByDepartmentResult
	if err = p.c.Call(ctx, "GetHRByDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserByName(ctx context.Context, request *user.GetUserByNameRPCRequest) (r *user.GetUserByNameRPCResponse, err error) {
	var _args user.UserRPCServiceGetUserByNameArgs
	_args.Request = request
	var _result user.UserRPCServiceGetUserByNameResult
	if err = p.c.Call(ctx, "GetUserByName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetHRByName(ctx context.Context, request *user.GetHRByNameRPCRequest) (r *user.GetHRByNameRPCResponse, err error) {
	var _args user.UserRPCServiceGetHRByNameArgs
	_args.Request = request
	var _result user.UserRPCServiceGetHRByNameResult
	if err = p.c.Call(ctx, "GetHRByName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteHRByDepartmentId(ctx context.Context, request *user.DeleteHRByDepartmentIdRPCRequest) (r *user.DeleteHRByDepartmentIdRPCResponse, err error) {
	var _args user.UserRPCServiceDeleteHRByDepartmentIdArgs
	_args.Request = request
	var _result user.UserRPCServiceDeleteHRByDepartmentIdResult
	if err = p.c.Call(ctx, "DeleteHRByDepartmentId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
