// Code generated by Kitex v0.5.2. DO NOT EDIT.

package postcategoryrpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	post_category "resume-resolving/api/idl/service/post_category/kitex_gen/post_category"
)

func serviceInfo() *kitex.ServiceInfo {
	return postCategoryRPCServiceServiceInfo
}

var postCategoryRPCServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PostCategoryRPCService"
	handlerType := (*post_category.PostCategoryRPCService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AppendPostCategory":  kitex.NewMethodInfo(appendPostCategoryHandler, newPostCategoryRPCServiceAppendPostCategoryArgs, newPostCategoryRPCServiceAppendPostCategoryResult, false),
		"UpdatePostCategory":  kitex.NewMethodInfo(updatePostCategoryHandler, newPostCategoryRPCServiceUpdatePostCategoryArgs, newPostCategoryRPCServiceUpdatePostCategoryResult, false),
		"DeletePostCategory":  kitex.NewMethodInfo(deletePostCategoryHandler, newPostCategoryRPCServiceDeletePostCategoryArgs, newPostCategoryRPCServiceDeletePostCategoryResult, false),
		"GetsPostCategory":    kitex.NewMethodInfo(getsPostCategoryHandler, newPostCategoryRPCServiceGetsPostCategoryArgs, newPostCategoryRPCServiceGetsPostCategoryResult, false),
		"GetPostCategoryById": kitex.NewMethodInfo(getPostCategoryByIdHandler, newPostCategoryRPCServiceGetPostCategoryByIdArgs, newPostCategoryRPCServiceGetPostCategoryByIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "post_category",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func appendPostCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post_category.PostCategoryRPCServiceAppendPostCategoryArgs)
	realResult := result.(*post_category.PostCategoryRPCServiceAppendPostCategoryResult)
	success, err := handler.(post_category.PostCategoryRPCService).AppendPostCategory(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostCategoryRPCServiceAppendPostCategoryArgs() interface{} {
	return post_category.NewPostCategoryRPCServiceAppendPostCategoryArgs()
}

func newPostCategoryRPCServiceAppendPostCategoryResult() interface{} {
	return post_category.NewPostCategoryRPCServiceAppendPostCategoryResult()
}

func updatePostCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post_category.PostCategoryRPCServiceUpdatePostCategoryArgs)
	realResult := result.(*post_category.PostCategoryRPCServiceUpdatePostCategoryResult)
	success, err := handler.(post_category.PostCategoryRPCService).UpdatePostCategory(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostCategoryRPCServiceUpdatePostCategoryArgs() interface{} {
	return post_category.NewPostCategoryRPCServiceUpdatePostCategoryArgs()
}

func newPostCategoryRPCServiceUpdatePostCategoryResult() interface{} {
	return post_category.NewPostCategoryRPCServiceUpdatePostCategoryResult()
}

func deletePostCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post_category.PostCategoryRPCServiceDeletePostCategoryArgs)
	realResult := result.(*post_category.PostCategoryRPCServiceDeletePostCategoryResult)
	success, err := handler.(post_category.PostCategoryRPCService).DeletePostCategory(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostCategoryRPCServiceDeletePostCategoryArgs() interface{} {
	return post_category.NewPostCategoryRPCServiceDeletePostCategoryArgs()
}

func newPostCategoryRPCServiceDeletePostCategoryResult() interface{} {
	return post_category.NewPostCategoryRPCServiceDeletePostCategoryResult()
}

func getsPostCategoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post_category.PostCategoryRPCServiceGetsPostCategoryArgs)
	realResult := result.(*post_category.PostCategoryRPCServiceGetsPostCategoryResult)
	success, err := handler.(post_category.PostCategoryRPCService).GetsPostCategory(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostCategoryRPCServiceGetsPostCategoryArgs() interface{} {
	return post_category.NewPostCategoryRPCServiceGetsPostCategoryArgs()
}

func newPostCategoryRPCServiceGetsPostCategoryResult() interface{} {
	return post_category.NewPostCategoryRPCServiceGetsPostCategoryResult()
}

func getPostCategoryByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post_category.PostCategoryRPCServiceGetPostCategoryByIdArgs)
	realResult := result.(*post_category.PostCategoryRPCServiceGetPostCategoryByIdResult)
	success, err := handler.(post_category.PostCategoryRPCService).GetPostCategoryById(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostCategoryRPCServiceGetPostCategoryByIdArgs() interface{} {
	return post_category.NewPostCategoryRPCServiceGetPostCategoryByIdArgs()
}

func newPostCategoryRPCServiceGetPostCategoryByIdResult() interface{} {
	return post_category.NewPostCategoryRPCServiceGetPostCategoryByIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AppendPostCategory(ctx context.Context, request *post_category.AppendPostCategoryRPCRequest) (r *post_category.AppendPostCategoryRPCResponse, err error) {
	var _args post_category.PostCategoryRPCServiceAppendPostCategoryArgs
	_args.Request = request
	var _result post_category.PostCategoryRPCServiceAppendPostCategoryResult
	if err = p.c.Call(ctx, "AppendPostCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePostCategory(ctx context.Context, request *post_category.UpdatePostCategoryRPCRequest) (r *post_category.UpdatePostCategoryRPCResponse, err error) {
	var _args post_category.PostCategoryRPCServiceUpdatePostCategoryArgs
	_args.Request = request
	var _result post_category.PostCategoryRPCServiceUpdatePostCategoryResult
	if err = p.c.Call(ctx, "UpdatePostCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePostCategory(ctx context.Context, request *post_category.DeletePostCategoryRPCRequest) (r *post_category.DeletePostCategoryRPCResponse, err error) {
	var _args post_category.PostCategoryRPCServiceDeletePostCategoryArgs
	_args.Request = request
	var _result post_category.PostCategoryRPCServiceDeletePostCategoryResult
	if err = p.c.Call(ctx, "DeletePostCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetsPostCategory(ctx context.Context, request *post_category.GetsPostCategoryRPCRequest) (r *post_category.GetsPostCategoryRPCResponse, err error) {
	var _args post_category.PostCategoryRPCServiceGetsPostCategoryArgs
	_args.Request = request
	var _result post_category.PostCategoryRPCServiceGetsPostCategoryResult
	if err = p.c.Call(ctx, "GetsPostCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPostCategoryById(ctx context.Context, request *post_category.GetPostCategoryByIdRPCRequest) (r *post_category.GetPostCategoryByIdRPCResponse, err error) {
	var _args post_category.PostCategoryRPCServiceGetPostCategoryByIdArgs
	_args.Request = request
	var _result post_category.PostCategoryRPCServiceGetPostCategoryByIdResult
	if err = p.c.Call(ctx, "GetPostCategoryById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
