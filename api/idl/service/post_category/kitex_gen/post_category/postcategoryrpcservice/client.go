// Code generated by Kitex v0.5.2. DO NOT EDIT.

package postcategoryrpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	post_category "resume-resolving/api/idl/service/post_category/kitex_gen/post_category"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AppendPostCategory(ctx context.Context, request *post_category.AppendPostCategoryRPCRequest, callOptions ...callopt.Option) (r *post_category.AppendPostCategoryRPCResponse, err error)
	UpdatePostCategory(ctx context.Context, request *post_category.UpdatePostCategoryRPCRequest, callOptions ...callopt.Option) (r *post_category.UpdatePostCategoryRPCResponse, err error)
	DeletePostCategory(ctx context.Context, request *post_category.DeletePostCategoryRPCRequest, callOptions ...callopt.Option) (r *post_category.DeletePostCategoryRPCResponse, err error)
	GetsPostCategory(ctx context.Context, request *post_category.GetsPostCategoryRPCRequest, callOptions ...callopt.Option) (r *post_category.GetsPostCategoryRPCResponse, err error)
	GetPostCategoryById(ctx context.Context, request *post_category.GetPostCategoryByIdRPCRequest, callOptions ...callopt.Option) (r *post_category.GetPostCategoryByIdRPCResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPostCategoryRPCServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPostCategoryRPCServiceClient struct {
	*kClient
}

func (p *kPostCategoryRPCServiceClient) AppendPostCategory(ctx context.Context, request *post_category.AppendPostCategoryRPCRequest, callOptions ...callopt.Option) (r *post_category.AppendPostCategoryRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AppendPostCategory(ctx, request)
}

func (p *kPostCategoryRPCServiceClient) UpdatePostCategory(ctx context.Context, request *post_category.UpdatePostCategoryRPCRequest, callOptions ...callopt.Option) (r *post_category.UpdatePostCategoryRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdatePostCategory(ctx, request)
}

func (p *kPostCategoryRPCServiceClient) DeletePostCategory(ctx context.Context, request *post_category.DeletePostCategoryRPCRequest, callOptions ...callopt.Option) (r *post_category.DeletePostCategoryRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeletePostCategory(ctx, request)
}

func (p *kPostCategoryRPCServiceClient) GetsPostCategory(ctx context.Context, request *post_category.GetsPostCategoryRPCRequest, callOptions ...callopt.Option) (r *post_category.GetsPostCategoryRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetsPostCategory(ctx, request)
}

func (p *kPostCategoryRPCServiceClient) GetPostCategoryById(ctx context.Context, request *post_category.GetPostCategoryByIdRPCRequest, callOptions ...callopt.Option) (r *post_category.GetPostCategoryByIdRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPostCategoryById(ctx, request)
}
