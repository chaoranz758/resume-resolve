// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package post_category

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type AppendPostCategoryRPCRequest struct {
	PostCategoryName     string `thrift:"post_category_name,1" frugal:"1,default,string" json:"post_category_name"`
	PostCategoryLevel    int8   `thrift:"post_category_level,2" frugal:"2,default,i8" json:"post_category_level"`
	PostCategoryParentId int64  `thrift:"post_category_parent_id,3" frugal:"3,default,i64" json:"post_category_parent_id"`
}

func NewAppendPostCategoryRPCRequest() *AppendPostCategoryRPCRequest {
	return &AppendPostCategoryRPCRequest{}
}

func (p *AppendPostCategoryRPCRequest) InitDefault() {
	*p = AppendPostCategoryRPCRequest{}
}

func (p *AppendPostCategoryRPCRequest) GetPostCategoryName() (v string) {
	return p.PostCategoryName
}

func (p *AppendPostCategoryRPCRequest) GetPostCategoryLevel() (v int8) {
	return p.PostCategoryLevel
}

func (p *AppendPostCategoryRPCRequest) GetPostCategoryParentId() (v int64) {
	return p.PostCategoryParentId
}
func (p *AppendPostCategoryRPCRequest) SetPostCategoryName(val string) {
	p.PostCategoryName = val
}
func (p *AppendPostCategoryRPCRequest) SetPostCategoryLevel(val int8) {
	p.PostCategoryLevel = val
}
func (p *AppendPostCategoryRPCRequest) SetPostCategoryParentId(val int64) {
	p.PostCategoryParentId = val
}

var fieldIDToName_AppendPostCategoryRPCRequest = map[int16]string{
	1: "post_category_name",
	2: "post_category_level",
	3: "post_category_parent_id",
}

func (p *AppendPostCategoryRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendPostCategoryRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendPostCategoryRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostCategoryName = v
	}
	return nil
}

func (p *AppendPostCategoryRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.PostCategoryLevel = v
	}
	return nil
}

func (p *AppendPostCategoryRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostCategoryParentId = v
	}
	return nil
}

func (p *AppendPostCategoryRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendPostCategoryRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendPostCategoryRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostCategoryName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendPostCategoryRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_level", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.PostCategoryLevel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendPostCategoryRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_parent_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostCategoryParentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendPostCategoryRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPostCategoryRPCRequest(%+v)", *p)
}

func (p *AppendPostCategoryRPCRequest) DeepEqual(ano *AppendPostCategoryRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostCategoryName) {
		return false
	}
	if !p.Field2DeepEqual(ano.PostCategoryLevel) {
		return false
	}
	if !p.Field3DeepEqual(ano.PostCategoryParentId) {
		return false
	}
	return true
}

func (p *AppendPostCategoryRPCRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.PostCategoryName, src) != 0 {
		return false
	}
	return true
}
func (p *AppendPostCategoryRPCRequest) Field2DeepEqual(src int8) bool {

	if p.PostCategoryLevel != src {
		return false
	}
	return true
}
func (p *AppendPostCategoryRPCRequest) Field3DeepEqual(src int64) bool {

	if p.PostCategoryParentId != src {
		return false
	}
	return true
}

type AppendPostCategoryRPCResponse struct {
	Code    int32                    `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string                   `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    *PostCategoryInformation `thrift:"data,3" frugal:"3,default,PostCategoryInformation" json:"data"`
}

func NewAppendPostCategoryRPCResponse() *AppendPostCategoryRPCResponse {
	return &AppendPostCategoryRPCResponse{}
}

func (p *AppendPostCategoryRPCResponse) InitDefault() {
	*p = AppendPostCategoryRPCResponse{}
}

func (p *AppendPostCategoryRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *AppendPostCategoryRPCResponse) GetMessage() (v string) {
	return p.Message
}

var AppendPostCategoryRPCResponse_Data_DEFAULT *PostCategoryInformation

func (p *AppendPostCategoryRPCResponse) GetData() (v *PostCategoryInformation) {
	if !p.IsSetData() {
		return AppendPostCategoryRPCResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *AppendPostCategoryRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *AppendPostCategoryRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *AppendPostCategoryRPCResponse) SetData(val *PostCategoryInformation) {
	p.Data = val
}

var fieldIDToName_AppendPostCategoryRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *AppendPostCategoryRPCResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *AppendPostCategoryRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendPostCategoryRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendPostCategoryRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *AppendPostCategoryRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *AppendPostCategoryRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	p.Data = NewPostCategoryInformation()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppendPostCategoryRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendPostCategoryRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendPostCategoryRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendPostCategoryRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendPostCategoryRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendPostCategoryRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPostCategoryRPCResponse(%+v)", *p)
}

func (p *AppendPostCategoryRPCResponse) DeepEqual(ano *AppendPostCategoryRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *AppendPostCategoryRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *AppendPostCategoryRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *AppendPostCategoryRPCResponse) Field3DeepEqual(src *PostCategoryInformation) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type UpdatePostCategoryRPCRequest struct {
	PostCategoryName string `thrift:"post_category_name,1" frugal:"1,default,string" json:"post_category_name"`
	PostCategoryId   int64  `thrift:"post_category_id,2" frugal:"2,default,i64" json:"post_category_id"`
}

func NewUpdatePostCategoryRPCRequest() *UpdatePostCategoryRPCRequest {
	return &UpdatePostCategoryRPCRequest{}
}

func (p *UpdatePostCategoryRPCRequest) InitDefault() {
	*p = UpdatePostCategoryRPCRequest{}
}

func (p *UpdatePostCategoryRPCRequest) GetPostCategoryName() (v string) {
	return p.PostCategoryName
}

func (p *UpdatePostCategoryRPCRequest) GetPostCategoryId() (v int64) {
	return p.PostCategoryId
}
func (p *UpdatePostCategoryRPCRequest) SetPostCategoryName(val string) {
	p.PostCategoryName = val
}
func (p *UpdatePostCategoryRPCRequest) SetPostCategoryId(val int64) {
	p.PostCategoryId = val
}

var fieldIDToName_UpdatePostCategoryRPCRequest = map[int16]string{
	1: "post_category_name",
	2: "post_category_id",
}

func (p *UpdatePostCategoryRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePostCategoryRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdatePostCategoryRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostCategoryName = v
	}
	return nil
}

func (p *UpdatePostCategoryRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostCategoryId = v
	}
	return nil
}

func (p *UpdatePostCategoryRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePostCategoryRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePostCategoryRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostCategoryName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdatePostCategoryRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostCategoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdatePostCategoryRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePostCategoryRPCRequest(%+v)", *p)
}

func (p *UpdatePostCategoryRPCRequest) DeepEqual(ano *UpdatePostCategoryRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostCategoryName) {
		return false
	}
	if !p.Field2DeepEqual(ano.PostCategoryId) {
		return false
	}
	return true
}

func (p *UpdatePostCategoryRPCRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.PostCategoryName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePostCategoryRPCRequest) Field2DeepEqual(src int64) bool {

	if p.PostCategoryId != src {
		return false
	}
	return true
}

type UpdatePostCategoryRPCResponse struct {
	Code    int32                    `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string                   `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    *PostCategoryInformation `thrift:"data,3" frugal:"3,default,PostCategoryInformation" json:"data"`
}

func NewUpdatePostCategoryRPCResponse() *UpdatePostCategoryRPCResponse {
	return &UpdatePostCategoryRPCResponse{}
}

func (p *UpdatePostCategoryRPCResponse) InitDefault() {
	*p = UpdatePostCategoryRPCResponse{}
}

func (p *UpdatePostCategoryRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *UpdatePostCategoryRPCResponse) GetMessage() (v string) {
	return p.Message
}

var UpdatePostCategoryRPCResponse_Data_DEFAULT *PostCategoryInformation

func (p *UpdatePostCategoryRPCResponse) GetData() (v *PostCategoryInformation) {
	if !p.IsSetData() {
		return UpdatePostCategoryRPCResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *UpdatePostCategoryRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *UpdatePostCategoryRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *UpdatePostCategoryRPCResponse) SetData(val *PostCategoryInformation) {
	p.Data = val
}

var fieldIDToName_UpdatePostCategoryRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *UpdatePostCategoryRPCResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *UpdatePostCategoryRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePostCategoryRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdatePostCategoryRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *UpdatePostCategoryRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *UpdatePostCategoryRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	p.Data = NewPostCategoryInformation()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdatePostCategoryRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePostCategoryRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePostCategoryRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdatePostCategoryRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdatePostCategoryRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdatePostCategoryRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePostCategoryRPCResponse(%+v)", *p)
}

func (p *UpdatePostCategoryRPCResponse) DeepEqual(ano *UpdatePostCategoryRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *UpdatePostCategoryRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *UpdatePostCategoryRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePostCategoryRPCResponse) Field3DeepEqual(src *PostCategoryInformation) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type DeletePostCategoryRPCRequest struct {
	PostCategoryId       int64 `thrift:"post_category_id,1" frugal:"1,default,i64" json:"post_category_id"`
	Level                int8  `thrift:"level,2" frugal:"2,default,i8" json:"level"`
	PostCategoryParentId int64 `thrift:"post_category_parent_id,3" frugal:"3,default,i64" json:"post_category_parent_id"`
}

func NewDeletePostCategoryRPCRequest() *DeletePostCategoryRPCRequest {
	return &DeletePostCategoryRPCRequest{}
}

func (p *DeletePostCategoryRPCRequest) InitDefault() {
	*p = DeletePostCategoryRPCRequest{}
}

func (p *DeletePostCategoryRPCRequest) GetPostCategoryId() (v int64) {
	return p.PostCategoryId
}

func (p *DeletePostCategoryRPCRequest) GetLevel() (v int8) {
	return p.Level
}

func (p *DeletePostCategoryRPCRequest) GetPostCategoryParentId() (v int64) {
	return p.PostCategoryParentId
}
func (p *DeletePostCategoryRPCRequest) SetPostCategoryId(val int64) {
	p.PostCategoryId = val
}
func (p *DeletePostCategoryRPCRequest) SetLevel(val int8) {
	p.Level = val
}
func (p *DeletePostCategoryRPCRequest) SetPostCategoryParentId(val int64) {
	p.PostCategoryParentId = val
}

var fieldIDToName_DeletePostCategoryRPCRequest = map[int16]string{
	1: "post_category_id",
	2: "level",
	3: "post_category_parent_id",
}

func (p *DeletePostCategoryRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePostCategoryRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeletePostCategoryRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostCategoryId = v
	}
	return nil
}

func (p *DeletePostCategoryRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Level = v
	}
	return nil
}

func (p *DeletePostCategoryRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostCategoryParentId = v
	}
	return nil
}

func (p *DeletePostCategoryRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostCategoryRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePostCategoryRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostCategoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeletePostCategoryRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("level", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Level); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeletePostCategoryRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_parent_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostCategoryParentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DeletePostCategoryRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePostCategoryRPCRequest(%+v)", *p)
}

func (p *DeletePostCategoryRPCRequest) DeepEqual(ano *DeletePostCategoryRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostCategoryId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Level) {
		return false
	}
	if !p.Field3DeepEqual(ano.PostCategoryParentId) {
		return false
	}
	return true
}

func (p *DeletePostCategoryRPCRequest) Field1DeepEqual(src int64) bool {

	if p.PostCategoryId != src {
		return false
	}
	return true
}
func (p *DeletePostCategoryRPCRequest) Field2DeepEqual(src int8) bool {

	if p.Level != src {
		return false
	}
	return true
}
func (p *DeletePostCategoryRPCRequest) Field3DeepEqual(src int64) bool {

	if p.PostCategoryParentId != src {
		return false
	}
	return true
}

type DeletePostCategoryRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewDeletePostCategoryRPCResponse() *DeletePostCategoryRPCResponse {
	return &DeletePostCategoryRPCResponse{}
}

func (p *DeletePostCategoryRPCResponse) InitDefault() {
	*p = DeletePostCategoryRPCResponse{}
}

func (p *DeletePostCategoryRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *DeletePostCategoryRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *DeletePostCategoryRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *DeletePostCategoryRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_DeletePostCategoryRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *DeletePostCategoryRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePostCategoryRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeletePostCategoryRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *DeletePostCategoryRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *DeletePostCategoryRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostCategoryRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePostCategoryRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeletePostCategoryRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeletePostCategoryRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePostCategoryRPCResponse(%+v)", *p)
}

func (p *DeletePostCategoryRPCResponse) DeepEqual(ano *DeletePostCategoryRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *DeletePostCategoryRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *DeletePostCategoryRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type GetsPostCategoryRPCRequest struct {
	Level          int8  `thrift:"level,1" frugal:"1,default,i8" json:"level"`
	PostCategoryId int64 `thrift:"post_category_id,2" frugal:"2,default,i64" json:"post_category_id"`
}

func NewGetsPostCategoryRPCRequest() *GetsPostCategoryRPCRequest {
	return &GetsPostCategoryRPCRequest{}
}

func (p *GetsPostCategoryRPCRequest) InitDefault() {
	*p = GetsPostCategoryRPCRequest{}
}

func (p *GetsPostCategoryRPCRequest) GetLevel() (v int8) {
	return p.Level
}

func (p *GetsPostCategoryRPCRequest) GetPostCategoryId() (v int64) {
	return p.PostCategoryId
}
func (p *GetsPostCategoryRPCRequest) SetLevel(val int8) {
	p.Level = val
}
func (p *GetsPostCategoryRPCRequest) SetPostCategoryId(val int64) {
	p.PostCategoryId = val
}

var fieldIDToName_GetsPostCategoryRPCRequest = map[int16]string{
	1: "level",
	2: "post_category_id",
}

func (p *GetsPostCategoryRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetsPostCategoryRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsPostCategoryRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.Level = v
	}
	return nil
}

func (p *GetsPostCategoryRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostCategoryId = v
	}
	return nil
}

func (p *GetsPostCategoryRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostCategoryRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsPostCategoryRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("level", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.Level); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetsPostCategoryRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostCategoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetsPostCategoryRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsPostCategoryRPCRequest(%+v)", *p)
}

func (p *GetsPostCategoryRPCRequest) DeepEqual(ano *GetsPostCategoryRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Level) {
		return false
	}
	if !p.Field2DeepEqual(ano.PostCategoryId) {
		return false
	}
	return true
}

func (p *GetsPostCategoryRPCRequest) Field1DeepEqual(src int8) bool {

	if p.Level != src {
		return false
	}
	return true
}
func (p *GetsPostCategoryRPCRequest) Field2DeepEqual(src int64) bool {

	if p.PostCategoryId != src {
		return false
	}
	return true
}

type GetsPostCategoryRPCResponse struct {
	Code    int32                         `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string                        `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    []*PostCategoryAllInformation `thrift:"data,3" frugal:"3,default,list<PostCategoryAllInformation>" json:"data"`
}

func NewGetsPostCategoryRPCResponse() *GetsPostCategoryRPCResponse {
	return &GetsPostCategoryRPCResponse{}
}

func (p *GetsPostCategoryRPCResponse) InitDefault() {
	*p = GetsPostCategoryRPCResponse{}
}

func (p *GetsPostCategoryRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetsPostCategoryRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetsPostCategoryRPCResponse) GetData() (v []*PostCategoryAllInformation) {
	return p.Data
}
func (p *GetsPostCategoryRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetsPostCategoryRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetsPostCategoryRPCResponse) SetData(val []*PostCategoryAllInformation) {
	p.Data = val
}

var fieldIDToName_GetsPostCategoryRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *GetsPostCategoryRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetsPostCategoryRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsPostCategoryRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetsPostCategoryRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetsPostCategoryRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*PostCategoryAllInformation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPostCategoryAllInformation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetsPostCategoryRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostCategoryRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsPostCategoryRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetsPostCategoryRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetsPostCategoryRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetsPostCategoryRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsPostCategoryRPCResponse(%+v)", *p)
}

func (p *GetsPostCategoryRPCResponse) DeepEqual(ano *GetsPostCategoryRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetsPostCategoryRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetsPostCategoryRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetsPostCategoryRPCResponse) Field3DeepEqual(src []*PostCategoryAllInformation) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetPostCategoryByIdRPCRequest struct {
	PostCategoryId []int64 `thrift:"post_category_id,1" frugal:"1,default,list<i64>" json:"post_category_id"`
}

func NewGetPostCategoryByIdRPCRequest() *GetPostCategoryByIdRPCRequest {
	return &GetPostCategoryByIdRPCRequest{}
}

func (p *GetPostCategoryByIdRPCRequest) InitDefault() {
	*p = GetPostCategoryByIdRPCRequest{}
}

func (p *GetPostCategoryByIdRPCRequest) GetPostCategoryId() (v []int64) {
	return p.PostCategoryId
}
func (p *GetPostCategoryByIdRPCRequest) SetPostCategoryId(val []int64) {
	p.PostCategoryId = val
}

var fieldIDToName_GetPostCategoryByIdRPCRequest = map[int16]string{
	1: "post_category_id",
}

func (p *GetPostCategoryByIdRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPostCategoryByIdRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetPostCategoryByIdRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PostCategoryId = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PostCategoryId = append(p.PostCategoryId, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetPostCategoryByIdRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPostCategoryByIdRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPostCategoryByIdRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_id", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.PostCategoryId)); err != nil {
		return err
	}
	for _, v := range p.PostCategoryId {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetPostCategoryByIdRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPostCategoryByIdRPCRequest(%+v)", *p)
}

func (p *GetPostCategoryByIdRPCRequest) DeepEqual(ano *GetPostCategoryByIdRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostCategoryId) {
		return false
	}
	return true
}

func (p *GetPostCategoryByIdRPCRequest) Field1DeepEqual(src []int64) bool {

	if len(p.PostCategoryId) != len(src) {
		return false
	}
	for i, v := range p.PostCategoryId {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type GetPostCategoryByIdRPCResponse struct {
	Code                 int32                         `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message              string                        `thrift:"message,2" frugal:"2,default,string" json:"message"`
	PostCategoryInfoList []*PostCategoryAllInformation `thrift:"post_category_info_list,3" frugal:"3,default,list<PostCategoryAllInformation>" json:"post_category_info_list"`
}

func NewGetPostCategoryByIdRPCResponse() *GetPostCategoryByIdRPCResponse {
	return &GetPostCategoryByIdRPCResponse{}
}

func (p *GetPostCategoryByIdRPCResponse) InitDefault() {
	*p = GetPostCategoryByIdRPCResponse{}
}

func (p *GetPostCategoryByIdRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetPostCategoryByIdRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetPostCategoryByIdRPCResponse) GetPostCategoryInfoList() (v []*PostCategoryAllInformation) {
	return p.PostCategoryInfoList
}
func (p *GetPostCategoryByIdRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetPostCategoryByIdRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetPostCategoryByIdRPCResponse) SetPostCategoryInfoList(val []*PostCategoryAllInformation) {
	p.PostCategoryInfoList = val
}

var fieldIDToName_GetPostCategoryByIdRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "post_category_info_list",
}

func (p *GetPostCategoryByIdRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPostCategoryByIdRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetPostCategoryByIdRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetPostCategoryByIdRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetPostCategoryByIdRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PostCategoryInfoList = make([]*PostCategoryAllInformation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPostCategoryAllInformation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.PostCategoryInfoList = append(p.PostCategoryInfoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetPostCategoryByIdRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPostCategoryByIdRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPostCategoryByIdRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetPostCategoryByIdRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetPostCategoryByIdRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_info_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PostCategoryInfoList)); err != nil {
		return err
	}
	for _, v := range p.PostCategoryInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetPostCategoryByIdRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPostCategoryByIdRPCResponse(%+v)", *p)
}

func (p *GetPostCategoryByIdRPCResponse) DeepEqual(ano *GetPostCategoryByIdRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.PostCategoryInfoList) {
		return false
	}
	return true
}

func (p *GetPostCategoryByIdRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetPostCategoryByIdRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetPostCategoryByIdRPCResponse) Field3DeepEqual(src []*PostCategoryAllInformation) bool {

	if len(p.PostCategoryInfoList) != len(src) {
		return false
	}
	for i, v := range p.PostCategoryInfoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type PostCategoryRPCService interface {
	AppendPostCategory(ctx context.Context, request *AppendPostCategoryRPCRequest) (r *AppendPostCategoryRPCResponse, err error)

	UpdatePostCategory(ctx context.Context, request *UpdatePostCategoryRPCRequest) (r *UpdatePostCategoryRPCResponse, err error)

	DeletePostCategory(ctx context.Context, request *DeletePostCategoryRPCRequest) (r *DeletePostCategoryRPCResponse, err error)

	GetsPostCategory(ctx context.Context, request *GetsPostCategoryRPCRequest) (r *GetsPostCategoryRPCResponse, err error)

	GetPostCategoryById(ctx context.Context, request *GetPostCategoryByIdRPCRequest) (r *GetPostCategoryByIdRPCResponse, err error)
}

type PostCategoryRPCServiceClient struct {
	c thrift.TClient
}

func NewPostCategoryRPCServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PostCategoryRPCServiceClient {
	return &PostCategoryRPCServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewPostCategoryRPCServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PostCategoryRPCServiceClient {
	return &PostCategoryRPCServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewPostCategoryRPCServiceClient(c thrift.TClient) *PostCategoryRPCServiceClient {
	return &PostCategoryRPCServiceClient{
		c: c,
	}
}

func (p *PostCategoryRPCServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *PostCategoryRPCServiceClient) AppendPostCategory(ctx context.Context, request *AppendPostCategoryRPCRequest) (r *AppendPostCategoryRPCResponse, err error) {
	var _args PostCategoryRPCServiceAppendPostCategoryArgs
	_args.Request = request
	var _result PostCategoryRPCServiceAppendPostCategoryResult
	if err = p.Client_().Call(ctx, "AppendPostCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostCategoryRPCServiceClient) UpdatePostCategory(ctx context.Context, request *UpdatePostCategoryRPCRequest) (r *UpdatePostCategoryRPCResponse, err error) {
	var _args PostCategoryRPCServiceUpdatePostCategoryArgs
	_args.Request = request
	var _result PostCategoryRPCServiceUpdatePostCategoryResult
	if err = p.Client_().Call(ctx, "UpdatePostCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostCategoryRPCServiceClient) DeletePostCategory(ctx context.Context, request *DeletePostCategoryRPCRequest) (r *DeletePostCategoryRPCResponse, err error) {
	var _args PostCategoryRPCServiceDeletePostCategoryArgs
	_args.Request = request
	var _result PostCategoryRPCServiceDeletePostCategoryResult
	if err = p.Client_().Call(ctx, "DeletePostCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostCategoryRPCServiceClient) GetsPostCategory(ctx context.Context, request *GetsPostCategoryRPCRequest) (r *GetsPostCategoryRPCResponse, err error) {
	var _args PostCategoryRPCServiceGetsPostCategoryArgs
	_args.Request = request
	var _result PostCategoryRPCServiceGetsPostCategoryResult
	if err = p.Client_().Call(ctx, "GetsPostCategory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostCategoryRPCServiceClient) GetPostCategoryById(ctx context.Context, request *GetPostCategoryByIdRPCRequest) (r *GetPostCategoryByIdRPCResponse, err error) {
	var _args PostCategoryRPCServiceGetPostCategoryByIdArgs
	_args.Request = request
	var _result PostCategoryRPCServiceGetPostCategoryByIdResult
	if err = p.Client_().Call(ctx, "GetPostCategoryById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PostCategoryRPCServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PostCategoryRPCService
}

func (p *PostCategoryRPCServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PostCategoryRPCServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PostCategoryRPCServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPostCategoryRPCServiceProcessor(handler PostCategoryRPCService) *PostCategoryRPCServiceProcessor {
	self := &PostCategoryRPCServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("AppendPostCategory", &postCategoryRPCServiceProcessorAppendPostCategory{handler: handler})
	self.AddToProcessorMap("UpdatePostCategory", &postCategoryRPCServiceProcessorUpdatePostCategory{handler: handler})
	self.AddToProcessorMap("DeletePostCategory", &postCategoryRPCServiceProcessorDeletePostCategory{handler: handler})
	self.AddToProcessorMap("GetsPostCategory", &postCategoryRPCServiceProcessorGetsPostCategory{handler: handler})
	self.AddToProcessorMap("GetPostCategoryById", &postCategoryRPCServiceProcessorGetPostCategoryById{handler: handler})
	return self
}
func (p *PostCategoryRPCServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type postCategoryRPCServiceProcessorAppendPostCategory struct {
	handler PostCategoryRPCService
}

func (p *postCategoryRPCServiceProcessorAppendPostCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostCategoryRPCServiceAppendPostCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AppendPostCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostCategoryRPCServiceAppendPostCategoryResult{}
	var retval *AppendPostCategoryRPCResponse
	if retval, err2 = p.handler.AppendPostCategory(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AppendPostCategory: "+err2.Error())
		oprot.WriteMessageBegin("AppendPostCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AppendPostCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postCategoryRPCServiceProcessorUpdatePostCategory struct {
	handler PostCategoryRPCService
}

func (p *postCategoryRPCServiceProcessorUpdatePostCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostCategoryRPCServiceUpdatePostCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdatePostCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostCategoryRPCServiceUpdatePostCategoryResult{}
	var retval *UpdatePostCategoryRPCResponse
	if retval, err2 = p.handler.UpdatePostCategory(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePostCategory: "+err2.Error())
		oprot.WriteMessageBegin("UpdatePostCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdatePostCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postCategoryRPCServiceProcessorDeletePostCategory struct {
	handler PostCategoryRPCService
}

func (p *postCategoryRPCServiceProcessorDeletePostCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostCategoryRPCServiceDeletePostCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePostCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostCategoryRPCServiceDeletePostCategoryResult{}
	var retval *DeletePostCategoryRPCResponse
	if retval, err2 = p.handler.DeletePostCategory(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePostCategory: "+err2.Error())
		oprot.WriteMessageBegin("DeletePostCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePostCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postCategoryRPCServiceProcessorGetsPostCategory struct {
	handler PostCategoryRPCService
}

func (p *postCategoryRPCServiceProcessorGetsPostCategory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostCategoryRPCServiceGetsPostCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetsPostCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostCategoryRPCServiceGetsPostCategoryResult{}
	var retval *GetsPostCategoryRPCResponse
	if retval, err2 = p.handler.GetsPostCategory(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetsPostCategory: "+err2.Error())
		oprot.WriteMessageBegin("GetsPostCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetsPostCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postCategoryRPCServiceProcessorGetPostCategoryById struct {
	handler PostCategoryRPCService
}

func (p *postCategoryRPCServiceProcessorGetPostCategoryById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostCategoryRPCServiceGetPostCategoryByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPostCategoryById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostCategoryRPCServiceGetPostCategoryByIdResult{}
	var retval *GetPostCategoryByIdRPCResponse
	if retval, err2 = p.handler.GetPostCategoryById(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPostCategoryById: "+err2.Error())
		oprot.WriteMessageBegin("GetPostCategoryById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPostCategoryById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PostCategoryRPCServiceAppendPostCategoryArgs struct {
	Request *AppendPostCategoryRPCRequest `thrift:"request,1" frugal:"1,default,AppendPostCategoryRPCRequest" json:"request"`
}

func NewPostCategoryRPCServiceAppendPostCategoryArgs() *PostCategoryRPCServiceAppendPostCategoryArgs {
	return &PostCategoryRPCServiceAppendPostCategoryArgs{}
}

func (p *PostCategoryRPCServiceAppendPostCategoryArgs) InitDefault() {
	*p = PostCategoryRPCServiceAppendPostCategoryArgs{}
}

var PostCategoryRPCServiceAppendPostCategoryArgs_Request_DEFAULT *AppendPostCategoryRPCRequest

func (p *PostCategoryRPCServiceAppendPostCategoryArgs) GetRequest() (v *AppendPostCategoryRPCRequest) {
	if !p.IsSetRequest() {
		return PostCategoryRPCServiceAppendPostCategoryArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostCategoryRPCServiceAppendPostCategoryArgs) SetRequest(val *AppendPostCategoryRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostCategoryRPCServiceAppendPostCategoryArgs = map[int16]string{
	1: "request",
}

func (p *PostCategoryRPCServiceAppendPostCategoryArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostCategoryRPCServiceAppendPostCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostCategoryRPCServiceAppendPostCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceAppendPostCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewAppendPostCategoryRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostCategoryRPCServiceAppendPostCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendPostCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceAppendPostCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostCategoryRPCServiceAppendPostCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostCategoryRPCServiceAppendPostCategoryArgs(%+v)", *p)
}

func (p *PostCategoryRPCServiceAppendPostCategoryArgs) DeepEqual(ano *PostCategoryRPCServiceAppendPostCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostCategoryRPCServiceAppendPostCategoryArgs) Field1DeepEqual(src *AppendPostCategoryRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostCategoryRPCServiceAppendPostCategoryResult struct {
	Success *AppendPostCategoryRPCResponse `thrift:"success,0,optional" frugal:"0,optional,AppendPostCategoryRPCResponse" json:"success,omitempty"`
}

func NewPostCategoryRPCServiceAppendPostCategoryResult() *PostCategoryRPCServiceAppendPostCategoryResult {
	return &PostCategoryRPCServiceAppendPostCategoryResult{}
}

func (p *PostCategoryRPCServiceAppendPostCategoryResult) InitDefault() {
	*p = PostCategoryRPCServiceAppendPostCategoryResult{}
}

var PostCategoryRPCServiceAppendPostCategoryResult_Success_DEFAULT *AppendPostCategoryRPCResponse

func (p *PostCategoryRPCServiceAppendPostCategoryResult) GetSuccess() (v *AppendPostCategoryRPCResponse) {
	if !p.IsSetSuccess() {
		return PostCategoryRPCServiceAppendPostCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostCategoryRPCServiceAppendPostCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*AppendPostCategoryRPCResponse)
}

var fieldIDToName_PostCategoryRPCServiceAppendPostCategoryResult = map[int16]string{
	0: "success",
}

func (p *PostCategoryRPCServiceAppendPostCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostCategoryRPCServiceAppendPostCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostCategoryRPCServiceAppendPostCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceAppendPostCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAppendPostCategoryRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostCategoryRPCServiceAppendPostCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendPostCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceAppendPostCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostCategoryRPCServiceAppendPostCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostCategoryRPCServiceAppendPostCategoryResult(%+v)", *p)
}

func (p *PostCategoryRPCServiceAppendPostCategoryResult) DeepEqual(ano *PostCategoryRPCServiceAppendPostCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostCategoryRPCServiceAppendPostCategoryResult) Field0DeepEqual(src *AppendPostCategoryRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostCategoryRPCServiceUpdatePostCategoryArgs struct {
	Request *UpdatePostCategoryRPCRequest `thrift:"request,1" frugal:"1,default,UpdatePostCategoryRPCRequest" json:"request"`
}

func NewPostCategoryRPCServiceUpdatePostCategoryArgs() *PostCategoryRPCServiceUpdatePostCategoryArgs {
	return &PostCategoryRPCServiceUpdatePostCategoryArgs{}
}

func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) InitDefault() {
	*p = PostCategoryRPCServiceUpdatePostCategoryArgs{}
}

var PostCategoryRPCServiceUpdatePostCategoryArgs_Request_DEFAULT *UpdatePostCategoryRPCRequest

func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) GetRequest() (v *UpdatePostCategoryRPCRequest) {
	if !p.IsSetRequest() {
		return PostCategoryRPCServiceUpdatePostCategoryArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) SetRequest(val *UpdatePostCategoryRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostCategoryRPCServiceUpdatePostCategoryArgs = map[int16]string{
	1: "request",
}

func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostCategoryRPCServiceUpdatePostCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewUpdatePostCategoryRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePostCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostCategoryRPCServiceUpdatePostCategoryArgs(%+v)", *p)
}

func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) DeepEqual(ano *PostCategoryRPCServiceUpdatePostCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostCategoryRPCServiceUpdatePostCategoryArgs) Field1DeepEqual(src *UpdatePostCategoryRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostCategoryRPCServiceUpdatePostCategoryResult struct {
	Success *UpdatePostCategoryRPCResponse `thrift:"success,0,optional" frugal:"0,optional,UpdatePostCategoryRPCResponse" json:"success,omitempty"`
}

func NewPostCategoryRPCServiceUpdatePostCategoryResult() *PostCategoryRPCServiceUpdatePostCategoryResult {
	return &PostCategoryRPCServiceUpdatePostCategoryResult{}
}

func (p *PostCategoryRPCServiceUpdatePostCategoryResult) InitDefault() {
	*p = PostCategoryRPCServiceUpdatePostCategoryResult{}
}

var PostCategoryRPCServiceUpdatePostCategoryResult_Success_DEFAULT *UpdatePostCategoryRPCResponse

func (p *PostCategoryRPCServiceUpdatePostCategoryResult) GetSuccess() (v *UpdatePostCategoryRPCResponse) {
	if !p.IsSetSuccess() {
		return PostCategoryRPCServiceUpdatePostCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostCategoryRPCServiceUpdatePostCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdatePostCategoryRPCResponse)
}

var fieldIDToName_PostCategoryRPCServiceUpdatePostCategoryResult = map[int16]string{
	0: "success",
}

func (p *PostCategoryRPCServiceUpdatePostCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostCategoryRPCServiceUpdatePostCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostCategoryRPCServiceUpdatePostCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceUpdatePostCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdatePostCategoryRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostCategoryRPCServiceUpdatePostCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePostCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceUpdatePostCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostCategoryRPCServiceUpdatePostCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostCategoryRPCServiceUpdatePostCategoryResult(%+v)", *p)
}

func (p *PostCategoryRPCServiceUpdatePostCategoryResult) DeepEqual(ano *PostCategoryRPCServiceUpdatePostCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostCategoryRPCServiceUpdatePostCategoryResult) Field0DeepEqual(src *UpdatePostCategoryRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostCategoryRPCServiceDeletePostCategoryArgs struct {
	Request *DeletePostCategoryRPCRequest `thrift:"request,1" frugal:"1,default,DeletePostCategoryRPCRequest" json:"request"`
}

func NewPostCategoryRPCServiceDeletePostCategoryArgs() *PostCategoryRPCServiceDeletePostCategoryArgs {
	return &PostCategoryRPCServiceDeletePostCategoryArgs{}
}

func (p *PostCategoryRPCServiceDeletePostCategoryArgs) InitDefault() {
	*p = PostCategoryRPCServiceDeletePostCategoryArgs{}
}

var PostCategoryRPCServiceDeletePostCategoryArgs_Request_DEFAULT *DeletePostCategoryRPCRequest

func (p *PostCategoryRPCServiceDeletePostCategoryArgs) GetRequest() (v *DeletePostCategoryRPCRequest) {
	if !p.IsSetRequest() {
		return PostCategoryRPCServiceDeletePostCategoryArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostCategoryRPCServiceDeletePostCategoryArgs) SetRequest(val *DeletePostCategoryRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostCategoryRPCServiceDeletePostCategoryArgs = map[int16]string{
	1: "request",
}

func (p *PostCategoryRPCServiceDeletePostCategoryArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostCategoryRPCServiceDeletePostCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostCategoryRPCServiceDeletePostCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceDeletePostCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewDeletePostCategoryRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostCategoryRPCServiceDeletePostCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceDeletePostCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostCategoryRPCServiceDeletePostCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostCategoryRPCServiceDeletePostCategoryArgs(%+v)", *p)
}

func (p *PostCategoryRPCServiceDeletePostCategoryArgs) DeepEqual(ano *PostCategoryRPCServiceDeletePostCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostCategoryRPCServiceDeletePostCategoryArgs) Field1DeepEqual(src *DeletePostCategoryRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostCategoryRPCServiceDeletePostCategoryResult struct {
	Success *DeletePostCategoryRPCResponse `thrift:"success,0,optional" frugal:"0,optional,DeletePostCategoryRPCResponse" json:"success,omitempty"`
}

func NewPostCategoryRPCServiceDeletePostCategoryResult() *PostCategoryRPCServiceDeletePostCategoryResult {
	return &PostCategoryRPCServiceDeletePostCategoryResult{}
}

func (p *PostCategoryRPCServiceDeletePostCategoryResult) InitDefault() {
	*p = PostCategoryRPCServiceDeletePostCategoryResult{}
}

var PostCategoryRPCServiceDeletePostCategoryResult_Success_DEFAULT *DeletePostCategoryRPCResponse

func (p *PostCategoryRPCServiceDeletePostCategoryResult) GetSuccess() (v *DeletePostCategoryRPCResponse) {
	if !p.IsSetSuccess() {
		return PostCategoryRPCServiceDeletePostCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostCategoryRPCServiceDeletePostCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeletePostCategoryRPCResponse)
}

var fieldIDToName_PostCategoryRPCServiceDeletePostCategoryResult = map[int16]string{
	0: "success",
}

func (p *PostCategoryRPCServiceDeletePostCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostCategoryRPCServiceDeletePostCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostCategoryRPCServiceDeletePostCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceDeletePostCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeletePostCategoryRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostCategoryRPCServiceDeletePostCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceDeletePostCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostCategoryRPCServiceDeletePostCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostCategoryRPCServiceDeletePostCategoryResult(%+v)", *p)
}

func (p *PostCategoryRPCServiceDeletePostCategoryResult) DeepEqual(ano *PostCategoryRPCServiceDeletePostCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostCategoryRPCServiceDeletePostCategoryResult) Field0DeepEqual(src *DeletePostCategoryRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostCategoryRPCServiceGetsPostCategoryArgs struct {
	Request *GetsPostCategoryRPCRequest `thrift:"request,1" frugal:"1,default,GetsPostCategoryRPCRequest" json:"request"`
}

func NewPostCategoryRPCServiceGetsPostCategoryArgs() *PostCategoryRPCServiceGetsPostCategoryArgs {
	return &PostCategoryRPCServiceGetsPostCategoryArgs{}
}

func (p *PostCategoryRPCServiceGetsPostCategoryArgs) InitDefault() {
	*p = PostCategoryRPCServiceGetsPostCategoryArgs{}
}

var PostCategoryRPCServiceGetsPostCategoryArgs_Request_DEFAULT *GetsPostCategoryRPCRequest

func (p *PostCategoryRPCServiceGetsPostCategoryArgs) GetRequest() (v *GetsPostCategoryRPCRequest) {
	if !p.IsSetRequest() {
		return PostCategoryRPCServiceGetsPostCategoryArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostCategoryRPCServiceGetsPostCategoryArgs) SetRequest(val *GetsPostCategoryRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostCategoryRPCServiceGetsPostCategoryArgs = map[int16]string{
	1: "request",
}

func (p *PostCategoryRPCServiceGetsPostCategoryArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostCategoryRPCServiceGetsPostCategoryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostCategoryRPCServiceGetsPostCategoryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetsPostCategoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetsPostCategoryRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostCategoryRPCServiceGetsPostCategoryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostCategory_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetsPostCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetsPostCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostCategoryRPCServiceGetsPostCategoryArgs(%+v)", *p)
}

func (p *PostCategoryRPCServiceGetsPostCategoryArgs) DeepEqual(ano *PostCategoryRPCServiceGetsPostCategoryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostCategoryRPCServiceGetsPostCategoryArgs) Field1DeepEqual(src *GetsPostCategoryRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostCategoryRPCServiceGetsPostCategoryResult struct {
	Success *GetsPostCategoryRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetsPostCategoryRPCResponse" json:"success,omitempty"`
}

func NewPostCategoryRPCServiceGetsPostCategoryResult() *PostCategoryRPCServiceGetsPostCategoryResult {
	return &PostCategoryRPCServiceGetsPostCategoryResult{}
}

func (p *PostCategoryRPCServiceGetsPostCategoryResult) InitDefault() {
	*p = PostCategoryRPCServiceGetsPostCategoryResult{}
}

var PostCategoryRPCServiceGetsPostCategoryResult_Success_DEFAULT *GetsPostCategoryRPCResponse

func (p *PostCategoryRPCServiceGetsPostCategoryResult) GetSuccess() (v *GetsPostCategoryRPCResponse) {
	if !p.IsSetSuccess() {
		return PostCategoryRPCServiceGetsPostCategoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostCategoryRPCServiceGetsPostCategoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetsPostCategoryRPCResponse)
}

var fieldIDToName_PostCategoryRPCServiceGetsPostCategoryResult = map[int16]string{
	0: "success",
}

func (p *PostCategoryRPCServiceGetsPostCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostCategoryRPCServiceGetsPostCategoryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostCategoryRPCServiceGetsPostCategoryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetsPostCategoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetsPostCategoryRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostCategoryRPCServiceGetsPostCategoryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostCategory_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetsPostCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetsPostCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostCategoryRPCServiceGetsPostCategoryResult(%+v)", *p)
}

func (p *PostCategoryRPCServiceGetsPostCategoryResult) DeepEqual(ano *PostCategoryRPCServiceGetsPostCategoryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostCategoryRPCServiceGetsPostCategoryResult) Field0DeepEqual(src *GetsPostCategoryRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostCategoryRPCServiceGetPostCategoryByIdArgs struct {
	Request *GetPostCategoryByIdRPCRequest `thrift:"request,1" frugal:"1,default,GetPostCategoryByIdRPCRequest" json:"request"`
}

func NewPostCategoryRPCServiceGetPostCategoryByIdArgs() *PostCategoryRPCServiceGetPostCategoryByIdArgs {
	return &PostCategoryRPCServiceGetPostCategoryByIdArgs{}
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) InitDefault() {
	*p = PostCategoryRPCServiceGetPostCategoryByIdArgs{}
}

var PostCategoryRPCServiceGetPostCategoryByIdArgs_Request_DEFAULT *GetPostCategoryByIdRPCRequest

func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) GetRequest() (v *GetPostCategoryByIdRPCRequest) {
	if !p.IsSetRequest() {
		return PostCategoryRPCServiceGetPostCategoryByIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) SetRequest(val *GetPostCategoryByIdRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostCategoryRPCServiceGetPostCategoryByIdArgs = map[int16]string{
	1: "request",
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostCategoryRPCServiceGetPostCategoryByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetPostCategoryByIdRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPostCategoryById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostCategoryRPCServiceGetPostCategoryByIdArgs(%+v)", *p)
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) DeepEqual(ano *PostCategoryRPCServiceGetPostCategoryByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdArgs) Field1DeepEqual(src *GetPostCategoryByIdRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostCategoryRPCServiceGetPostCategoryByIdResult struct {
	Success *GetPostCategoryByIdRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetPostCategoryByIdRPCResponse" json:"success,omitempty"`
}

func NewPostCategoryRPCServiceGetPostCategoryByIdResult() *PostCategoryRPCServiceGetPostCategoryByIdResult {
	return &PostCategoryRPCServiceGetPostCategoryByIdResult{}
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) InitDefault() {
	*p = PostCategoryRPCServiceGetPostCategoryByIdResult{}
}

var PostCategoryRPCServiceGetPostCategoryByIdResult_Success_DEFAULT *GetPostCategoryByIdRPCResponse

func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) GetSuccess() (v *GetPostCategoryByIdRPCResponse) {
	if !p.IsSetSuccess() {
		return PostCategoryRPCServiceGetPostCategoryByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPostCategoryByIdRPCResponse)
}

var fieldIDToName_PostCategoryRPCServiceGetPostCategoryByIdResult = map[int16]string{
	0: "success",
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostCategoryRPCServiceGetPostCategoryByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetPostCategoryByIdRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPostCategoryById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostCategoryRPCServiceGetPostCategoryByIdResult(%+v)", *p)
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) DeepEqual(ano *PostCategoryRPCServiceGetPostCategoryByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostCategoryRPCServiceGetPostCategoryByIdResult) Field0DeepEqual(src *GetPostCategoryByIdRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
