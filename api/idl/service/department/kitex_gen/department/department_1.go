// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package department

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type AppendDepartmentRPCRequest struct {
	DepartmentName        string  `thrift:"department_name,1" frugal:"1,default,string" json:"department_name"`
	DepartmentDescription string  `thrift:"department_description,2" frugal:"2,default,string" json:"department_description"`
	CityList              []int64 `thrift:"city_list,3" frugal:"3,default,list<i64>" json:"city_list"`
}

func NewAppendDepartmentRPCRequest() *AppendDepartmentRPCRequest {
	return &AppendDepartmentRPCRequest{}
}

func (p *AppendDepartmentRPCRequest) InitDefault() {
	*p = AppendDepartmentRPCRequest{}
}

func (p *AppendDepartmentRPCRequest) GetDepartmentName() (v string) {
	return p.DepartmentName
}

func (p *AppendDepartmentRPCRequest) GetDepartmentDescription() (v string) {
	return p.DepartmentDescription
}

func (p *AppendDepartmentRPCRequest) GetCityList() (v []int64) {
	return p.CityList
}
func (p *AppendDepartmentRPCRequest) SetDepartmentName(val string) {
	p.DepartmentName = val
}
func (p *AppendDepartmentRPCRequest) SetDepartmentDescription(val string) {
	p.DepartmentDescription = val
}
func (p *AppendDepartmentRPCRequest) SetCityList(val []int64) {
	p.CityList = val
}

var fieldIDToName_AppendDepartmentRPCRequest = map[int16]string{
	1: "department_name",
	2: "department_description",
	3: "city_list",
}

func (p *AppendDepartmentRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendDepartmentRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendDepartmentRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DepartmentName = v
	}
	return nil
}

func (p *AppendDepartmentRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DepartmentDescription = v
	}
	return nil
}

func (p *AppendDepartmentRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CityList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CityList = append(p.CityList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *AppendDepartmentRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendDepartmentRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendDepartmentRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DepartmentName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendDepartmentRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_description", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DepartmentDescription); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendDepartmentRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.CityList)); err != nil {
		return err
	}
	for _, v := range p.CityList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendDepartmentRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendDepartmentRPCRequest(%+v)", *p)
}

func (p *AppendDepartmentRPCRequest) DeepEqual(ano *AppendDepartmentRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DepartmentName) {
		return false
	}
	if !p.Field2DeepEqual(ano.DepartmentDescription) {
		return false
	}
	if !p.Field3DeepEqual(ano.CityList) {
		return false
	}
	return true
}

func (p *AppendDepartmentRPCRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.DepartmentName, src) != 0 {
		return false
	}
	return true
}
func (p *AppendDepartmentRPCRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.DepartmentDescription, src) != 0 {
		return false
	}
	return true
}
func (p *AppendDepartmentRPCRequest) Field3DeepEqual(src []int64) bool {

	if len(p.CityList) != len(src) {
		return false
	}
	for i, v := range p.CityList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type AppendDepartmentRPCResponse struct {
	Code    int32                  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string                 `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    *DepartmentInformation `thrift:"data,3" frugal:"3,default,DepartmentInformation" json:"data"`
}

func NewAppendDepartmentRPCResponse() *AppendDepartmentRPCResponse {
	return &AppendDepartmentRPCResponse{}
}

func (p *AppendDepartmentRPCResponse) InitDefault() {
	*p = AppendDepartmentRPCResponse{}
}

func (p *AppendDepartmentRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *AppendDepartmentRPCResponse) GetMessage() (v string) {
	return p.Message
}

var AppendDepartmentRPCResponse_Data_DEFAULT *DepartmentInformation

func (p *AppendDepartmentRPCResponse) GetData() (v *DepartmentInformation) {
	if !p.IsSetData() {
		return AppendDepartmentRPCResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *AppendDepartmentRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *AppendDepartmentRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *AppendDepartmentRPCResponse) SetData(val *DepartmentInformation) {
	p.Data = val
}

var fieldIDToName_AppendDepartmentRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *AppendDepartmentRPCResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *AppendDepartmentRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendDepartmentRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendDepartmentRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *AppendDepartmentRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *AppendDepartmentRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	p.Data = NewDepartmentInformation()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppendDepartmentRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendDepartmentRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendDepartmentRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendDepartmentRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendDepartmentRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendDepartmentRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendDepartmentRPCResponse(%+v)", *p)
}

func (p *AppendDepartmentRPCResponse) DeepEqual(ano *AppendDepartmentRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *AppendDepartmentRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *AppendDepartmentRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *AppendDepartmentRPCResponse) Field3DeepEqual(src *DepartmentInformation) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateDepartmentRPCRequest struct {
	DepartmentName        string `thrift:"department_name,1" frugal:"1,default,string" json:"department_name"`
	DepartmentDescription string `thrift:"department_description,2" frugal:"2,default,string" json:"department_description"`
	DepartmentId          int64  `thrift:"department_id,3" frugal:"3,default,i64" json:"department_id"`
}

func NewUpdateDepartmentRPCRequest() *UpdateDepartmentRPCRequest {
	return &UpdateDepartmentRPCRequest{}
}

func (p *UpdateDepartmentRPCRequest) InitDefault() {
	*p = UpdateDepartmentRPCRequest{}
}

func (p *UpdateDepartmentRPCRequest) GetDepartmentName() (v string) {
	return p.DepartmentName
}

func (p *UpdateDepartmentRPCRequest) GetDepartmentDescription() (v string) {
	return p.DepartmentDescription
}

func (p *UpdateDepartmentRPCRequest) GetDepartmentId() (v int64) {
	return p.DepartmentId
}
func (p *UpdateDepartmentRPCRequest) SetDepartmentName(val string) {
	p.DepartmentName = val
}
func (p *UpdateDepartmentRPCRequest) SetDepartmentDescription(val string) {
	p.DepartmentDescription = val
}
func (p *UpdateDepartmentRPCRequest) SetDepartmentId(val int64) {
	p.DepartmentId = val
}

var fieldIDToName_UpdateDepartmentRPCRequest = map[int16]string{
	1: "department_name",
	2: "department_description",
	3: "department_id",
}

func (p *UpdateDepartmentRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateDepartmentRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateDepartmentRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DepartmentName = v
	}
	return nil
}

func (p *UpdateDepartmentRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DepartmentDescription = v
	}
	return nil
}

func (p *UpdateDepartmentRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.DepartmentId = v
	}
	return nil
}

func (p *UpdateDepartmentRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDepartmentRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateDepartmentRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DepartmentName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateDepartmentRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_description", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DepartmentDescription); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateDepartmentRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DepartmentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateDepartmentRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDepartmentRPCRequest(%+v)", *p)
}

func (p *UpdateDepartmentRPCRequest) DeepEqual(ano *UpdateDepartmentRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DepartmentName) {
		return false
	}
	if !p.Field2DeepEqual(ano.DepartmentDescription) {
		return false
	}
	if !p.Field3DeepEqual(ano.DepartmentId) {
		return false
	}
	return true
}

func (p *UpdateDepartmentRPCRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.DepartmentName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateDepartmentRPCRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.DepartmentDescription, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateDepartmentRPCRequest) Field3DeepEqual(src int64) bool {

	if p.DepartmentId != src {
		return false
	}
	return true
}

type UpdateDepartmentRPCResponse struct {
	Code    int32                  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string                 `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    *DepartmentInformation `thrift:"data,3" frugal:"3,default,DepartmentInformation" json:"data"`
}

func NewUpdateDepartmentRPCResponse() *UpdateDepartmentRPCResponse {
	return &UpdateDepartmentRPCResponse{}
}

func (p *UpdateDepartmentRPCResponse) InitDefault() {
	*p = UpdateDepartmentRPCResponse{}
}

func (p *UpdateDepartmentRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *UpdateDepartmentRPCResponse) GetMessage() (v string) {
	return p.Message
}

var UpdateDepartmentRPCResponse_Data_DEFAULT *DepartmentInformation

func (p *UpdateDepartmentRPCResponse) GetData() (v *DepartmentInformation) {
	if !p.IsSetData() {
		return UpdateDepartmentRPCResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *UpdateDepartmentRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *UpdateDepartmentRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *UpdateDepartmentRPCResponse) SetData(val *DepartmentInformation) {
	p.Data = val
}

var fieldIDToName_UpdateDepartmentRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *UpdateDepartmentRPCResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *UpdateDepartmentRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateDepartmentRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateDepartmentRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *UpdateDepartmentRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *UpdateDepartmentRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	p.Data = NewDepartmentInformation()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateDepartmentRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDepartmentRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateDepartmentRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateDepartmentRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateDepartmentRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateDepartmentRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateDepartmentRPCResponse(%+v)", *p)
}

func (p *UpdateDepartmentRPCResponse) DeepEqual(ano *UpdateDepartmentRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *UpdateDepartmentRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *UpdateDepartmentRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateDepartmentRPCResponse) Field3DeepEqual(src *DepartmentInformation) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteDepartmentRPCRequest struct {
	DepartmentId int64 `thrift:"department_id,1" frugal:"1,default,i64" json:"department_id"`
}

func NewDeleteDepartmentRPCRequest() *DeleteDepartmentRPCRequest {
	return &DeleteDepartmentRPCRequest{}
}

func (p *DeleteDepartmentRPCRequest) InitDefault() {
	*p = DeleteDepartmentRPCRequest{}
}

func (p *DeleteDepartmentRPCRequest) GetDepartmentId() (v int64) {
	return p.DepartmentId
}
func (p *DeleteDepartmentRPCRequest) SetDepartmentId(val int64) {
	p.DepartmentId = val
}

var fieldIDToName_DeleteDepartmentRPCRequest = map[int16]string{
	1: "department_id",
}

func (p *DeleteDepartmentRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteDepartmentRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteDepartmentRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.DepartmentId = v
	}
	return nil
}

func (p *DeleteDepartmentRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDepartmentRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteDepartmentRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DepartmentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteDepartmentRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDepartmentRPCRequest(%+v)", *p)
}

func (p *DeleteDepartmentRPCRequest) DeepEqual(ano *DeleteDepartmentRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DepartmentId) {
		return false
	}
	return true
}

func (p *DeleteDepartmentRPCRequest) Field1DeepEqual(src int64) bool {

	if p.DepartmentId != src {
		return false
	}
	return true
}

type DeleteDepartmentRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewDeleteDepartmentRPCResponse() *DeleteDepartmentRPCResponse {
	return &DeleteDepartmentRPCResponse{}
}

func (p *DeleteDepartmentRPCResponse) InitDefault() {
	*p = DeleteDepartmentRPCResponse{}
}

func (p *DeleteDepartmentRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *DeleteDepartmentRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *DeleteDepartmentRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *DeleteDepartmentRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_DeleteDepartmentRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *DeleteDepartmentRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteDepartmentRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteDepartmentRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *DeleteDepartmentRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *DeleteDepartmentRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDepartmentRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteDepartmentRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteDepartmentRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteDepartmentRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteDepartmentRPCResponse(%+v)", *p)
}

func (p *DeleteDepartmentRPCResponse) DeepEqual(ano *DeleteDepartmentRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *DeleteDepartmentRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *DeleteDepartmentRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type GetsDepartmentRPCRequest struct {
}

func NewGetsDepartmentRPCRequest() *GetsDepartmentRPCRequest {
	return &GetsDepartmentRPCRequest{}
}

func (p *GetsDepartmentRPCRequest) InitDefault() {
	*p = GetsDepartmentRPCRequest{}
}

var fieldIDToName_GetsDepartmentRPCRequest = map[int16]string{}

func (p *GetsDepartmentRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsDepartmentRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetsDepartmentRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsDepartmentRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsDepartmentRPCRequest(%+v)", *p)
}

func (p *GetsDepartmentRPCRequest) DeepEqual(ano *GetsDepartmentRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetsDepartmentRPCResponse struct {
	Code    int32                    `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string                   `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    []*DepartmentInformation `thrift:"data,3" frugal:"3,default,list<DepartmentInformation>" json:"data"`
}

func NewGetsDepartmentRPCResponse() *GetsDepartmentRPCResponse {
	return &GetsDepartmentRPCResponse{}
}

func (p *GetsDepartmentRPCResponse) InitDefault() {
	*p = GetsDepartmentRPCResponse{}
}

func (p *GetsDepartmentRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetsDepartmentRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetsDepartmentRPCResponse) GetData() (v []*DepartmentInformation) {
	return p.Data
}
func (p *GetsDepartmentRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetsDepartmentRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetsDepartmentRPCResponse) SetData(val []*DepartmentInformation) {
	p.Data = val
}

var fieldIDToName_GetsDepartmentRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *GetsDepartmentRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetsDepartmentRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsDepartmentRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetsDepartmentRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetsDepartmentRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*DepartmentInformation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewDepartmentInformation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetsDepartmentRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsDepartmentRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsDepartmentRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetsDepartmentRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetsDepartmentRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetsDepartmentRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsDepartmentRPCResponse(%+v)", *p)
}

func (p *GetsDepartmentRPCResponse) DeepEqual(ano *GetsDepartmentRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetsDepartmentRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetsDepartmentRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetsDepartmentRPCResponse) Field3DeepEqual(src []*DepartmentInformation) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type AppendCityRPCRequest struct {
	CityName string `thrift:"city_name,1" frugal:"1,default,string" json:"city_name"`
}

func NewAppendCityRPCRequest() *AppendCityRPCRequest {
	return &AppendCityRPCRequest{}
}

func (p *AppendCityRPCRequest) InitDefault() {
	*p = AppendCityRPCRequest{}
}

func (p *AppendCityRPCRequest) GetCityName() (v string) {
	return p.CityName
}
func (p *AppendCityRPCRequest) SetCityName(val string) {
	p.CityName = val
}

var fieldIDToName_AppendCityRPCRequest = map[int16]string{
	1: "city_name",
}

func (p *AppendCityRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendCityRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendCityRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CityName = v
	}
	return nil
}

func (p *AppendCityRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendCityRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendCityRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CityName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendCityRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendCityRPCRequest(%+v)", *p)
}

func (p *AppendCityRPCRequest) DeepEqual(ano *AppendCityRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CityName) {
		return false
	}
	return true
}

func (p *AppendCityRPCRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.CityName, src) != 0 {
		return false
	}
	return true
}

type AppendCityRPCResponse struct {
	Code    int32            `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string           `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    *CityInformation `thrift:"data,3" frugal:"3,default,CityInformation" json:"data"`
}

func NewAppendCityRPCResponse() *AppendCityRPCResponse {
	return &AppendCityRPCResponse{}
}

func (p *AppendCityRPCResponse) InitDefault() {
	*p = AppendCityRPCResponse{}
}

func (p *AppendCityRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *AppendCityRPCResponse) GetMessage() (v string) {
	return p.Message
}

var AppendCityRPCResponse_Data_DEFAULT *CityInformation

func (p *AppendCityRPCResponse) GetData() (v *CityInformation) {
	if !p.IsSetData() {
		return AppendCityRPCResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *AppendCityRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *AppendCityRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *AppendCityRPCResponse) SetData(val *CityInformation) {
	p.Data = val
}

var fieldIDToName_AppendCityRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *AppendCityRPCResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *AppendCityRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendCityRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendCityRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *AppendCityRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *AppendCityRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	p.Data = NewCityInformation()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *AppendCityRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendCityRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendCityRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendCityRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendCityRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendCityRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendCityRPCResponse(%+v)", *p)
}

func (p *AppendCityRPCResponse) DeepEqual(ano *AppendCityRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *AppendCityRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *AppendCityRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *AppendCityRPCResponse) Field3DeepEqual(src *CityInformation) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteCityRPCRequest struct {
	CityId int64 `thrift:"city_id,1" frugal:"1,default,i64" json:"city_id"`
}

func NewDeleteCityRPCRequest() *DeleteCityRPCRequest {
	return &DeleteCityRPCRequest{}
}

func (p *DeleteCityRPCRequest) InitDefault() {
	*p = DeleteCityRPCRequest{}
}

func (p *DeleteCityRPCRequest) GetCityId() (v int64) {
	return p.CityId
}
func (p *DeleteCityRPCRequest) SetCityId(val int64) {
	p.CityId = val
}

var fieldIDToName_DeleteCityRPCRequest = map[int16]string{
	1: "city_id",
}

func (p *DeleteCityRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteCityRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCityRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CityId = v
	}
	return nil
}

func (p *DeleteCityRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCityRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCityRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CityId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteCityRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCityRPCRequest(%+v)", *p)
}

func (p *DeleteCityRPCRequest) DeepEqual(ano *DeleteCityRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CityId) {
		return false
	}
	return true
}

func (p *DeleteCityRPCRequest) Field1DeepEqual(src int64) bool {

	if p.CityId != src {
		return false
	}
	return true
}

type DeleteCityRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewDeleteCityRPCResponse() *DeleteCityRPCResponse {
	return &DeleteCityRPCResponse{}
}

func (p *DeleteCityRPCResponse) InitDefault() {
	*p = DeleteCityRPCResponse{}
}

func (p *DeleteCityRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *DeleteCityRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *DeleteCityRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *DeleteCityRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_DeleteCityRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *DeleteCityRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteCityRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteCityRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *DeleteCityRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *DeleteCityRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCityRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteCityRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteCityRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteCityRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteCityRPCResponse(%+v)", *p)
}

func (p *DeleteCityRPCResponse) DeepEqual(ano *DeleteCityRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *DeleteCityRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *DeleteCityRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type GetsCityRPCRequest struct {
}

func NewGetsCityRPCRequest() *GetsCityRPCRequest {
	return &GetsCityRPCRequest{}
}

func (p *GetsCityRPCRequest) InitDefault() {
	*p = GetsCityRPCRequest{}
}

var fieldIDToName_GetsCityRPCRequest = map[int16]string{}

func (p *GetsCityRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsCityRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetsCityRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsCityRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsCityRPCRequest(%+v)", *p)
}

func (p *GetsCityRPCRequest) DeepEqual(ano *GetsCityRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type GetsCityRPCResponse struct {
	Code    int32              `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string             `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    []*CityInformation `thrift:"data,3" frugal:"3,default,list<CityInformation>" json:"data"`
}

func NewGetsCityRPCResponse() *GetsCityRPCResponse {
	return &GetsCityRPCResponse{}
}

func (p *GetsCityRPCResponse) InitDefault() {
	*p = GetsCityRPCResponse{}
}

func (p *GetsCityRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetsCityRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetsCityRPCResponse) GetData() (v []*CityInformation) {
	return p.Data
}
func (p *GetsCityRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetsCityRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetsCityRPCResponse) SetData(val []*CityInformation) {
	p.Data = val
}

var fieldIDToName_GetsCityRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *GetsCityRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetsCityRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsCityRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetsCityRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetsCityRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*CityInformation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCityInformation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetsCityRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsCityRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsCityRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetsCityRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetsCityRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetsCityRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsCityRPCResponse(%+v)", *p)
}

func (p *GetsCityRPCResponse) DeepEqual(ano *GetsCityRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetsCityRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetsCityRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetsCityRPCResponse) Field3DeepEqual(src []*CityInformation) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetsCityByDepartmentRPCRequest struct {
	DepartmentId int64 `thrift:"department_id,1" frugal:"1,default,i64" json:"department_id"`
}

func NewGetsCityByDepartmentRPCRequest() *GetsCityByDepartmentRPCRequest {
	return &GetsCityByDepartmentRPCRequest{}
}

func (p *GetsCityByDepartmentRPCRequest) InitDefault() {
	*p = GetsCityByDepartmentRPCRequest{}
}

func (p *GetsCityByDepartmentRPCRequest) GetDepartmentId() (v int64) {
	return p.DepartmentId
}
func (p *GetsCityByDepartmentRPCRequest) SetDepartmentId(val int64) {
	p.DepartmentId = val
}

var fieldIDToName_GetsCityByDepartmentRPCRequest = map[int16]string{
	1: "department_id",
}

func (p *GetsCityByDepartmentRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetsCityByDepartmentRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsCityByDepartmentRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.DepartmentId = v
	}
	return nil
}

func (p *GetsCityByDepartmentRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsCityByDepartmentRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsCityByDepartmentRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DepartmentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetsCityByDepartmentRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsCityByDepartmentRPCRequest(%+v)", *p)
}

func (p *GetsCityByDepartmentRPCRequest) DeepEqual(ano *GetsCityByDepartmentRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DepartmentId) {
		return false
	}
	return true
}

func (p *GetsCityByDepartmentRPCRequest) Field1DeepEqual(src int64) bool {

	if p.DepartmentId != src {
		return false
	}
	return true
}

type GetsCityByDepartmentRPCResponse struct {
	Code    int32              `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string             `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    []*CityInformation `thrift:"data,3" frugal:"3,default,list<CityInformation>" json:"data"`
}

func NewGetsCityByDepartmentRPCResponse() *GetsCityByDepartmentRPCResponse {
	return &GetsCityByDepartmentRPCResponse{}
}

func (p *GetsCityByDepartmentRPCResponse) InitDefault() {
	*p = GetsCityByDepartmentRPCResponse{}
}

func (p *GetsCityByDepartmentRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetsCityByDepartmentRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetsCityByDepartmentRPCResponse) GetData() (v []*CityInformation) {
	return p.Data
}
func (p *GetsCityByDepartmentRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetsCityByDepartmentRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetsCityByDepartmentRPCResponse) SetData(val []*CityInformation) {
	p.Data = val
}

var fieldIDToName_GetsCityByDepartmentRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *GetsCityByDepartmentRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetsCityByDepartmentRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsCityByDepartmentRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetsCityByDepartmentRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetsCityByDepartmentRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*CityInformation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCityInformation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetsCityByDepartmentRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsCityByDepartmentRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsCityByDepartmentRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetsCityByDepartmentRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetsCityByDepartmentRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetsCityByDepartmentRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsCityByDepartmentRPCResponse(%+v)", *p)
}

func (p *GetsCityByDepartmentRPCResponse) DeepEqual(ano *GetsCityByDepartmentRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetsCityByDepartmentRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetsCityByDepartmentRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetsCityByDepartmentRPCResponse) Field3DeepEqual(src []*CityInformation) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetDepartmentInfosByIdRPCRequest struct {
	DepartmentIdList []int64 `thrift:"department_id_list,1" frugal:"1,default,list<i64>" json:"department_id_list"`
}

func NewGetDepartmentInfosByIdRPCRequest() *GetDepartmentInfosByIdRPCRequest {
	return &GetDepartmentInfosByIdRPCRequest{}
}

func (p *GetDepartmentInfosByIdRPCRequest) InitDefault() {
	*p = GetDepartmentInfosByIdRPCRequest{}
}

func (p *GetDepartmentInfosByIdRPCRequest) GetDepartmentIdList() (v []int64) {
	return p.DepartmentIdList
}
func (p *GetDepartmentInfosByIdRPCRequest) SetDepartmentIdList(val []int64) {
	p.DepartmentIdList = val
}

var fieldIDToName_GetDepartmentInfosByIdRPCRequest = map[int16]string{
	1: "department_id_list",
}

func (p *GetDepartmentInfosByIdRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDepartmentInfosByIdRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDepartmentInfosByIdRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.DepartmentIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.DepartmentIdList = append(p.DepartmentIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDepartmentInfosByIdRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartmentInfosByIdRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDepartmentInfosByIdRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_id_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.DepartmentIdList)); err != nil {
		return err
	}
	for _, v := range p.DepartmentIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDepartmentInfosByIdRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDepartmentInfosByIdRPCRequest(%+v)", *p)
}

func (p *GetDepartmentInfosByIdRPCRequest) DeepEqual(ano *GetDepartmentInfosByIdRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DepartmentIdList) {
		return false
	}
	return true
}

func (p *GetDepartmentInfosByIdRPCRequest) Field1DeepEqual(src []int64) bool {

	if len(p.DepartmentIdList) != len(src) {
		return false
	}
	for i, v := range p.DepartmentIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type GetDepartmentInfosByIdRPCResponse struct {
	Code               int32                    `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message            string                   `thrift:"message,2" frugal:"2,default,string" json:"message"`
	DepartmentInfoList []*DepartmentInformation `thrift:"department_info_list,3" frugal:"3,default,list<DepartmentInformation>" json:"department_info_list"`
}

func NewGetDepartmentInfosByIdRPCResponse() *GetDepartmentInfosByIdRPCResponse {
	return &GetDepartmentInfosByIdRPCResponse{}
}

func (p *GetDepartmentInfosByIdRPCResponse) InitDefault() {
	*p = GetDepartmentInfosByIdRPCResponse{}
}

func (p *GetDepartmentInfosByIdRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetDepartmentInfosByIdRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetDepartmentInfosByIdRPCResponse) GetDepartmentInfoList() (v []*DepartmentInformation) {
	return p.DepartmentInfoList
}
func (p *GetDepartmentInfosByIdRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetDepartmentInfosByIdRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetDepartmentInfosByIdRPCResponse) SetDepartmentInfoList(val []*DepartmentInformation) {
	p.DepartmentInfoList = val
}

var fieldIDToName_GetDepartmentInfosByIdRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "department_info_list",
}

func (p *GetDepartmentInfosByIdRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDepartmentInfosByIdRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDepartmentInfosByIdRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetDepartmentInfosByIdRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetDepartmentInfosByIdRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.DepartmentInfoList = make([]*DepartmentInformation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewDepartmentInformation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.DepartmentInfoList = append(p.DepartmentInfoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDepartmentInfosByIdRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartmentInfosByIdRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDepartmentInfosByIdRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDepartmentInfosByIdRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetDepartmentInfosByIdRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_info_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DepartmentInfoList)); err != nil {
		return err
	}
	for _, v := range p.DepartmentInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetDepartmentInfosByIdRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDepartmentInfosByIdRPCResponse(%+v)", *p)
}

func (p *GetDepartmentInfosByIdRPCResponse) DeepEqual(ano *GetDepartmentInfosByIdRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.DepartmentInfoList) {
		return false
	}
	return true
}

func (p *GetDepartmentInfosByIdRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetDepartmentInfosByIdRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetDepartmentInfosByIdRPCResponse) Field3DeepEqual(src []*DepartmentInformation) bool {

	if len(p.DepartmentInfoList) != len(src) {
		return false
	}
	for i, v := range p.DepartmentInfoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetCityInfoByIdRPCRequest struct {
	CityId []int64 `thrift:"city_id,1" frugal:"1,default,list<i64>" json:"city_id"`
}

func NewGetCityInfoByIdRPCRequest() *GetCityInfoByIdRPCRequest {
	return &GetCityInfoByIdRPCRequest{}
}

func (p *GetCityInfoByIdRPCRequest) InitDefault() {
	*p = GetCityInfoByIdRPCRequest{}
}

func (p *GetCityInfoByIdRPCRequest) GetCityId() (v []int64) {
	return p.CityId
}
func (p *GetCityInfoByIdRPCRequest) SetCityId(val []int64) {
	p.CityId = val
}

var fieldIDToName_GetCityInfoByIdRPCRequest = map[int16]string{
	1: "city_id",
}

func (p *GetCityInfoByIdRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCityInfoByIdRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCityInfoByIdRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CityId = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CityId = append(p.CityId, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCityInfoByIdRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCityInfoByIdRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCityInfoByIdRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_id", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.CityId)); err != nil {
		return err
	}
	for _, v := range p.CityId {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCityInfoByIdRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCityInfoByIdRPCRequest(%+v)", *p)
}

func (p *GetCityInfoByIdRPCRequest) DeepEqual(ano *GetCityInfoByIdRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CityId) {
		return false
	}
	return true
}

func (p *GetCityInfoByIdRPCRequest) Field1DeepEqual(src []int64) bool {

	if len(p.CityId) != len(src) {
		return false
	}
	for i, v := range p.CityId {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type GetCityInfoByIdRPCResponse struct {
	Code         int32              `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message      string             `thrift:"message,2" frugal:"2,default,string" json:"message"`
	CityInfoList []*CityInformation `thrift:"city_info_list,3" frugal:"3,default,list<CityInformation>" json:"city_info_list"`
}

func NewGetCityInfoByIdRPCResponse() *GetCityInfoByIdRPCResponse {
	return &GetCityInfoByIdRPCResponse{}
}

func (p *GetCityInfoByIdRPCResponse) InitDefault() {
	*p = GetCityInfoByIdRPCResponse{}
}

func (p *GetCityInfoByIdRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetCityInfoByIdRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetCityInfoByIdRPCResponse) GetCityInfoList() (v []*CityInformation) {
	return p.CityInfoList
}
func (p *GetCityInfoByIdRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetCityInfoByIdRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetCityInfoByIdRPCResponse) SetCityInfoList(val []*CityInformation) {
	p.CityInfoList = val
}

var fieldIDToName_GetCityInfoByIdRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "city_info_list",
}

func (p *GetCityInfoByIdRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCityInfoByIdRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCityInfoByIdRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetCityInfoByIdRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetCityInfoByIdRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CityInfoList = make([]*CityInformation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCityInformation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.CityInfoList = append(p.CityInfoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCityInfoByIdRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCityInfoByIdRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCityInfoByIdRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCityInfoByIdRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetCityInfoByIdRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_info_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CityInfoList)); err != nil {
		return err
	}
	for _, v := range p.CityInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetCityInfoByIdRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCityInfoByIdRPCResponse(%+v)", *p)
}

func (p *GetCityInfoByIdRPCResponse) DeepEqual(ano *GetCityInfoByIdRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.CityInfoList) {
		return false
	}
	return true
}

func (p *GetCityInfoByIdRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetCityInfoByIdRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetCityInfoByIdRPCResponse) Field3DeepEqual(src []*CityInformation) bool {

	if len(p.CityInfoList) != len(src) {
		return false
	}
	for i, v := range p.CityInfoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetDepartmentCityInfoByIdRPCRequest struct {
	DepartmentIdList []int64 `thrift:"department_id_list,1" frugal:"1,default,list<i64>" json:"department_id_list"`
	CityIdList       []int64 `thrift:"city_id_list,2" frugal:"2,default,list<i64>" json:"city_id_list"`
}

func NewGetDepartmentCityInfoByIdRPCRequest() *GetDepartmentCityInfoByIdRPCRequest {
	return &GetDepartmentCityInfoByIdRPCRequest{}
}

func (p *GetDepartmentCityInfoByIdRPCRequest) InitDefault() {
	*p = GetDepartmentCityInfoByIdRPCRequest{}
}

func (p *GetDepartmentCityInfoByIdRPCRequest) GetDepartmentIdList() (v []int64) {
	return p.DepartmentIdList
}

func (p *GetDepartmentCityInfoByIdRPCRequest) GetCityIdList() (v []int64) {
	return p.CityIdList
}
func (p *GetDepartmentCityInfoByIdRPCRequest) SetDepartmentIdList(val []int64) {
	p.DepartmentIdList = val
}
func (p *GetDepartmentCityInfoByIdRPCRequest) SetCityIdList(val []int64) {
	p.CityIdList = val
}

var fieldIDToName_GetDepartmentCityInfoByIdRPCRequest = map[int16]string{
	1: "department_id_list",
	2: "city_id_list",
}

func (p *GetDepartmentCityInfoByIdRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDepartmentCityInfoByIdRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDepartmentCityInfoByIdRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.DepartmentIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.DepartmentIdList = append(p.DepartmentIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDepartmentCityInfoByIdRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CityIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CityIdList = append(p.CityIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDepartmentCityInfoByIdRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartmentCityInfoByIdRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDepartmentCityInfoByIdRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_id_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.DepartmentIdList)); err != nil {
		return err
	}
	for _, v := range p.DepartmentIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDepartmentCityInfoByIdRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_id_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.CityIdList)); err != nil {
		return err
	}
	for _, v := range p.CityIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetDepartmentCityInfoByIdRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDepartmentCityInfoByIdRPCRequest(%+v)", *p)
}

func (p *GetDepartmentCityInfoByIdRPCRequest) DeepEqual(ano *GetDepartmentCityInfoByIdRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DepartmentIdList) {
		return false
	}
	if !p.Field2DeepEqual(ano.CityIdList) {
		return false
	}
	return true
}

func (p *GetDepartmentCityInfoByIdRPCRequest) Field1DeepEqual(src []int64) bool {

	if len(p.DepartmentIdList) != len(src) {
		return false
	}
	for i, v := range p.DepartmentIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *GetDepartmentCityInfoByIdRPCRequest) Field2DeepEqual(src []int64) bool {

	if len(p.CityIdList) != len(src) {
		return false
	}
	for i, v := range p.CityIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type GetDepartmentCityInfoByIdRPCResponse struct {
	Code               int32                    `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message            string                   `thrift:"message,2" frugal:"2,default,string" json:"message"`
	DepartmentInfoList []*DepartmentInformation `thrift:"department_info_list,3" frugal:"3,default,list<DepartmentInformation>" json:"department_info_list"`
	CityInfoList       []*CityInformation       `thrift:"city_info_list,4" frugal:"4,default,list<CityInformation>" json:"city_info_list"`
}

func NewGetDepartmentCityInfoByIdRPCResponse() *GetDepartmentCityInfoByIdRPCResponse {
	return &GetDepartmentCityInfoByIdRPCResponse{}
}

func (p *GetDepartmentCityInfoByIdRPCResponse) InitDefault() {
	*p = GetDepartmentCityInfoByIdRPCResponse{}
}

func (p *GetDepartmentCityInfoByIdRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetDepartmentCityInfoByIdRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetDepartmentCityInfoByIdRPCResponse) GetDepartmentInfoList() (v []*DepartmentInformation) {
	return p.DepartmentInfoList
}

func (p *GetDepartmentCityInfoByIdRPCResponse) GetCityInfoList() (v []*CityInformation) {
	return p.CityInfoList
}
func (p *GetDepartmentCityInfoByIdRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetDepartmentCityInfoByIdRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetDepartmentCityInfoByIdRPCResponse) SetDepartmentInfoList(val []*DepartmentInformation) {
	p.DepartmentInfoList = val
}
func (p *GetDepartmentCityInfoByIdRPCResponse) SetCityInfoList(val []*CityInformation) {
	p.CityInfoList = val
}

var fieldIDToName_GetDepartmentCityInfoByIdRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "department_info_list",
	4: "city_info_list",
}

func (p *GetDepartmentCityInfoByIdRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDepartmentCityInfoByIdRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDepartmentCityInfoByIdRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetDepartmentCityInfoByIdRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetDepartmentCityInfoByIdRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.DepartmentInfoList = make([]*DepartmentInformation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewDepartmentInformation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.DepartmentInfoList = append(p.DepartmentInfoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDepartmentCityInfoByIdRPCResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CityInfoList = make([]*CityInformation, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewCityInformation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.CityInfoList = append(p.CityInfoList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDepartmentCityInfoByIdRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartmentCityInfoByIdRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDepartmentCityInfoByIdRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDepartmentCityInfoByIdRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetDepartmentCityInfoByIdRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_info_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DepartmentInfoList)); err != nil {
		return err
	}
	for _, v := range p.DepartmentInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetDepartmentCityInfoByIdRPCResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_info_list", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CityInfoList)); err != nil {
		return err
	}
	for _, v := range p.CityInfoList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetDepartmentCityInfoByIdRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDepartmentCityInfoByIdRPCResponse(%+v)", *p)
}

func (p *GetDepartmentCityInfoByIdRPCResponse) DeepEqual(ano *GetDepartmentCityInfoByIdRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.DepartmentInfoList) {
		return false
	}
	if !p.Field4DeepEqual(ano.CityInfoList) {
		return false
	}
	return true
}

func (p *GetDepartmentCityInfoByIdRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetDepartmentCityInfoByIdRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetDepartmentCityInfoByIdRPCResponse) Field3DeepEqual(src []*DepartmentInformation) bool {

	if len(p.DepartmentInfoList) != len(src) {
		return false
	}
	for i, v := range p.DepartmentInfoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDepartmentCityInfoByIdRPCResponse) Field4DeepEqual(src []*CityInformation) bool {

	if len(p.CityInfoList) != len(src) {
		return false
	}
	for i, v := range p.CityInfoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type DepartmentRPCService interface {
	AppendDepartment(ctx context.Context, request *AppendDepartmentRPCRequest) (r *AppendDepartmentRPCResponse, err error)

	UpdateDepartment(ctx context.Context, request *UpdateDepartmentRPCRequest) (r *UpdateDepartmentRPCResponse, err error)

	DeleteDepartment(ctx context.Context, request *DeleteDepartmentRPCRequest) (r *DeleteDepartmentRPCResponse, err error)

	GetsDepartment(ctx context.Context, request *GetsDepartmentRPCRequest) (r *GetsDepartmentRPCResponse, err error)

	AppendCity(ctx context.Context, request *AppendCityRPCRequest) (r *AppendCityRPCResponse, err error)

	DeleteCity(ctx context.Context, request *DeleteCityRPCRequest) (r *DeleteCityRPCResponse, err error)

	GetsCity(ctx context.Context, request *GetsCityRPCRequest) (r *GetsCityRPCResponse, err error)

	GetsCityByDepartment(ctx context.Context, request *GetsCityByDepartmentRPCRequest) (r *GetsCityByDepartmentRPCResponse, err error)

	GetDepartmentInfosById(ctx context.Context, request *GetDepartmentInfosByIdRPCRequest) (r *GetDepartmentInfosByIdRPCResponse, err error)

	GetCityInfoById(ctx context.Context, request *GetCityInfoByIdRPCRequest) (r *GetCityInfoByIdRPCResponse, err error)

	GetDepartmentCityInfoById(ctx context.Context, request *GetDepartmentCityInfoByIdRPCRequest) (r *GetDepartmentCityInfoByIdRPCResponse, err error)
}

type DepartmentRPCServiceClient struct {
	c thrift.TClient
}

func NewDepartmentRPCServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DepartmentRPCServiceClient {
	return &DepartmentRPCServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDepartmentRPCServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DepartmentRPCServiceClient {
	return &DepartmentRPCServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDepartmentRPCServiceClient(c thrift.TClient) *DepartmentRPCServiceClient {
	return &DepartmentRPCServiceClient{
		c: c,
	}
}

func (p *DepartmentRPCServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *DepartmentRPCServiceClient) AppendDepartment(ctx context.Context, request *AppendDepartmentRPCRequest) (r *AppendDepartmentRPCResponse, err error) {
	var _args DepartmentRPCServiceAppendDepartmentArgs
	_args.Request = request
	var _result DepartmentRPCServiceAppendDepartmentResult
	if err = p.Client_().Call(ctx, "AppendDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentRPCServiceClient) UpdateDepartment(ctx context.Context, request *UpdateDepartmentRPCRequest) (r *UpdateDepartmentRPCResponse, err error) {
	var _args DepartmentRPCServiceUpdateDepartmentArgs
	_args.Request = request
	var _result DepartmentRPCServiceUpdateDepartmentResult
	if err = p.Client_().Call(ctx, "UpdateDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentRPCServiceClient) DeleteDepartment(ctx context.Context, request *DeleteDepartmentRPCRequest) (r *DeleteDepartmentRPCResponse, err error) {
	var _args DepartmentRPCServiceDeleteDepartmentArgs
	_args.Request = request
	var _result DepartmentRPCServiceDeleteDepartmentResult
	if err = p.Client_().Call(ctx, "DeleteDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentRPCServiceClient) GetsDepartment(ctx context.Context, request *GetsDepartmentRPCRequest) (r *GetsDepartmentRPCResponse, err error) {
	var _args DepartmentRPCServiceGetsDepartmentArgs
	_args.Request = request
	var _result DepartmentRPCServiceGetsDepartmentResult
	if err = p.Client_().Call(ctx, "GetsDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentRPCServiceClient) AppendCity(ctx context.Context, request *AppendCityRPCRequest) (r *AppendCityRPCResponse, err error) {
	var _args DepartmentRPCServiceAppendCityArgs
	_args.Request = request
	var _result DepartmentRPCServiceAppendCityResult
	if err = p.Client_().Call(ctx, "AppendCity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentRPCServiceClient) DeleteCity(ctx context.Context, request *DeleteCityRPCRequest) (r *DeleteCityRPCResponse, err error) {
	var _args DepartmentRPCServiceDeleteCityArgs
	_args.Request = request
	var _result DepartmentRPCServiceDeleteCityResult
	if err = p.Client_().Call(ctx, "DeleteCity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentRPCServiceClient) GetsCity(ctx context.Context, request *GetsCityRPCRequest) (r *GetsCityRPCResponse, err error) {
	var _args DepartmentRPCServiceGetsCityArgs
	_args.Request = request
	var _result DepartmentRPCServiceGetsCityResult
	if err = p.Client_().Call(ctx, "GetsCity", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentRPCServiceClient) GetsCityByDepartment(ctx context.Context, request *GetsCityByDepartmentRPCRequest) (r *GetsCityByDepartmentRPCResponse, err error) {
	var _args DepartmentRPCServiceGetsCityByDepartmentArgs
	_args.Request = request
	var _result DepartmentRPCServiceGetsCityByDepartmentResult
	if err = p.Client_().Call(ctx, "GetsCityByDepartment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentRPCServiceClient) GetDepartmentInfosById(ctx context.Context, request *GetDepartmentInfosByIdRPCRequest) (r *GetDepartmentInfosByIdRPCResponse, err error) {
	var _args DepartmentRPCServiceGetDepartmentInfosByIdArgs
	_args.Request = request
	var _result DepartmentRPCServiceGetDepartmentInfosByIdResult
	if err = p.Client_().Call(ctx, "GetDepartmentInfosById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentRPCServiceClient) GetCityInfoById(ctx context.Context, request *GetCityInfoByIdRPCRequest) (r *GetCityInfoByIdRPCResponse, err error) {
	var _args DepartmentRPCServiceGetCityInfoByIdArgs
	_args.Request = request
	var _result DepartmentRPCServiceGetCityInfoByIdResult
	if err = p.Client_().Call(ctx, "GetCityInfoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *DepartmentRPCServiceClient) GetDepartmentCityInfoById(ctx context.Context, request *GetDepartmentCityInfoByIdRPCRequest) (r *GetDepartmentCityInfoByIdRPCResponse, err error) {
	var _args DepartmentRPCServiceGetDepartmentCityInfoByIdArgs
	_args.Request = request
	var _result DepartmentRPCServiceGetDepartmentCityInfoByIdResult
	if err = p.Client_().Call(ctx, "GetDepartmentCityInfoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type DepartmentRPCServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      DepartmentRPCService
}

func (p *DepartmentRPCServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DepartmentRPCServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DepartmentRPCServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDepartmentRPCServiceProcessor(handler DepartmentRPCService) *DepartmentRPCServiceProcessor {
	self := &DepartmentRPCServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("AppendDepartment", &departmentRPCServiceProcessorAppendDepartment{handler: handler})
	self.AddToProcessorMap("UpdateDepartment", &departmentRPCServiceProcessorUpdateDepartment{handler: handler})
	self.AddToProcessorMap("DeleteDepartment", &departmentRPCServiceProcessorDeleteDepartment{handler: handler})
	self.AddToProcessorMap("GetsDepartment", &departmentRPCServiceProcessorGetsDepartment{handler: handler})
	self.AddToProcessorMap("AppendCity", &departmentRPCServiceProcessorAppendCity{handler: handler})
	self.AddToProcessorMap("DeleteCity", &departmentRPCServiceProcessorDeleteCity{handler: handler})
	self.AddToProcessorMap("GetsCity", &departmentRPCServiceProcessorGetsCity{handler: handler})
	self.AddToProcessorMap("GetsCityByDepartment", &departmentRPCServiceProcessorGetsCityByDepartment{handler: handler})
	self.AddToProcessorMap("GetDepartmentInfosById", &departmentRPCServiceProcessorGetDepartmentInfosById{handler: handler})
	self.AddToProcessorMap("GetCityInfoById", &departmentRPCServiceProcessorGetCityInfoById{handler: handler})
	self.AddToProcessorMap("GetDepartmentCityInfoById", &departmentRPCServiceProcessorGetDepartmentCityInfoById{handler: handler})
	return self
}
func (p *DepartmentRPCServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type departmentRPCServiceProcessorAppendDepartment struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorAppendDepartment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceAppendDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AppendDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceAppendDepartmentResult{}
	var retval *AppendDepartmentRPCResponse
	if retval, err2 = p.handler.AppendDepartment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AppendDepartment: "+err2.Error())
		oprot.WriteMessageBegin("AppendDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AppendDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentRPCServiceProcessorUpdateDepartment struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorUpdateDepartment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceUpdateDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceUpdateDepartmentResult{}
	var retval *UpdateDepartmentRPCResponse
	if retval, err2 = p.handler.UpdateDepartment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateDepartment: "+err2.Error())
		oprot.WriteMessageBegin("UpdateDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentRPCServiceProcessorDeleteDepartment struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorDeleteDepartment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceDeleteDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceDeleteDepartmentResult{}
	var retval *DeleteDepartmentRPCResponse
	if retval, err2 = p.handler.DeleteDepartment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteDepartment: "+err2.Error())
		oprot.WriteMessageBegin("DeleteDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentRPCServiceProcessorGetsDepartment struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorGetsDepartment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceGetsDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetsDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceGetsDepartmentResult{}
	var retval *GetsDepartmentRPCResponse
	if retval, err2 = p.handler.GetsDepartment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetsDepartment: "+err2.Error())
		oprot.WriteMessageBegin("GetsDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetsDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentRPCServiceProcessorAppendCity struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorAppendCity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceAppendCityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AppendCity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceAppendCityResult{}
	var retval *AppendCityRPCResponse
	if retval, err2 = p.handler.AppendCity(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AppendCity: "+err2.Error())
		oprot.WriteMessageBegin("AppendCity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AppendCity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentRPCServiceProcessorDeleteCity struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorDeleteCity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceDeleteCityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteCity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceDeleteCityResult{}
	var retval *DeleteCityRPCResponse
	if retval, err2 = p.handler.DeleteCity(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteCity: "+err2.Error())
		oprot.WriteMessageBegin("DeleteCity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteCity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentRPCServiceProcessorGetsCity struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorGetsCity) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceGetsCityArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetsCity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceGetsCityResult{}
	var retval *GetsCityRPCResponse
	if retval, err2 = p.handler.GetsCity(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetsCity: "+err2.Error())
		oprot.WriteMessageBegin("GetsCity", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetsCity", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentRPCServiceProcessorGetsCityByDepartment struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorGetsCityByDepartment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceGetsCityByDepartmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetsCityByDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceGetsCityByDepartmentResult{}
	var retval *GetsCityByDepartmentRPCResponse
	if retval, err2 = p.handler.GetsCityByDepartment(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetsCityByDepartment: "+err2.Error())
		oprot.WriteMessageBegin("GetsCityByDepartment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetsCityByDepartment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentRPCServiceProcessorGetDepartmentInfosById struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorGetDepartmentInfosById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceGetDepartmentInfosByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDepartmentInfosById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceGetDepartmentInfosByIdResult{}
	var retval *GetDepartmentInfosByIdRPCResponse
	if retval, err2 = p.handler.GetDepartmentInfosById(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDepartmentInfosById: "+err2.Error())
		oprot.WriteMessageBegin("GetDepartmentInfosById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDepartmentInfosById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentRPCServiceProcessorGetCityInfoById struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorGetCityInfoById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceGetCityInfoByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCityInfoById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceGetCityInfoByIdResult{}
	var retval *GetCityInfoByIdRPCResponse
	if retval, err2 = p.handler.GetCityInfoById(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCityInfoById: "+err2.Error())
		oprot.WriteMessageBegin("GetCityInfoById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCityInfoById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type departmentRPCServiceProcessorGetDepartmentCityInfoById struct {
	handler DepartmentRPCService
}

func (p *departmentRPCServiceProcessorGetDepartmentCityInfoById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DepartmentRPCServiceGetDepartmentCityInfoByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDepartmentCityInfoById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := DepartmentRPCServiceGetDepartmentCityInfoByIdResult{}
	var retval *GetDepartmentCityInfoByIdRPCResponse
	if retval, err2 = p.handler.GetDepartmentCityInfoById(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDepartmentCityInfoById: "+err2.Error())
		oprot.WriteMessageBegin("GetDepartmentCityInfoById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDepartmentCityInfoById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type DepartmentRPCServiceAppendDepartmentArgs struct {
	Request *AppendDepartmentRPCRequest `thrift:"request,1" frugal:"1,default,AppendDepartmentRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceAppendDepartmentArgs() *DepartmentRPCServiceAppendDepartmentArgs {
	return &DepartmentRPCServiceAppendDepartmentArgs{}
}

func (p *DepartmentRPCServiceAppendDepartmentArgs) InitDefault() {
	*p = DepartmentRPCServiceAppendDepartmentArgs{}
}

var DepartmentRPCServiceAppendDepartmentArgs_Request_DEFAULT *AppendDepartmentRPCRequest

func (p *DepartmentRPCServiceAppendDepartmentArgs) GetRequest() (v *AppendDepartmentRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceAppendDepartmentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceAppendDepartmentArgs) SetRequest(val *AppendDepartmentRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceAppendDepartmentArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceAppendDepartmentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceAppendDepartmentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceAppendDepartmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewAppendDepartmentRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceAppendDepartmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendDepartment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceAppendDepartmentArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceAppendDepartmentArgs) DeepEqual(ano *DepartmentRPCServiceAppendDepartmentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceAppendDepartmentArgs) Field1DeepEqual(src *AppendDepartmentRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceAppendDepartmentResult struct {
	Success *AppendDepartmentRPCResponse `thrift:"success,0,optional" frugal:"0,optional,AppendDepartmentRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceAppendDepartmentResult() *DepartmentRPCServiceAppendDepartmentResult {
	return &DepartmentRPCServiceAppendDepartmentResult{}
}

func (p *DepartmentRPCServiceAppendDepartmentResult) InitDefault() {
	*p = DepartmentRPCServiceAppendDepartmentResult{}
}

var DepartmentRPCServiceAppendDepartmentResult_Success_DEFAULT *AppendDepartmentRPCResponse

func (p *DepartmentRPCServiceAppendDepartmentResult) GetSuccess() (v *AppendDepartmentRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceAppendDepartmentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceAppendDepartmentResult) SetSuccess(x interface{}) {
	p.Success = x.(*AppendDepartmentRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceAppendDepartmentResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceAppendDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceAppendDepartmentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceAppendDepartmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAppendDepartmentRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceAppendDepartmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendDepartment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceAppendDepartmentResult(%+v)", *p)
}

func (p *DepartmentRPCServiceAppendDepartmentResult) DeepEqual(ano *DepartmentRPCServiceAppendDepartmentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceAppendDepartmentResult) Field0DeepEqual(src *AppendDepartmentRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceUpdateDepartmentArgs struct {
	Request *UpdateDepartmentRPCRequest `thrift:"request,1" frugal:"1,default,UpdateDepartmentRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceUpdateDepartmentArgs() *DepartmentRPCServiceUpdateDepartmentArgs {
	return &DepartmentRPCServiceUpdateDepartmentArgs{}
}

func (p *DepartmentRPCServiceUpdateDepartmentArgs) InitDefault() {
	*p = DepartmentRPCServiceUpdateDepartmentArgs{}
}

var DepartmentRPCServiceUpdateDepartmentArgs_Request_DEFAULT *UpdateDepartmentRPCRequest

func (p *DepartmentRPCServiceUpdateDepartmentArgs) GetRequest() (v *UpdateDepartmentRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceUpdateDepartmentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceUpdateDepartmentArgs) SetRequest(val *UpdateDepartmentRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceUpdateDepartmentArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceUpdateDepartmentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceUpdateDepartmentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceUpdateDepartmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceUpdateDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewUpdateDepartmentRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceUpdateDepartmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDepartment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceUpdateDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceUpdateDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceUpdateDepartmentArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceUpdateDepartmentArgs) DeepEqual(ano *DepartmentRPCServiceUpdateDepartmentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceUpdateDepartmentArgs) Field1DeepEqual(src *UpdateDepartmentRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceUpdateDepartmentResult struct {
	Success *UpdateDepartmentRPCResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateDepartmentRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceUpdateDepartmentResult() *DepartmentRPCServiceUpdateDepartmentResult {
	return &DepartmentRPCServiceUpdateDepartmentResult{}
}

func (p *DepartmentRPCServiceUpdateDepartmentResult) InitDefault() {
	*p = DepartmentRPCServiceUpdateDepartmentResult{}
}

var DepartmentRPCServiceUpdateDepartmentResult_Success_DEFAULT *UpdateDepartmentRPCResponse

func (p *DepartmentRPCServiceUpdateDepartmentResult) GetSuccess() (v *UpdateDepartmentRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceUpdateDepartmentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceUpdateDepartmentResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateDepartmentRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceUpdateDepartmentResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceUpdateDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceUpdateDepartmentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceUpdateDepartmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceUpdateDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdateDepartmentRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceUpdateDepartmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateDepartment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceUpdateDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceUpdateDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceUpdateDepartmentResult(%+v)", *p)
}

func (p *DepartmentRPCServiceUpdateDepartmentResult) DeepEqual(ano *DepartmentRPCServiceUpdateDepartmentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceUpdateDepartmentResult) Field0DeepEqual(src *UpdateDepartmentRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceDeleteDepartmentArgs struct {
	Request *DeleteDepartmentRPCRequest `thrift:"request,1" frugal:"1,default,DeleteDepartmentRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceDeleteDepartmentArgs() *DepartmentRPCServiceDeleteDepartmentArgs {
	return &DepartmentRPCServiceDeleteDepartmentArgs{}
}

func (p *DepartmentRPCServiceDeleteDepartmentArgs) InitDefault() {
	*p = DepartmentRPCServiceDeleteDepartmentArgs{}
}

var DepartmentRPCServiceDeleteDepartmentArgs_Request_DEFAULT *DeleteDepartmentRPCRequest

func (p *DepartmentRPCServiceDeleteDepartmentArgs) GetRequest() (v *DeleteDepartmentRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceDeleteDepartmentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceDeleteDepartmentArgs) SetRequest(val *DeleteDepartmentRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceDeleteDepartmentArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceDeleteDepartmentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceDeleteDepartmentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceDeleteDepartmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewDeleteDepartmentRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceDeleteDepartmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDepartment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceDeleteDepartmentArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceDeleteDepartmentArgs) DeepEqual(ano *DepartmentRPCServiceDeleteDepartmentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceDeleteDepartmentArgs) Field1DeepEqual(src *DeleteDepartmentRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceDeleteDepartmentResult struct {
	Success *DeleteDepartmentRPCResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteDepartmentRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceDeleteDepartmentResult() *DepartmentRPCServiceDeleteDepartmentResult {
	return &DepartmentRPCServiceDeleteDepartmentResult{}
}

func (p *DepartmentRPCServiceDeleteDepartmentResult) InitDefault() {
	*p = DepartmentRPCServiceDeleteDepartmentResult{}
}

var DepartmentRPCServiceDeleteDepartmentResult_Success_DEFAULT *DeleteDepartmentRPCResponse

func (p *DepartmentRPCServiceDeleteDepartmentResult) GetSuccess() (v *DeleteDepartmentRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceDeleteDepartmentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceDeleteDepartmentResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteDepartmentRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceDeleteDepartmentResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceDeleteDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceDeleteDepartmentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceDeleteDepartmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeleteDepartmentRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceDeleteDepartmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteDepartment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceDeleteDepartmentResult(%+v)", *p)
}

func (p *DepartmentRPCServiceDeleteDepartmentResult) DeepEqual(ano *DepartmentRPCServiceDeleteDepartmentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceDeleteDepartmentResult) Field0DeepEqual(src *DeleteDepartmentRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetsDepartmentArgs struct {
	Request *GetsDepartmentRPCRequest `thrift:"request,1" frugal:"1,default,GetsDepartmentRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceGetsDepartmentArgs() *DepartmentRPCServiceGetsDepartmentArgs {
	return &DepartmentRPCServiceGetsDepartmentArgs{}
}

func (p *DepartmentRPCServiceGetsDepartmentArgs) InitDefault() {
	*p = DepartmentRPCServiceGetsDepartmentArgs{}
}

var DepartmentRPCServiceGetsDepartmentArgs_Request_DEFAULT *GetsDepartmentRPCRequest

func (p *DepartmentRPCServiceGetsDepartmentArgs) GetRequest() (v *GetsDepartmentRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceGetsDepartmentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceGetsDepartmentArgs) SetRequest(val *GetsDepartmentRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceGetsDepartmentArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceGetsDepartmentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceGetsDepartmentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetsDepartmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetsDepartmentRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetsDepartmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsDepartment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetsDepartmentArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceGetsDepartmentArgs) DeepEqual(ano *DepartmentRPCServiceGetsDepartmentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetsDepartmentArgs) Field1DeepEqual(src *GetsDepartmentRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetsDepartmentResult struct {
	Success *GetsDepartmentRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetsDepartmentRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceGetsDepartmentResult() *DepartmentRPCServiceGetsDepartmentResult {
	return &DepartmentRPCServiceGetsDepartmentResult{}
}

func (p *DepartmentRPCServiceGetsDepartmentResult) InitDefault() {
	*p = DepartmentRPCServiceGetsDepartmentResult{}
}

var DepartmentRPCServiceGetsDepartmentResult_Success_DEFAULT *GetsDepartmentRPCResponse

func (p *DepartmentRPCServiceGetsDepartmentResult) GetSuccess() (v *GetsDepartmentRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceGetsDepartmentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceGetsDepartmentResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetsDepartmentRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceGetsDepartmentResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceGetsDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceGetsDepartmentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetsDepartmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetsDepartmentRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetsDepartmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsDepartment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetsDepartmentResult(%+v)", *p)
}

func (p *DepartmentRPCServiceGetsDepartmentResult) DeepEqual(ano *DepartmentRPCServiceGetsDepartmentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetsDepartmentResult) Field0DeepEqual(src *GetsDepartmentRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceAppendCityArgs struct {
	Request *AppendCityRPCRequest `thrift:"request,1" frugal:"1,default,AppendCityRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceAppendCityArgs() *DepartmentRPCServiceAppendCityArgs {
	return &DepartmentRPCServiceAppendCityArgs{}
}

func (p *DepartmentRPCServiceAppendCityArgs) InitDefault() {
	*p = DepartmentRPCServiceAppendCityArgs{}
}

var DepartmentRPCServiceAppendCityArgs_Request_DEFAULT *AppendCityRPCRequest

func (p *DepartmentRPCServiceAppendCityArgs) GetRequest() (v *AppendCityRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceAppendCityArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceAppendCityArgs) SetRequest(val *AppendCityRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceAppendCityArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceAppendCityArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceAppendCityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceAppendCityArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendCityArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewAppendCityRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceAppendCityArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendCity_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendCityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendCityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceAppendCityArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceAppendCityArgs) DeepEqual(ano *DepartmentRPCServiceAppendCityArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceAppendCityArgs) Field1DeepEqual(src *AppendCityRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceAppendCityResult struct {
	Success *AppendCityRPCResponse `thrift:"success,0,optional" frugal:"0,optional,AppendCityRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceAppendCityResult() *DepartmentRPCServiceAppendCityResult {
	return &DepartmentRPCServiceAppendCityResult{}
}

func (p *DepartmentRPCServiceAppendCityResult) InitDefault() {
	*p = DepartmentRPCServiceAppendCityResult{}
}

var DepartmentRPCServiceAppendCityResult_Success_DEFAULT *AppendCityRPCResponse

func (p *DepartmentRPCServiceAppendCityResult) GetSuccess() (v *AppendCityRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceAppendCityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceAppendCityResult) SetSuccess(x interface{}) {
	p.Success = x.(*AppendCityRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceAppendCityResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceAppendCityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceAppendCityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceAppendCityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendCityResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAppendCityRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceAppendCityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendCity_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendCityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceAppendCityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceAppendCityResult(%+v)", *p)
}

func (p *DepartmentRPCServiceAppendCityResult) DeepEqual(ano *DepartmentRPCServiceAppendCityResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceAppendCityResult) Field0DeepEqual(src *AppendCityRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceDeleteCityArgs struct {
	Request *DeleteCityRPCRequest `thrift:"request,1" frugal:"1,default,DeleteCityRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceDeleteCityArgs() *DepartmentRPCServiceDeleteCityArgs {
	return &DepartmentRPCServiceDeleteCityArgs{}
}

func (p *DepartmentRPCServiceDeleteCityArgs) InitDefault() {
	*p = DepartmentRPCServiceDeleteCityArgs{}
}

var DepartmentRPCServiceDeleteCityArgs_Request_DEFAULT *DeleteCityRPCRequest

func (p *DepartmentRPCServiceDeleteCityArgs) GetRequest() (v *DeleteCityRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceDeleteCityArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceDeleteCityArgs) SetRequest(val *DeleteCityRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceDeleteCityArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceDeleteCityArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceDeleteCityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceDeleteCityArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteCityArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewDeleteCityRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceDeleteCityArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCity_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteCityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteCityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceDeleteCityArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceDeleteCityArgs) DeepEqual(ano *DepartmentRPCServiceDeleteCityArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceDeleteCityArgs) Field1DeepEqual(src *DeleteCityRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceDeleteCityResult struct {
	Success *DeleteCityRPCResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteCityRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceDeleteCityResult() *DepartmentRPCServiceDeleteCityResult {
	return &DepartmentRPCServiceDeleteCityResult{}
}

func (p *DepartmentRPCServiceDeleteCityResult) InitDefault() {
	*p = DepartmentRPCServiceDeleteCityResult{}
}

var DepartmentRPCServiceDeleteCityResult_Success_DEFAULT *DeleteCityRPCResponse

func (p *DepartmentRPCServiceDeleteCityResult) GetSuccess() (v *DeleteCityRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceDeleteCityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceDeleteCityResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteCityRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceDeleteCityResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceDeleteCityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceDeleteCityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceDeleteCityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteCityResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeleteCityRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceDeleteCityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteCity_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteCityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceDeleteCityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceDeleteCityResult(%+v)", *p)
}

func (p *DepartmentRPCServiceDeleteCityResult) DeepEqual(ano *DepartmentRPCServiceDeleteCityResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceDeleteCityResult) Field0DeepEqual(src *DeleteCityRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetsCityArgs struct {
	Request *GetsCityRPCRequest `thrift:"request,1" frugal:"1,default,GetsCityRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceGetsCityArgs() *DepartmentRPCServiceGetsCityArgs {
	return &DepartmentRPCServiceGetsCityArgs{}
}

func (p *DepartmentRPCServiceGetsCityArgs) InitDefault() {
	*p = DepartmentRPCServiceGetsCityArgs{}
}

var DepartmentRPCServiceGetsCityArgs_Request_DEFAULT *GetsCityRPCRequest

func (p *DepartmentRPCServiceGetsCityArgs) GetRequest() (v *GetsCityRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceGetsCityArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceGetsCityArgs) SetRequest(val *GetsCityRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceGetsCityArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceGetsCityArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceGetsCityArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetsCityArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetsCityRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetsCityArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsCity_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetsCityArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceGetsCityArgs) DeepEqual(ano *DepartmentRPCServiceGetsCityArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetsCityArgs) Field1DeepEqual(src *GetsCityRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetsCityResult struct {
	Success *GetsCityRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetsCityRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceGetsCityResult() *DepartmentRPCServiceGetsCityResult {
	return &DepartmentRPCServiceGetsCityResult{}
}

func (p *DepartmentRPCServiceGetsCityResult) InitDefault() {
	*p = DepartmentRPCServiceGetsCityResult{}
}

var DepartmentRPCServiceGetsCityResult_Success_DEFAULT *GetsCityRPCResponse

func (p *DepartmentRPCServiceGetsCityResult) GetSuccess() (v *GetsCityRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceGetsCityResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceGetsCityResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetsCityRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceGetsCityResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceGetsCityResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceGetsCityResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetsCityResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetsCityRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetsCityResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsCity_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetsCityResult(%+v)", *p)
}

func (p *DepartmentRPCServiceGetsCityResult) DeepEqual(ano *DepartmentRPCServiceGetsCityResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetsCityResult) Field0DeepEqual(src *GetsCityRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetsCityByDepartmentArgs struct {
	Request *GetsCityByDepartmentRPCRequest `thrift:"request,1" frugal:"1,default,GetsCityByDepartmentRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceGetsCityByDepartmentArgs() *DepartmentRPCServiceGetsCityByDepartmentArgs {
	return &DepartmentRPCServiceGetsCityByDepartmentArgs{}
}

func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) InitDefault() {
	*p = DepartmentRPCServiceGetsCityByDepartmentArgs{}
}

var DepartmentRPCServiceGetsCityByDepartmentArgs_Request_DEFAULT *GetsCityByDepartmentRPCRequest

func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) GetRequest() (v *GetsCityByDepartmentRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceGetsCityByDepartmentArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) SetRequest(val *GetsCityByDepartmentRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceGetsCityByDepartmentArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetsCityByDepartmentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetsCityByDepartmentRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsCityByDepartment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetsCityByDepartmentArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) DeepEqual(ano *DepartmentRPCServiceGetsCityByDepartmentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetsCityByDepartmentArgs) Field1DeepEqual(src *GetsCityByDepartmentRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetsCityByDepartmentResult struct {
	Success *GetsCityByDepartmentRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetsCityByDepartmentRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceGetsCityByDepartmentResult() *DepartmentRPCServiceGetsCityByDepartmentResult {
	return &DepartmentRPCServiceGetsCityByDepartmentResult{}
}

func (p *DepartmentRPCServiceGetsCityByDepartmentResult) InitDefault() {
	*p = DepartmentRPCServiceGetsCityByDepartmentResult{}
}

var DepartmentRPCServiceGetsCityByDepartmentResult_Success_DEFAULT *GetsCityByDepartmentRPCResponse

func (p *DepartmentRPCServiceGetsCityByDepartmentResult) GetSuccess() (v *GetsCityByDepartmentRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceGetsCityByDepartmentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceGetsCityByDepartmentResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetsCityByDepartmentRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceGetsCityByDepartmentResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceGetsCityByDepartmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceGetsCityByDepartmentResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetsCityByDepartmentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityByDepartmentResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetsCityByDepartmentRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetsCityByDepartmentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsCityByDepartment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityByDepartmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetsCityByDepartmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetsCityByDepartmentResult(%+v)", *p)
}

func (p *DepartmentRPCServiceGetsCityByDepartmentResult) DeepEqual(ano *DepartmentRPCServiceGetsCityByDepartmentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetsCityByDepartmentResult) Field0DeepEqual(src *GetsCityByDepartmentRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetDepartmentInfosByIdArgs struct {
	Request *GetDepartmentInfosByIdRPCRequest `thrift:"request,1" frugal:"1,default,GetDepartmentInfosByIdRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceGetDepartmentInfosByIdArgs() *DepartmentRPCServiceGetDepartmentInfosByIdArgs {
	return &DepartmentRPCServiceGetDepartmentInfosByIdArgs{}
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) InitDefault() {
	*p = DepartmentRPCServiceGetDepartmentInfosByIdArgs{}
}

var DepartmentRPCServiceGetDepartmentInfosByIdArgs_Request_DEFAULT *GetDepartmentInfosByIdRPCRequest

func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) GetRequest() (v *GetDepartmentInfosByIdRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceGetDepartmentInfosByIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) SetRequest(val *GetDepartmentInfosByIdRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceGetDepartmentInfosByIdArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetDepartmentInfosByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetDepartmentInfosByIdRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartmentInfosById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetDepartmentInfosByIdArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) DeepEqual(ano *DepartmentRPCServiceGetDepartmentInfosByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdArgs) Field1DeepEqual(src *GetDepartmentInfosByIdRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetDepartmentInfosByIdResult struct {
	Success *GetDepartmentInfosByIdRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetDepartmentInfosByIdRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceGetDepartmentInfosByIdResult() *DepartmentRPCServiceGetDepartmentInfosByIdResult {
	return &DepartmentRPCServiceGetDepartmentInfosByIdResult{}
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) InitDefault() {
	*p = DepartmentRPCServiceGetDepartmentInfosByIdResult{}
}

var DepartmentRPCServiceGetDepartmentInfosByIdResult_Success_DEFAULT *GetDepartmentInfosByIdRPCResponse

func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) GetSuccess() (v *GetDepartmentInfosByIdRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceGetDepartmentInfosByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDepartmentInfosByIdRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceGetDepartmentInfosByIdResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetDepartmentInfosByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetDepartmentInfosByIdRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartmentInfosById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetDepartmentInfosByIdResult(%+v)", *p)
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) DeepEqual(ano *DepartmentRPCServiceGetDepartmentInfosByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetDepartmentInfosByIdResult) Field0DeepEqual(src *GetDepartmentInfosByIdRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetCityInfoByIdArgs struct {
	Request *GetCityInfoByIdRPCRequest `thrift:"request,1" frugal:"1,default,GetCityInfoByIdRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceGetCityInfoByIdArgs() *DepartmentRPCServiceGetCityInfoByIdArgs {
	return &DepartmentRPCServiceGetCityInfoByIdArgs{}
}

func (p *DepartmentRPCServiceGetCityInfoByIdArgs) InitDefault() {
	*p = DepartmentRPCServiceGetCityInfoByIdArgs{}
}

var DepartmentRPCServiceGetCityInfoByIdArgs_Request_DEFAULT *GetCityInfoByIdRPCRequest

func (p *DepartmentRPCServiceGetCityInfoByIdArgs) GetRequest() (v *GetCityInfoByIdRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceGetCityInfoByIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceGetCityInfoByIdArgs) SetRequest(val *GetCityInfoByIdRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceGetCityInfoByIdArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceGetCityInfoByIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceGetCityInfoByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetCityInfoByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetCityInfoByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetCityInfoByIdRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetCityInfoByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCityInfoById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetCityInfoByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetCityInfoByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetCityInfoByIdArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceGetCityInfoByIdArgs) DeepEqual(ano *DepartmentRPCServiceGetCityInfoByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetCityInfoByIdArgs) Field1DeepEqual(src *GetCityInfoByIdRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetCityInfoByIdResult struct {
	Success *GetCityInfoByIdRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetCityInfoByIdRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceGetCityInfoByIdResult() *DepartmentRPCServiceGetCityInfoByIdResult {
	return &DepartmentRPCServiceGetCityInfoByIdResult{}
}

func (p *DepartmentRPCServiceGetCityInfoByIdResult) InitDefault() {
	*p = DepartmentRPCServiceGetCityInfoByIdResult{}
}

var DepartmentRPCServiceGetCityInfoByIdResult_Success_DEFAULT *GetCityInfoByIdRPCResponse

func (p *DepartmentRPCServiceGetCityInfoByIdResult) GetSuccess() (v *GetCityInfoByIdRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceGetCityInfoByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceGetCityInfoByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCityInfoByIdRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceGetCityInfoByIdResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceGetCityInfoByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceGetCityInfoByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetCityInfoByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetCityInfoByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetCityInfoByIdRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetCityInfoByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCityInfoById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetCityInfoByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetCityInfoByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetCityInfoByIdResult(%+v)", *p)
}

func (p *DepartmentRPCServiceGetCityInfoByIdResult) DeepEqual(ano *DepartmentRPCServiceGetCityInfoByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetCityInfoByIdResult) Field0DeepEqual(src *GetCityInfoByIdRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetDepartmentCityInfoByIdArgs struct {
	Request *GetDepartmentCityInfoByIdRPCRequest `thrift:"request,1" frugal:"1,default,GetDepartmentCityInfoByIdRPCRequest" json:"request"`
}

func NewDepartmentRPCServiceGetDepartmentCityInfoByIdArgs() *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs {
	return &DepartmentRPCServiceGetDepartmentCityInfoByIdArgs{}
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) InitDefault() {
	*p = DepartmentRPCServiceGetDepartmentCityInfoByIdArgs{}
}

var DepartmentRPCServiceGetDepartmentCityInfoByIdArgs_Request_DEFAULT *GetDepartmentCityInfoByIdRPCRequest

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) GetRequest() (v *GetDepartmentCityInfoByIdRPCRequest) {
	if !p.IsSetRequest() {
		return DepartmentRPCServiceGetDepartmentCityInfoByIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) SetRequest(val *GetDepartmentCityInfoByIdRPCRequest) {
	p.Request = val
}

var fieldIDToName_DepartmentRPCServiceGetDepartmentCityInfoByIdArgs = map[int16]string{
	1: "request",
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetDepartmentCityInfoByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetDepartmentCityInfoByIdRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartmentCityInfoById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetDepartmentCityInfoByIdArgs(%+v)", *p)
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) DeepEqual(ano *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdArgs) Field1DeepEqual(src *GetDepartmentCityInfoByIdRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type DepartmentRPCServiceGetDepartmentCityInfoByIdResult struct {
	Success *GetDepartmentCityInfoByIdRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetDepartmentCityInfoByIdRPCResponse" json:"success,omitempty"`
}

func NewDepartmentRPCServiceGetDepartmentCityInfoByIdResult() *DepartmentRPCServiceGetDepartmentCityInfoByIdResult {
	return &DepartmentRPCServiceGetDepartmentCityInfoByIdResult{}
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) InitDefault() {
	*p = DepartmentRPCServiceGetDepartmentCityInfoByIdResult{}
}

var DepartmentRPCServiceGetDepartmentCityInfoByIdResult_Success_DEFAULT *GetDepartmentCityInfoByIdRPCResponse

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) GetSuccess() (v *GetDepartmentCityInfoByIdRPCResponse) {
	if !p.IsSetSuccess() {
		return DepartmentRPCServiceGetDepartmentCityInfoByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDepartmentCityInfoByIdRPCResponse)
}

var fieldIDToName_DepartmentRPCServiceGetDepartmentCityInfoByIdResult = map[int16]string{
	0: "success",
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentRPCServiceGetDepartmentCityInfoByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetDepartmentCityInfoByIdRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDepartmentCityInfoById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentRPCServiceGetDepartmentCityInfoByIdResult(%+v)", *p)
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) DeepEqual(ano *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *DepartmentRPCServiceGetDepartmentCityInfoByIdResult) Field0DeepEqual(src *GetDepartmentCityInfoByIdRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
