// Code generated by Kitex v0.5.2. DO NOT EDIT.

package departmentrpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	department "resume-resolving/api/idl/service/department/kitex_gen/department"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AppendDepartment(ctx context.Context, request *department.AppendDepartmentRPCRequest, callOptions ...callopt.Option) (r *department.AppendDepartmentRPCResponse, err error)
	UpdateDepartment(ctx context.Context, request *department.UpdateDepartmentRPCRequest, callOptions ...callopt.Option) (r *department.UpdateDepartmentRPCResponse, err error)
	DeleteDepartment(ctx context.Context, request *department.DeleteDepartmentRPCRequest, callOptions ...callopt.Option) (r *department.DeleteDepartmentRPCResponse, err error)
	GetsDepartment(ctx context.Context, request *department.GetsDepartmentRPCRequest, callOptions ...callopt.Option) (r *department.GetsDepartmentRPCResponse, err error)
	AppendCity(ctx context.Context, request *department.AppendCityRPCRequest, callOptions ...callopt.Option) (r *department.AppendCityRPCResponse, err error)
	DeleteCity(ctx context.Context, request *department.DeleteCityRPCRequest, callOptions ...callopt.Option) (r *department.DeleteCityRPCResponse, err error)
	GetsCity(ctx context.Context, request *department.GetsCityRPCRequest, callOptions ...callopt.Option) (r *department.GetsCityRPCResponse, err error)
	GetsCityByDepartment(ctx context.Context, request *department.GetsCityByDepartmentRPCRequest, callOptions ...callopt.Option) (r *department.GetsCityByDepartmentRPCResponse, err error)
	GetDepartmentInfosById(ctx context.Context, request *department.GetDepartmentInfosByIdRPCRequest, callOptions ...callopt.Option) (r *department.GetDepartmentInfosByIdRPCResponse, err error)
	GetCityInfoById(ctx context.Context, request *department.GetCityInfoByIdRPCRequest, callOptions ...callopt.Option) (r *department.GetCityInfoByIdRPCResponse, err error)
	GetDepartmentCityInfoById(ctx context.Context, request *department.GetDepartmentCityInfoByIdRPCRequest, callOptions ...callopt.Option) (r *department.GetDepartmentCityInfoByIdRPCResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kDepartmentRPCServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kDepartmentRPCServiceClient struct {
	*kClient
}

func (p *kDepartmentRPCServiceClient) AppendDepartment(ctx context.Context, request *department.AppendDepartmentRPCRequest, callOptions ...callopt.Option) (r *department.AppendDepartmentRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AppendDepartment(ctx, request)
}

func (p *kDepartmentRPCServiceClient) UpdateDepartment(ctx context.Context, request *department.UpdateDepartmentRPCRequest, callOptions ...callopt.Option) (r *department.UpdateDepartmentRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateDepartment(ctx, request)
}

func (p *kDepartmentRPCServiceClient) DeleteDepartment(ctx context.Context, request *department.DeleteDepartmentRPCRequest, callOptions ...callopt.Option) (r *department.DeleteDepartmentRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteDepartment(ctx, request)
}

func (p *kDepartmentRPCServiceClient) GetsDepartment(ctx context.Context, request *department.GetsDepartmentRPCRequest, callOptions ...callopt.Option) (r *department.GetsDepartmentRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetsDepartment(ctx, request)
}

func (p *kDepartmentRPCServiceClient) AppendCity(ctx context.Context, request *department.AppendCityRPCRequest, callOptions ...callopt.Option) (r *department.AppendCityRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AppendCity(ctx, request)
}

func (p *kDepartmentRPCServiceClient) DeleteCity(ctx context.Context, request *department.DeleteCityRPCRequest, callOptions ...callopt.Option) (r *department.DeleteCityRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteCity(ctx, request)
}

func (p *kDepartmentRPCServiceClient) GetsCity(ctx context.Context, request *department.GetsCityRPCRequest, callOptions ...callopt.Option) (r *department.GetsCityRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetsCity(ctx, request)
}

func (p *kDepartmentRPCServiceClient) GetsCityByDepartment(ctx context.Context, request *department.GetsCityByDepartmentRPCRequest, callOptions ...callopt.Option) (r *department.GetsCityByDepartmentRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetsCityByDepartment(ctx, request)
}

func (p *kDepartmentRPCServiceClient) GetDepartmentInfosById(ctx context.Context, request *department.GetDepartmentInfosByIdRPCRequest, callOptions ...callopt.Option) (r *department.GetDepartmentInfosByIdRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDepartmentInfosById(ctx, request)
}

func (p *kDepartmentRPCServiceClient) GetCityInfoById(ctx context.Context, request *department.GetCityInfoByIdRPCRequest, callOptions ...callopt.Option) (r *department.GetCityInfoByIdRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCityInfoById(ctx, request)
}

func (p *kDepartmentRPCServiceClient) GetDepartmentCityInfoById(ctx context.Context, request *department.GetDepartmentCityInfoByIdRPCRequest, callOptions ...callopt.Option) (r *department.GetDepartmentCityInfoByIdRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDepartmentCityInfoById(ctx, request)
}
