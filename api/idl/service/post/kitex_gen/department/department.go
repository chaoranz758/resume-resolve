// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package department

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type DepartmentInformation struct {
	DepartmentId          int64  `thrift:"department_id,1" frugal:"1,default,i64" json:"department_id"`
	DepartmentName        string `thrift:"department_name,2" frugal:"2,default,string" json:"department_name"`
	DepartmentDescription string `thrift:"department_description,3" frugal:"3,default,string" json:"department_description"`
}

func NewDepartmentInformation() *DepartmentInformation {
	return &DepartmentInformation{}
}

func (p *DepartmentInformation) InitDefault() {
	*p = DepartmentInformation{}
}

func (p *DepartmentInformation) GetDepartmentId() (v int64) {
	return p.DepartmentId
}

func (p *DepartmentInformation) GetDepartmentName() (v string) {
	return p.DepartmentName
}

func (p *DepartmentInformation) GetDepartmentDescription() (v string) {
	return p.DepartmentDescription
}
func (p *DepartmentInformation) SetDepartmentId(val int64) {
	p.DepartmentId = val
}
func (p *DepartmentInformation) SetDepartmentName(val string) {
	p.DepartmentName = val
}
func (p *DepartmentInformation) SetDepartmentDescription(val string) {
	p.DepartmentDescription = val
}

var fieldIDToName_DepartmentInformation = map[int16]string{
	1: "department_id",
	2: "department_name",
	3: "department_description",
}

func (p *DepartmentInformation) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DepartmentInformation[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DepartmentInformation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.DepartmentId = v
	}
	return nil
}

func (p *DepartmentInformation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DepartmentName = v
	}
	return nil
}

func (p *DepartmentInformation) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.DepartmentDescription = v
	}
	return nil
}

func (p *DepartmentInformation) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DepartmentInformation"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DepartmentInformation) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DepartmentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DepartmentInformation) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DepartmentName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DepartmentInformation) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_description", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DepartmentDescription); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DepartmentInformation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DepartmentInformation(%+v)", *p)
}

func (p *DepartmentInformation) DeepEqual(ano *DepartmentInformation) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DepartmentId) {
		return false
	}
	if !p.Field2DeepEqual(ano.DepartmentName) {
		return false
	}
	if !p.Field3DeepEqual(ano.DepartmentDescription) {
		return false
	}
	return true
}

func (p *DepartmentInformation) Field1DeepEqual(src int64) bool {

	if p.DepartmentId != src {
		return false
	}
	return true
}
func (p *DepartmentInformation) Field2DeepEqual(src string) bool {

	if strings.Compare(p.DepartmentName, src) != 0 {
		return false
	}
	return true
}
func (p *DepartmentInformation) Field3DeepEqual(src string) bool {

	if strings.Compare(p.DepartmentDescription, src) != 0 {
		return false
	}
	return true
}

type CityInformation struct {
	CityId   int64  `thrift:"city_id,1" frugal:"1,default,i64" json:"city_id"`
	CityName string `thrift:"city_name,2" frugal:"2,default,string" json:"city_name"`
}

func NewCityInformation() *CityInformation {
	return &CityInformation{}
}

func (p *CityInformation) InitDefault() {
	*p = CityInformation{}
}

func (p *CityInformation) GetCityId() (v int64) {
	return p.CityId
}

func (p *CityInformation) GetCityName() (v string) {
	return p.CityName
}
func (p *CityInformation) SetCityId(val int64) {
	p.CityId = val
}
func (p *CityInformation) SetCityName(val string) {
	p.CityName = val
}

var fieldIDToName_CityInformation = map[int16]string{
	1: "city_id",
	2: "city_name",
}

func (p *CityInformation) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CityInformation[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CityInformation) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CityId = v
	}
	return nil
}

func (p *CityInformation) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CityName = v
	}
	return nil
}

func (p *CityInformation) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CityInformation"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CityInformation) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CityId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CityInformation) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CityName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CityInformation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CityInformation(%+v)", *p)
}

func (p *CityInformation) DeepEqual(ano *CityInformation) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CityId) {
		return false
	}
	if !p.Field2DeepEqual(ano.CityName) {
		return false
	}
	return true
}

func (p *CityInformation) Field1DeepEqual(src int64) bool {

	if p.CityId != src {
		return false
	}
	return true
}
func (p *CityInformation) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CityName, src) != 0 {
		return false
	}
	return true
}
