// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package post

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"resume-resolving/api/idl/service/post/kitex_gen/department"
	"resume-resolving/api/idl/service/post/kitex_gen/post_category"
	"strings"
)

type PostInfo struct {
	PostId                  int64                                     `thrift:"post_id,1" frugal:"1,default,i64" json:"post_id"`
	PostBrief               string                                    `thrift:"post_brief,2" frugal:"2,default,string" json:"post_brief"`
	PostDescription         string                                    `thrift:"post_description,3" frugal:"3,default,string" json:"post_description"`
	PostRequire             string                                    `thrift:"post_require,4" frugal:"4,default,string" json:"post_require"`
	IsSchoolRecruitment     int8                                      `thrift:"is_school_recruitment,5" frugal:"5,default,byte" json:"is_school_recruitment"`
	IsInternship            int8                                      `thrift:"is_internship,6" frugal:"6,default,byte" json:"is_internship"`
	PostCategoryInformation *post_category.PostCategoryAllInformation `thrift:"post_category_information,7" frugal:"7,default,post_category.PostCategoryAllInformation" json:"post_category_information"`
	CityInformation         []*department.CityInformation             `thrift:"city_information,8" frugal:"8,default,list<department.CityInformation>" json:"city_information"`
	DepartmentInformation   *department.DepartmentInformation         `thrift:"department_information,9" frugal:"9,default,department.DepartmentInformation" json:"department_information"`
}

func NewPostInfo() *PostInfo {
	return &PostInfo{}
}

func (p *PostInfo) InitDefault() {
	*p = PostInfo{}
}

func (p *PostInfo) GetPostId() (v int64) {
	return p.PostId
}

func (p *PostInfo) GetPostBrief() (v string) {
	return p.PostBrief
}

func (p *PostInfo) GetPostDescription() (v string) {
	return p.PostDescription
}

func (p *PostInfo) GetPostRequire() (v string) {
	return p.PostRequire
}

func (p *PostInfo) GetIsSchoolRecruitment() (v int8) {
	return p.IsSchoolRecruitment
}

func (p *PostInfo) GetIsInternship() (v int8) {
	return p.IsInternship
}

var PostInfo_PostCategoryInformation_DEFAULT *post_category.PostCategoryAllInformation

func (p *PostInfo) GetPostCategoryInformation() (v *post_category.PostCategoryAllInformation) {
	if !p.IsSetPostCategoryInformation() {
		return PostInfo_PostCategoryInformation_DEFAULT
	}
	return p.PostCategoryInformation
}

func (p *PostInfo) GetCityInformation() (v []*department.CityInformation) {
	return p.CityInformation
}

var PostInfo_DepartmentInformation_DEFAULT *department.DepartmentInformation

func (p *PostInfo) GetDepartmentInformation() (v *department.DepartmentInformation) {
	if !p.IsSetDepartmentInformation() {
		return PostInfo_DepartmentInformation_DEFAULT
	}
	return p.DepartmentInformation
}
func (p *PostInfo) SetPostId(val int64) {
	p.PostId = val
}
func (p *PostInfo) SetPostBrief(val string) {
	p.PostBrief = val
}
func (p *PostInfo) SetPostDescription(val string) {
	p.PostDescription = val
}
func (p *PostInfo) SetPostRequire(val string) {
	p.PostRequire = val
}
func (p *PostInfo) SetIsSchoolRecruitment(val int8) {
	p.IsSchoolRecruitment = val
}
func (p *PostInfo) SetIsInternship(val int8) {
	p.IsInternship = val
}
func (p *PostInfo) SetPostCategoryInformation(val *post_category.PostCategoryAllInformation) {
	p.PostCategoryInformation = val
}
func (p *PostInfo) SetCityInformation(val []*department.CityInformation) {
	p.CityInformation = val
}
func (p *PostInfo) SetDepartmentInformation(val *department.DepartmentInformation) {
	p.DepartmentInformation = val
}

var fieldIDToName_PostInfo = map[int16]string{
	1: "post_id",
	2: "post_brief",
	3: "post_description",
	4: "post_require",
	5: "is_school_recruitment",
	6: "is_internship",
	7: "post_category_information",
	8: "city_information",
	9: "department_information",
}

func (p *PostInfo) IsSetPostCategoryInformation() bool {
	return p.PostCategoryInformation != nil
}

func (p *PostInfo) IsSetDepartmentInformation() bool {
	return p.DepartmentInformation != nil
}

func (p *PostInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostId = v
	}
	return nil
}

func (p *PostInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostBrief = v
	}
	return nil
}

func (p *PostInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostDescription = v
	}
	return nil
}

func (p *PostInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostRequire = v
	}
	return nil
}

func (p *PostInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsSchoolRecruitment = v
	}
	return nil
}

func (p *PostInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsInternship = v
	}
	return nil
}

func (p *PostInfo) ReadField7(iprot thrift.TProtocol) error {
	p.PostCategoryInformation = post_category.NewPostCategoryAllInformation()
	if err := p.PostCategoryInformation.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostInfo) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CityInformation = make([]*department.CityInformation, 0, size)
	for i := 0; i < size; i++ {
		_elem := department.NewCityInformation()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.CityInformation = append(p.CityInformation, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *PostInfo) ReadField9(iprot thrift.TProtocol) error {
	p.DepartmentInformation = department.NewDepartmentInformation()
	if err := p.DepartmentInformation.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PostInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_brief", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostBrief); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PostInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_description", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostDescription); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PostInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_require", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostRequire); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PostInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_school_recruitment", thrift.BYTE, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsSchoolRecruitment); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *PostInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_internship", thrift.BYTE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsInternship); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *PostInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_information", thrift.STRUCT, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PostCategoryInformation.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *PostInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_information", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CityInformation)); err != nil {
		return err
	}
	for _, v := range p.CityInformation {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *PostInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_information", thrift.STRUCT, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.DepartmentInformation.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *PostInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostInfo(%+v)", *p)
}

func (p *PostInfo) DeepEqual(ano *PostInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PostBrief) {
		return false
	}
	if !p.Field3DeepEqual(ano.PostDescription) {
		return false
	}
	if !p.Field4DeepEqual(ano.PostRequire) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsSchoolRecruitment) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsInternship) {
		return false
	}
	if !p.Field7DeepEqual(ano.PostCategoryInformation) {
		return false
	}
	if !p.Field8DeepEqual(ano.CityInformation) {
		return false
	}
	if !p.Field9DeepEqual(ano.DepartmentInformation) {
		return false
	}
	return true
}

func (p *PostInfo) Field1DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}
func (p *PostInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.PostBrief, src) != 0 {
		return false
	}
	return true
}
func (p *PostInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.PostDescription, src) != 0 {
		return false
	}
	return true
}
func (p *PostInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.PostRequire, src) != 0 {
		return false
	}
	return true
}
func (p *PostInfo) Field5DeepEqual(src int8) bool {

	if p.IsSchoolRecruitment != src {
		return false
	}
	return true
}
func (p *PostInfo) Field6DeepEqual(src int8) bool {

	if p.IsInternship != src {
		return false
	}
	return true
}
func (p *PostInfo) Field7DeepEqual(src *post_category.PostCategoryAllInformation) bool {

	if !p.PostCategoryInformation.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PostInfo) Field8DeepEqual(src []*department.CityInformation) bool {

	if len(p.CityInformation) != len(src) {
		return false
	}
	for i, v := range p.CityInformation {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PostInfo) Field9DeepEqual(src *department.DepartmentInformation) bool {

	if !p.DepartmentInformation.DeepEqual(src) {
		return false
	}
	return true
}
