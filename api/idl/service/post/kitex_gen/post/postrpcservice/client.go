// Code generated by Kitex v0.5.2. DO NOT EDIT.

package postrpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	post "resume-resolving/api/idl/service/post/kitex_gen/post"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	AppendPost(ctx context.Context, request *post.AppendPostRPCRequest, callOptions ...callopt.Option) (r *post.AppendPostRPCResponse, err error)
	UpdatePost(ctx context.Context, request *post.UpdatePostRPCRequest, callOptions ...callopt.Option) (r *post.UpdatePostRPCResponse, err error)
	DeletePost(ctx context.Context, request *post.DeletePostRPCRequest, callOptions ...callopt.Option) (r *post.DeletePostRPCResponse, err error)
	GetsPostInUser(ctx context.Context, request *post.GetsPostInUserRPCRequest, callOptions ...callopt.Option) (r *post.GetsPostInUserRPCResponse, err error)
	GetsPostInHR(ctx context.Context, request *post.GetsPostInHRRPCRequest, callOptions ...callopt.Option) (r *post.GetsPostInHRRPCResponse, err error)
	DeliveryPost(ctx context.Context, request *post.DeliveryPostRPCRequest, callOptions ...callopt.Option) (r *post.DeliveryPostRPCResponse, err error)
	CollectPost(ctx context.Context, request *post.CollectPostRPCRequest, callOptions ...callopt.Option) (r *post.CollectPostRPCResponse, err error)
	GetDeliveryPost(ctx context.Context, request *post.GetDeliveryPostRPCRequest, callOptions ...callopt.Option) (r *post.GetDeliveryPostRPCResponse, err error)
	GetCollectPost(ctx context.Context, request *post.GetCollectPostRPCRequest, callOptions ...callopt.Option) (r *post.GetCollectPostRPCResponse, err error)
	UpdateResumeStatus(ctx context.Context, request *post.UpdateResumeStatusRPCRequest, callOptions ...callopt.Option) (r *post.UpdateResumeStatusRPCResponse, err error)
	GetUserIdByPostId(ctx context.Context, request *post.GetUserIdByPostIdRPCRequest, callOptions ...callopt.Option) (r *post.GetUserIdByPostIdRPCResponse, err error)
	DeleteResumeRelativeInfoByHRId(ctx context.Context, request *post.DeleteResumeRelativeInfoByHRIdRPCRequest, callOptions ...callopt.Option) (r *post.DeleteResumeRelativeInfoByHRIdRPCResponse, err error)
	DeleteResumeRelativeInfoByDepartmentId(ctx context.Context, request *post.DeleteResumeRelativeInfoByDepartmentIdRPCRequest, callOptions ...callopt.Option) (r *post.DeleteResumeRelativeInfoByDepartmentIdRPCResponse, err error)
	DeleteResumeRelativeInfoByPostCategoryIdList(ctx context.Context, request *post.DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest, callOptions ...callopt.Option) (r *post.DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse, err error)
	DeletePostCityByCityId(ctx context.Context, request *post.DeletePostCityByCityIdRPCRequest, callOptions ...callopt.Option) (r *post.DeletePostCityByCityIdRPCResposne, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPostRPCServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPostRPCServiceClient struct {
	*kClient
}

func (p *kPostRPCServiceClient) AppendPost(ctx context.Context, request *post.AppendPostRPCRequest, callOptions ...callopt.Option) (r *post.AppendPostRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AppendPost(ctx, request)
}

func (p *kPostRPCServiceClient) UpdatePost(ctx context.Context, request *post.UpdatePostRPCRequest, callOptions ...callopt.Option) (r *post.UpdatePostRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdatePost(ctx, request)
}

func (p *kPostRPCServiceClient) DeletePost(ctx context.Context, request *post.DeletePostRPCRequest, callOptions ...callopt.Option) (r *post.DeletePostRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeletePost(ctx, request)
}

func (p *kPostRPCServiceClient) GetsPostInUser(ctx context.Context, request *post.GetsPostInUserRPCRequest, callOptions ...callopt.Option) (r *post.GetsPostInUserRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetsPostInUser(ctx, request)
}

func (p *kPostRPCServiceClient) GetsPostInHR(ctx context.Context, request *post.GetsPostInHRRPCRequest, callOptions ...callopt.Option) (r *post.GetsPostInHRRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetsPostInHR(ctx, request)
}

func (p *kPostRPCServiceClient) DeliveryPost(ctx context.Context, request *post.DeliveryPostRPCRequest, callOptions ...callopt.Option) (r *post.DeliveryPostRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeliveryPost(ctx, request)
}

func (p *kPostRPCServiceClient) CollectPost(ctx context.Context, request *post.CollectPostRPCRequest, callOptions ...callopt.Option) (r *post.CollectPostRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CollectPost(ctx, request)
}

func (p *kPostRPCServiceClient) GetDeliveryPost(ctx context.Context, request *post.GetDeliveryPostRPCRequest, callOptions ...callopt.Option) (r *post.GetDeliveryPostRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetDeliveryPost(ctx, request)
}

func (p *kPostRPCServiceClient) GetCollectPost(ctx context.Context, request *post.GetCollectPostRPCRequest, callOptions ...callopt.Option) (r *post.GetCollectPostRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCollectPost(ctx, request)
}

func (p *kPostRPCServiceClient) UpdateResumeStatus(ctx context.Context, request *post.UpdateResumeStatusRPCRequest, callOptions ...callopt.Option) (r *post.UpdateResumeStatusRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateResumeStatus(ctx, request)
}

func (p *kPostRPCServiceClient) GetUserIdByPostId(ctx context.Context, request *post.GetUserIdByPostIdRPCRequest, callOptions ...callopt.Option) (r *post.GetUserIdByPostIdRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserIdByPostId(ctx, request)
}

func (p *kPostRPCServiceClient) DeleteResumeRelativeInfoByHRId(ctx context.Context, request *post.DeleteResumeRelativeInfoByHRIdRPCRequest, callOptions ...callopt.Option) (r *post.DeleteResumeRelativeInfoByHRIdRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteResumeRelativeInfoByHRId(ctx, request)
}

func (p *kPostRPCServiceClient) DeleteResumeRelativeInfoByDepartmentId(ctx context.Context, request *post.DeleteResumeRelativeInfoByDepartmentIdRPCRequest, callOptions ...callopt.Option) (r *post.DeleteResumeRelativeInfoByDepartmentIdRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteResumeRelativeInfoByDepartmentId(ctx, request)
}

func (p *kPostRPCServiceClient) DeleteResumeRelativeInfoByPostCategoryIdList(ctx context.Context, request *post.DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest, callOptions ...callopt.Option) (r *post.DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteResumeRelativeInfoByPostCategoryIdList(ctx, request)
}

func (p *kPostRPCServiceClient) DeletePostCityByCityId(ctx context.Context, request *post.DeletePostCityByCityIdRPCRequest, callOptions ...callopt.Option) (r *post.DeletePostCityByCityIdRPCResposne, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeletePostCityByCityId(ctx, request)
}
