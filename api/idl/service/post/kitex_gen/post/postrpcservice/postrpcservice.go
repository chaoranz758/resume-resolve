// Code generated by Kitex v0.5.2. DO NOT EDIT.

package postrpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	post "resume-resolving/api/idl/service/post/kitex_gen/post"
)

func serviceInfo() *kitex.ServiceInfo {
	return postRPCServiceServiceInfo
}

var postRPCServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "PostRPCService"
	handlerType := (*post.PostRPCService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AppendPost":                             kitex.NewMethodInfo(appendPostHandler, newPostRPCServiceAppendPostArgs, newPostRPCServiceAppendPostResult, false),
		"UpdatePost":                             kitex.NewMethodInfo(updatePostHandler, newPostRPCServiceUpdatePostArgs, newPostRPCServiceUpdatePostResult, false),
		"DeletePost":                             kitex.NewMethodInfo(deletePostHandler, newPostRPCServiceDeletePostArgs, newPostRPCServiceDeletePostResult, false),
		"GetsPostInUser":                         kitex.NewMethodInfo(getsPostInUserHandler, newPostRPCServiceGetsPostInUserArgs, newPostRPCServiceGetsPostInUserResult, false),
		"GetsPostInHR":                           kitex.NewMethodInfo(getsPostInHRHandler, newPostRPCServiceGetsPostInHRArgs, newPostRPCServiceGetsPostInHRResult, false),
		"DeliveryPost":                           kitex.NewMethodInfo(deliveryPostHandler, newPostRPCServiceDeliveryPostArgs, newPostRPCServiceDeliveryPostResult, false),
		"CollectPost":                            kitex.NewMethodInfo(collectPostHandler, newPostRPCServiceCollectPostArgs, newPostRPCServiceCollectPostResult, false),
		"GetDeliveryPost":                        kitex.NewMethodInfo(getDeliveryPostHandler, newPostRPCServiceGetDeliveryPostArgs, newPostRPCServiceGetDeliveryPostResult, false),
		"GetCollectPost":                         kitex.NewMethodInfo(getCollectPostHandler, newPostRPCServiceGetCollectPostArgs, newPostRPCServiceGetCollectPostResult, false),
		"UpdateResumeStatus":                     kitex.NewMethodInfo(updateResumeStatusHandler, newPostRPCServiceUpdateResumeStatusArgs, newPostRPCServiceUpdateResumeStatusResult, false),
		"GetUserIdByPostId":                      kitex.NewMethodInfo(getUserIdByPostIdHandler, newPostRPCServiceGetUserIdByPostIdArgs, newPostRPCServiceGetUserIdByPostIdResult, false),
		"DeleteResumeRelativeInfoByHRId":         kitex.NewMethodInfo(deleteResumeRelativeInfoByHRIdHandler, newPostRPCServiceDeleteResumeRelativeInfoByHRIdArgs, newPostRPCServiceDeleteResumeRelativeInfoByHRIdResult, false),
		"DeleteResumeRelativeInfoByDepartmentId": kitex.NewMethodInfo(deleteResumeRelativeInfoByDepartmentIdHandler, newPostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs, newPostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult, false),
		"DeleteResumeRelativeInfoByPostCategoryIdList": kitex.NewMethodInfo(deleteResumeRelativeInfoByPostCategoryIdListHandler, newPostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs, newPostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult, false),
		"DeletePostCityByCityId":                       kitex.NewMethodInfo(deletePostCityByCityIdHandler, newPostRPCServiceDeletePostCityByCityIdArgs, newPostRPCServiceDeletePostCityByCityIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "post",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func appendPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceAppendPostArgs)
	realResult := result.(*post.PostRPCServiceAppendPostResult)
	success, err := handler.(post.PostRPCService).AppendPost(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceAppendPostArgs() interface{} {
	return post.NewPostRPCServiceAppendPostArgs()
}

func newPostRPCServiceAppendPostResult() interface{} {
	return post.NewPostRPCServiceAppendPostResult()
}

func updatePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceUpdatePostArgs)
	realResult := result.(*post.PostRPCServiceUpdatePostResult)
	success, err := handler.(post.PostRPCService).UpdatePost(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceUpdatePostArgs() interface{} {
	return post.NewPostRPCServiceUpdatePostArgs()
}

func newPostRPCServiceUpdatePostResult() interface{} {
	return post.NewPostRPCServiceUpdatePostResult()
}

func deletePostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceDeletePostArgs)
	realResult := result.(*post.PostRPCServiceDeletePostResult)
	success, err := handler.(post.PostRPCService).DeletePost(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceDeletePostArgs() interface{} {
	return post.NewPostRPCServiceDeletePostArgs()
}

func newPostRPCServiceDeletePostResult() interface{} {
	return post.NewPostRPCServiceDeletePostResult()
}

func getsPostInUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceGetsPostInUserArgs)
	realResult := result.(*post.PostRPCServiceGetsPostInUserResult)
	success, err := handler.(post.PostRPCService).GetsPostInUser(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceGetsPostInUserArgs() interface{} {
	return post.NewPostRPCServiceGetsPostInUserArgs()
}

func newPostRPCServiceGetsPostInUserResult() interface{} {
	return post.NewPostRPCServiceGetsPostInUserResult()
}

func getsPostInHRHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceGetsPostInHRArgs)
	realResult := result.(*post.PostRPCServiceGetsPostInHRResult)
	success, err := handler.(post.PostRPCService).GetsPostInHR(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceGetsPostInHRArgs() interface{} {
	return post.NewPostRPCServiceGetsPostInHRArgs()
}

func newPostRPCServiceGetsPostInHRResult() interface{} {
	return post.NewPostRPCServiceGetsPostInHRResult()
}

func deliveryPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceDeliveryPostArgs)
	realResult := result.(*post.PostRPCServiceDeliveryPostResult)
	success, err := handler.(post.PostRPCService).DeliveryPost(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceDeliveryPostArgs() interface{} {
	return post.NewPostRPCServiceDeliveryPostArgs()
}

func newPostRPCServiceDeliveryPostResult() interface{} {
	return post.NewPostRPCServiceDeliveryPostResult()
}

func collectPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceCollectPostArgs)
	realResult := result.(*post.PostRPCServiceCollectPostResult)
	success, err := handler.(post.PostRPCService).CollectPost(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceCollectPostArgs() interface{} {
	return post.NewPostRPCServiceCollectPostArgs()
}

func newPostRPCServiceCollectPostResult() interface{} {
	return post.NewPostRPCServiceCollectPostResult()
}

func getDeliveryPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceGetDeliveryPostArgs)
	realResult := result.(*post.PostRPCServiceGetDeliveryPostResult)
	success, err := handler.(post.PostRPCService).GetDeliveryPost(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceGetDeliveryPostArgs() interface{} {
	return post.NewPostRPCServiceGetDeliveryPostArgs()
}

func newPostRPCServiceGetDeliveryPostResult() interface{} {
	return post.NewPostRPCServiceGetDeliveryPostResult()
}

func getCollectPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceGetCollectPostArgs)
	realResult := result.(*post.PostRPCServiceGetCollectPostResult)
	success, err := handler.(post.PostRPCService).GetCollectPost(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceGetCollectPostArgs() interface{} {
	return post.NewPostRPCServiceGetCollectPostArgs()
}

func newPostRPCServiceGetCollectPostResult() interface{} {
	return post.NewPostRPCServiceGetCollectPostResult()
}

func updateResumeStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceUpdateResumeStatusArgs)
	realResult := result.(*post.PostRPCServiceUpdateResumeStatusResult)
	success, err := handler.(post.PostRPCService).UpdateResumeStatus(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceUpdateResumeStatusArgs() interface{} {
	return post.NewPostRPCServiceUpdateResumeStatusArgs()
}

func newPostRPCServiceUpdateResumeStatusResult() interface{} {
	return post.NewPostRPCServiceUpdateResumeStatusResult()
}

func getUserIdByPostIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceGetUserIdByPostIdArgs)
	realResult := result.(*post.PostRPCServiceGetUserIdByPostIdResult)
	success, err := handler.(post.PostRPCService).GetUserIdByPostId(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceGetUserIdByPostIdArgs() interface{} {
	return post.NewPostRPCServiceGetUserIdByPostIdArgs()
}

func newPostRPCServiceGetUserIdByPostIdResult() interface{} {
	return post.NewPostRPCServiceGetUserIdByPostIdResult()
}

func deleteResumeRelativeInfoByHRIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs)
	realResult := result.(*post.PostRPCServiceDeleteResumeRelativeInfoByHRIdResult)
	success, err := handler.(post.PostRPCService).DeleteResumeRelativeInfoByHRId(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceDeleteResumeRelativeInfoByHRIdArgs() interface{} {
	return post.NewPostRPCServiceDeleteResumeRelativeInfoByHRIdArgs()
}

func newPostRPCServiceDeleteResumeRelativeInfoByHRIdResult() interface{} {
	return post.NewPostRPCServiceDeleteResumeRelativeInfoByHRIdResult()
}

func deleteResumeRelativeInfoByDepartmentIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs)
	realResult := result.(*post.PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult)
	success, err := handler.(post.PostRPCService).DeleteResumeRelativeInfoByDepartmentId(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs() interface{} {
	return post.NewPostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs()
}

func newPostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult() interface{} {
	return post.NewPostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult()
}

func deleteResumeRelativeInfoByPostCategoryIdListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs)
	realResult := result.(*post.PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult)
	success, err := handler.(post.PostRPCService).DeleteResumeRelativeInfoByPostCategoryIdList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs() interface{} {
	return post.NewPostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs()
}

func newPostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult() interface{} {
	return post.NewPostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult()
}

func deletePostCityByCityIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*post.PostRPCServiceDeletePostCityByCityIdArgs)
	realResult := result.(*post.PostRPCServiceDeletePostCityByCityIdResult)
	success, err := handler.(post.PostRPCService).DeletePostCityByCityId(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPostRPCServiceDeletePostCityByCityIdArgs() interface{} {
	return post.NewPostRPCServiceDeletePostCityByCityIdArgs()
}

func newPostRPCServiceDeletePostCityByCityIdResult() interface{} {
	return post.NewPostRPCServiceDeletePostCityByCityIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AppendPost(ctx context.Context, request *post.AppendPostRPCRequest) (r *post.AppendPostRPCResponse, err error) {
	var _args post.PostRPCServiceAppendPostArgs
	_args.Request = request
	var _result post.PostRPCServiceAppendPostResult
	if err = p.c.Call(ctx, "AppendPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePost(ctx context.Context, request *post.UpdatePostRPCRequest) (r *post.UpdatePostRPCResponse, err error) {
	var _args post.PostRPCServiceUpdatePostArgs
	_args.Request = request
	var _result post.PostRPCServiceUpdatePostResult
	if err = p.c.Call(ctx, "UpdatePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePost(ctx context.Context, request *post.DeletePostRPCRequest) (r *post.DeletePostRPCResponse, err error) {
	var _args post.PostRPCServiceDeletePostArgs
	_args.Request = request
	var _result post.PostRPCServiceDeletePostResult
	if err = p.c.Call(ctx, "DeletePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetsPostInUser(ctx context.Context, request *post.GetsPostInUserRPCRequest) (r *post.GetsPostInUserRPCResponse, err error) {
	var _args post.PostRPCServiceGetsPostInUserArgs
	_args.Request = request
	var _result post.PostRPCServiceGetsPostInUserResult
	if err = p.c.Call(ctx, "GetsPostInUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetsPostInHR(ctx context.Context, request *post.GetsPostInHRRPCRequest) (r *post.GetsPostInHRRPCResponse, err error) {
	var _args post.PostRPCServiceGetsPostInHRArgs
	_args.Request = request
	var _result post.PostRPCServiceGetsPostInHRResult
	if err = p.c.Call(ctx, "GetsPostInHR", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeliveryPost(ctx context.Context, request *post.DeliveryPostRPCRequest) (r *post.DeliveryPostRPCResponse, err error) {
	var _args post.PostRPCServiceDeliveryPostArgs
	_args.Request = request
	var _result post.PostRPCServiceDeliveryPostResult
	if err = p.c.Call(ctx, "DeliveryPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CollectPost(ctx context.Context, request *post.CollectPostRPCRequest) (r *post.CollectPostRPCResponse, err error) {
	var _args post.PostRPCServiceCollectPostArgs
	_args.Request = request
	var _result post.PostRPCServiceCollectPostResult
	if err = p.c.Call(ctx, "CollectPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDeliveryPost(ctx context.Context, request *post.GetDeliveryPostRPCRequest) (r *post.GetDeliveryPostRPCResponse, err error) {
	var _args post.PostRPCServiceGetDeliveryPostArgs
	_args.Request = request
	var _result post.PostRPCServiceGetDeliveryPostResult
	if err = p.c.Call(ctx, "GetDeliveryPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCollectPost(ctx context.Context, request *post.GetCollectPostRPCRequest) (r *post.GetCollectPostRPCResponse, err error) {
	var _args post.PostRPCServiceGetCollectPostArgs
	_args.Request = request
	var _result post.PostRPCServiceGetCollectPostResult
	if err = p.c.Call(ctx, "GetCollectPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateResumeStatus(ctx context.Context, request *post.UpdateResumeStatusRPCRequest) (r *post.UpdateResumeStatusRPCResponse, err error) {
	var _args post.PostRPCServiceUpdateResumeStatusArgs
	_args.Request = request
	var _result post.PostRPCServiceUpdateResumeStatusResult
	if err = p.c.Call(ctx, "UpdateResumeStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserIdByPostId(ctx context.Context, request *post.GetUserIdByPostIdRPCRequest) (r *post.GetUserIdByPostIdRPCResponse, err error) {
	var _args post.PostRPCServiceGetUserIdByPostIdArgs
	_args.Request = request
	var _result post.PostRPCServiceGetUserIdByPostIdResult
	if err = p.c.Call(ctx, "GetUserIdByPostId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteResumeRelativeInfoByHRId(ctx context.Context, request *post.DeleteResumeRelativeInfoByHRIdRPCRequest) (r *post.DeleteResumeRelativeInfoByHRIdRPCResponse, err error) {
	var _args post.PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs
	_args.Request = request
	var _result post.PostRPCServiceDeleteResumeRelativeInfoByHRIdResult
	if err = p.c.Call(ctx, "DeleteResumeRelativeInfoByHRId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteResumeRelativeInfoByDepartmentId(ctx context.Context, request *post.DeleteResumeRelativeInfoByDepartmentIdRPCRequest) (r *post.DeleteResumeRelativeInfoByDepartmentIdRPCResponse, err error) {
	var _args post.PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs
	_args.Request = request
	var _result post.PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult
	if err = p.c.Call(ctx, "DeleteResumeRelativeInfoByDepartmentId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteResumeRelativeInfoByPostCategoryIdList(ctx context.Context, request *post.DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) (r *post.DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse, err error) {
	var _args post.PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs
	_args.Request = request
	var _result post.PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult
	if err = p.c.Call(ctx, "DeleteResumeRelativeInfoByPostCategoryIdList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePostCityByCityId(ctx context.Context, request *post.DeletePostCityByCityIdRPCRequest) (r *post.DeletePostCityByCityIdRPCResposne, err error) {
	var _args post.PostRPCServiceDeletePostCityByCityIdArgs
	_args.Request = request
	var _result post.PostRPCServiceDeletePostCityByCityIdResult
	if err = p.c.Call(ctx, "DeletePostCityByCityId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
