// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package post

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type AppendPostRPCRequest struct {
	HrId                int64   `thrift:"hr_id,1" frugal:"1,default,i64" json:"hr_id"`
	PostBrief           string  `thrift:"post_brief,2" frugal:"2,default,string" json:"post_brief"`
	PostDescription     string  `thrift:"post_description,3" frugal:"3,default,string" json:"post_description"`
	PostRequire         string  `thrift:"post_require,4" frugal:"4,default,string" json:"post_require"`
	IsSchoolRecruitment int8    `thrift:"is_school_recruitment,5" frugal:"5,default,byte" json:"is_school_recruitment"`
	IsInternship        int8    `thrift:"is_internship,6" frugal:"6,default,byte" json:"is_internship"`
	PostCategoryId      int64   `thrift:"post_category_id,7" frugal:"7,default,i64" json:"post_category_id"`
	DepartmentId        int64   `thrift:"department_id,8" frugal:"8,default,i64" json:"department_id"`
	CityList            []int64 `thrift:"city_list,9" frugal:"9,default,list<i64>" json:"city_list"`
}

func NewAppendPostRPCRequest() *AppendPostRPCRequest {
	return &AppendPostRPCRequest{}
}

func (p *AppendPostRPCRequest) InitDefault() {
	*p = AppendPostRPCRequest{}
}

func (p *AppendPostRPCRequest) GetHrId() (v int64) {
	return p.HrId
}

func (p *AppendPostRPCRequest) GetPostBrief() (v string) {
	return p.PostBrief
}

func (p *AppendPostRPCRequest) GetPostDescription() (v string) {
	return p.PostDescription
}

func (p *AppendPostRPCRequest) GetPostRequire() (v string) {
	return p.PostRequire
}

func (p *AppendPostRPCRequest) GetIsSchoolRecruitment() (v int8) {
	return p.IsSchoolRecruitment
}

func (p *AppendPostRPCRequest) GetIsInternship() (v int8) {
	return p.IsInternship
}

func (p *AppendPostRPCRequest) GetPostCategoryId() (v int64) {
	return p.PostCategoryId
}

func (p *AppendPostRPCRequest) GetDepartmentId() (v int64) {
	return p.DepartmentId
}

func (p *AppendPostRPCRequest) GetCityList() (v []int64) {
	return p.CityList
}
func (p *AppendPostRPCRequest) SetHrId(val int64) {
	p.HrId = val
}
func (p *AppendPostRPCRequest) SetPostBrief(val string) {
	p.PostBrief = val
}
func (p *AppendPostRPCRequest) SetPostDescription(val string) {
	p.PostDescription = val
}
func (p *AppendPostRPCRequest) SetPostRequire(val string) {
	p.PostRequire = val
}
func (p *AppendPostRPCRequest) SetIsSchoolRecruitment(val int8) {
	p.IsSchoolRecruitment = val
}
func (p *AppendPostRPCRequest) SetIsInternship(val int8) {
	p.IsInternship = val
}
func (p *AppendPostRPCRequest) SetPostCategoryId(val int64) {
	p.PostCategoryId = val
}
func (p *AppendPostRPCRequest) SetDepartmentId(val int64) {
	p.DepartmentId = val
}
func (p *AppendPostRPCRequest) SetCityList(val []int64) {
	p.CityList = val
}

var fieldIDToName_AppendPostRPCRequest = map[int16]string{
	1: "hr_id",
	2: "post_brief",
	3: "post_description",
	4: "post_require",
	5: "is_school_recruitment",
	6: "is_internship",
	7: "post_category_id",
	8: "department_id",
	9: "city_list",
}

func (p *AppendPostRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendPostRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendPostRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.HrId = v
	}
	return nil
}

func (p *AppendPostRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostBrief = v
	}
	return nil
}

func (p *AppendPostRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostDescription = v
	}
	return nil
}

func (p *AppendPostRPCRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostRequire = v
	}
	return nil
}

func (p *AppendPostRPCRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsSchoolRecruitment = v
	}
	return nil
}

func (p *AppendPostRPCRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsInternship = v
	}
	return nil
}

func (p *AppendPostRPCRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostCategoryId = v
	}
	return nil
}

func (p *AppendPostRPCRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.DepartmentId = v
	}
	return nil
}

func (p *AppendPostRPCRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CityList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.CityList = append(p.CityList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *AppendPostRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendPostRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendPostRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hr_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.HrId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendPostRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_brief", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostBrief); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendPostRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_description", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostDescription); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AppendPostRPCRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_require", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostRequire); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AppendPostRPCRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_school_recruitment", thrift.BYTE, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsSchoolRecruitment); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *AppendPostRPCRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_internship", thrift.BYTE, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsInternship); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *AppendPostRPCRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_id", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostCategoryId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *AppendPostRPCRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_id", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DepartmentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *AppendPostRPCRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_list", thrift.LIST, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.CityList)); err != nil {
		return err
	}
	for _, v := range p.CityList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *AppendPostRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPostRPCRequest(%+v)", *p)
}

func (p *AppendPostRPCRequest) DeepEqual(ano *AppendPostRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HrId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PostBrief) {
		return false
	}
	if !p.Field3DeepEqual(ano.PostDescription) {
		return false
	}
	if !p.Field4DeepEqual(ano.PostRequire) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsSchoolRecruitment) {
		return false
	}
	if !p.Field6DeepEqual(ano.IsInternship) {
		return false
	}
	if !p.Field7DeepEqual(ano.PostCategoryId) {
		return false
	}
	if !p.Field8DeepEqual(ano.DepartmentId) {
		return false
	}
	if !p.Field9DeepEqual(ano.CityList) {
		return false
	}
	return true
}

func (p *AppendPostRPCRequest) Field1DeepEqual(src int64) bool {

	if p.HrId != src {
		return false
	}
	return true
}
func (p *AppendPostRPCRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.PostBrief, src) != 0 {
		return false
	}
	return true
}
func (p *AppendPostRPCRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.PostDescription, src) != 0 {
		return false
	}
	return true
}
func (p *AppendPostRPCRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.PostRequire, src) != 0 {
		return false
	}
	return true
}
func (p *AppendPostRPCRequest) Field5DeepEqual(src int8) bool {

	if p.IsSchoolRecruitment != src {
		return false
	}
	return true
}
func (p *AppendPostRPCRequest) Field6DeepEqual(src int8) bool {

	if p.IsInternship != src {
		return false
	}
	return true
}
func (p *AppendPostRPCRequest) Field7DeepEqual(src int64) bool {

	if p.PostCategoryId != src {
		return false
	}
	return true
}
func (p *AppendPostRPCRequest) Field8DeepEqual(src int64) bool {

	if p.DepartmentId != src {
		return false
	}
	return true
}
func (p *AppendPostRPCRequest) Field9DeepEqual(src []int64) bool {

	if len(p.CityList) != len(src) {
		return false
	}
	for i, v := range p.CityList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type AppendPostRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewAppendPostRPCResponse() *AppendPostRPCResponse {
	return &AppendPostRPCResponse{}
}

func (p *AppendPostRPCResponse) InitDefault() {
	*p = AppendPostRPCResponse{}
}

func (p *AppendPostRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *AppendPostRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *AppendPostRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *AppendPostRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_AppendPostRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *AppendPostRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AppendPostRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AppendPostRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *AppendPostRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *AppendPostRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendPostRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AppendPostRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AppendPostRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AppendPostRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AppendPostRPCResponse(%+v)", *p)
}

func (p *AppendPostRPCResponse) DeepEqual(ano *AppendPostRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *AppendPostRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *AppendPostRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type UpdatePostRPCRequest struct {
	PostId          int64  `thrift:"post_id,1" frugal:"1,default,i64" json:"post_id"`
	PostBrief       string `thrift:"post_brief,2" frugal:"2,default,string" json:"post_brief"`
	PostDescription string `thrift:"post_description,3" frugal:"3,default,string" json:"post_description"`
	PostRequire     string `thrift:"post_require,4" frugal:"4,default,string" json:"post_require"`
}

func NewUpdatePostRPCRequest() *UpdatePostRPCRequest {
	return &UpdatePostRPCRequest{}
}

func (p *UpdatePostRPCRequest) InitDefault() {
	*p = UpdatePostRPCRequest{}
}

func (p *UpdatePostRPCRequest) GetPostId() (v int64) {
	return p.PostId
}

func (p *UpdatePostRPCRequest) GetPostBrief() (v string) {
	return p.PostBrief
}

func (p *UpdatePostRPCRequest) GetPostDescription() (v string) {
	return p.PostDescription
}

func (p *UpdatePostRPCRequest) GetPostRequire() (v string) {
	return p.PostRequire
}
func (p *UpdatePostRPCRequest) SetPostId(val int64) {
	p.PostId = val
}
func (p *UpdatePostRPCRequest) SetPostBrief(val string) {
	p.PostBrief = val
}
func (p *UpdatePostRPCRequest) SetPostDescription(val string) {
	p.PostDescription = val
}
func (p *UpdatePostRPCRequest) SetPostRequire(val string) {
	p.PostRequire = val
}

var fieldIDToName_UpdatePostRPCRequest = map[int16]string{
	1: "post_id",
	2: "post_brief",
	3: "post_description",
	4: "post_require",
}

func (p *UpdatePostRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePostRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdatePostRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostId = v
	}
	return nil
}

func (p *UpdatePostRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostBrief = v
	}
	return nil
}

func (p *UpdatePostRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostDescription = v
	}
	return nil
}

func (p *UpdatePostRPCRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.PostRequire = v
	}
	return nil
}

func (p *UpdatePostRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePostRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePostRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdatePostRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_brief", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostBrief); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdatePostRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_description", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostDescription); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdatePostRPCRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_require", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PostRequire); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UpdatePostRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePostRPCRequest(%+v)", *p)
}

func (p *UpdatePostRPCRequest) DeepEqual(ano *UpdatePostRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PostBrief) {
		return false
	}
	if !p.Field3DeepEqual(ano.PostDescription) {
		return false
	}
	if !p.Field4DeepEqual(ano.PostRequire) {
		return false
	}
	return true
}

func (p *UpdatePostRPCRequest) Field1DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}
func (p *UpdatePostRPCRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.PostBrief, src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePostRPCRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.PostDescription, src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePostRPCRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.PostRequire, src) != 0 {
		return false
	}
	return true
}

type UpdatePostRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewUpdatePostRPCResponse() *UpdatePostRPCResponse {
	return &UpdatePostRPCResponse{}
}

func (p *UpdatePostRPCResponse) InitDefault() {
	*p = UpdatePostRPCResponse{}
}

func (p *UpdatePostRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *UpdatePostRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *UpdatePostRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *UpdatePostRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_UpdatePostRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *UpdatePostRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePostRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdatePostRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *UpdatePostRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *UpdatePostRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePostRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePostRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdatePostRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdatePostRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePostRPCResponse(%+v)", *p)
}

func (p *UpdatePostRPCResponse) DeepEqual(ano *UpdatePostRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *UpdatePostRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *UpdatePostRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type DeletePostRPCRequest struct {
	PostId int64 `thrift:"post_id,1" frugal:"1,default,i64" json:"post_id"`
}

func NewDeletePostRPCRequest() *DeletePostRPCRequest {
	return &DeletePostRPCRequest{}
}

func (p *DeletePostRPCRequest) InitDefault() {
	*p = DeletePostRPCRequest{}
}

func (p *DeletePostRPCRequest) GetPostId() (v int64) {
	return p.PostId
}
func (p *DeletePostRPCRequest) SetPostId(val int64) {
	p.PostId = val
}

var fieldIDToName_DeletePostRPCRequest = map[int16]string{
	1: "post_id",
}

func (p *DeletePostRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePostRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeletePostRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostId = v
	}
	return nil
}

func (p *DeletePostRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePostRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeletePostRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePostRPCRequest(%+v)", *p)
}

func (p *DeletePostRPCRequest) DeepEqual(ano *DeletePostRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostId) {
		return false
	}
	return true
}

func (p *DeletePostRPCRequest) Field1DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}

type DeletePostRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewDeletePostRPCResponse() *DeletePostRPCResponse {
	return &DeletePostRPCResponse{}
}

func (p *DeletePostRPCResponse) InitDefault() {
	*p = DeletePostRPCResponse{}
}

func (p *DeletePostRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *DeletePostRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *DeletePostRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *DeletePostRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_DeletePostRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *DeletePostRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePostRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeletePostRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *DeletePostRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *DeletePostRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePostRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeletePostRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeletePostRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePostRPCResponse(%+v)", *p)
}

func (p *DeletePostRPCResponse) DeepEqual(ano *DeletePostRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *DeletePostRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *DeletePostRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type GetsPostInUserRPCRequest struct {
	Limit               int64   `thrift:"limit,1" frugal:"1,default,i64" json:"limit"`
	Offset              int64   `thrift:"offset,2" frugal:"2,default,i64" json:"offset"`
	IsNew               int8    `thrift:"is_new,3" frugal:"3,default,byte" json:"is_new"`
	IsSchoolRecruitment int8    `thrift:"is_school_recruitment,4" frugal:"4,default,byte" json:"is_school_recruitment"`
	IsInternship        int8    `thrift:"is_internship,5" frugal:"5,default,byte" json:"is_internship"`
	DepartmentIdList    []int64 `thrift:"department_id_list,6" frugal:"6,default,list<i64>" json:"department_id_list"`
	PostCategoryIdList  []int64 `thrift:"post_category_id_list,7" frugal:"7,default,list<i64>" json:"post_category_id_list"`
}

func NewGetsPostInUserRPCRequest() *GetsPostInUserRPCRequest {
	return &GetsPostInUserRPCRequest{}
}

func (p *GetsPostInUserRPCRequest) InitDefault() {
	*p = GetsPostInUserRPCRequest{}
}

func (p *GetsPostInUserRPCRequest) GetLimit() (v int64) {
	return p.Limit
}

func (p *GetsPostInUserRPCRequest) GetOffset() (v int64) {
	return p.Offset
}

func (p *GetsPostInUserRPCRequest) GetIsNew() (v int8) {
	return p.IsNew
}

func (p *GetsPostInUserRPCRequest) GetIsSchoolRecruitment() (v int8) {
	return p.IsSchoolRecruitment
}

func (p *GetsPostInUserRPCRequest) GetIsInternship() (v int8) {
	return p.IsInternship
}

func (p *GetsPostInUserRPCRequest) GetDepartmentIdList() (v []int64) {
	return p.DepartmentIdList
}

func (p *GetsPostInUserRPCRequest) GetPostCategoryIdList() (v []int64) {
	return p.PostCategoryIdList
}
func (p *GetsPostInUserRPCRequest) SetLimit(val int64) {
	p.Limit = val
}
func (p *GetsPostInUserRPCRequest) SetOffset(val int64) {
	p.Offset = val
}
func (p *GetsPostInUserRPCRequest) SetIsNew(val int8) {
	p.IsNew = val
}
func (p *GetsPostInUserRPCRequest) SetIsSchoolRecruitment(val int8) {
	p.IsSchoolRecruitment = val
}
func (p *GetsPostInUserRPCRequest) SetIsInternship(val int8) {
	p.IsInternship = val
}
func (p *GetsPostInUserRPCRequest) SetDepartmentIdList(val []int64) {
	p.DepartmentIdList = val
}
func (p *GetsPostInUserRPCRequest) SetPostCategoryIdList(val []int64) {
	p.PostCategoryIdList = val
}

var fieldIDToName_GetsPostInUserRPCRequest = map[int16]string{
	1: "limit",
	2: "offset",
	3: "is_new",
	4: "is_school_recruitment",
	5: "is_internship",
	6: "department_id_list",
	7: "post_category_id_list",
}

func (p *GetsPostInUserRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetsPostInUserRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsPostInUserRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetsPostInUserRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Offset = v
	}
	return nil
}

func (p *GetsPostInUserRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsNew = v
	}
	return nil
}

func (p *GetsPostInUserRPCRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsSchoolRecruitment = v
	}
	return nil
}

func (p *GetsPostInUserRPCRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsInternship = v
	}
	return nil
}

func (p *GetsPostInUserRPCRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.DepartmentIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.DepartmentIdList = append(p.DepartmentIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetsPostInUserRPCRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PostCategoryIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PostCategoryIdList = append(p.PostCategoryIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetsPostInUserRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostInUserRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsPostInUserRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetsPostInUserRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("offset", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetsPostInUserRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_new", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsNew); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetsPostInUserRPCRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_school_recruitment", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsSchoolRecruitment); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetsPostInUserRPCRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_internship", thrift.BYTE, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsInternship); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetsPostInUserRPCRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_id_list", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.DepartmentIdList)); err != nil {
		return err
	}
	for _, v := range p.DepartmentIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetsPostInUserRPCRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_id_list", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.PostCategoryIdList)); err != nil {
		return err
	}
	for _, v := range p.PostCategoryIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *GetsPostInUserRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsPostInUserRPCRequest(%+v)", *p)
}

func (p *GetsPostInUserRPCRequest) DeepEqual(ano *GetsPostInUserRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field2DeepEqual(ano.Offset) {
		return false
	}
	if !p.Field3DeepEqual(ano.IsNew) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsSchoolRecruitment) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsInternship) {
		return false
	}
	if !p.Field6DeepEqual(ano.DepartmentIdList) {
		return false
	}
	if !p.Field7DeepEqual(ano.PostCategoryIdList) {
		return false
	}
	return true
}

func (p *GetsPostInUserRPCRequest) Field1DeepEqual(src int64) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *GetsPostInUserRPCRequest) Field2DeepEqual(src int64) bool {

	if p.Offset != src {
		return false
	}
	return true
}
func (p *GetsPostInUserRPCRequest) Field3DeepEqual(src int8) bool {

	if p.IsNew != src {
		return false
	}
	return true
}
func (p *GetsPostInUserRPCRequest) Field4DeepEqual(src int8) bool {

	if p.IsSchoolRecruitment != src {
		return false
	}
	return true
}
func (p *GetsPostInUserRPCRequest) Field5DeepEqual(src int8) bool {

	if p.IsInternship != src {
		return false
	}
	return true
}
func (p *GetsPostInUserRPCRequest) Field6DeepEqual(src []int64) bool {

	if len(p.DepartmentIdList) != len(src) {
		return false
	}
	for i, v := range p.DepartmentIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *GetsPostInUserRPCRequest) Field7DeepEqual(src []int64) bool {

	if len(p.PostCategoryIdList) != len(src) {
		return false
	}
	for i, v := range p.PostCategoryIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type GetsPostInUserRPCResponse struct {
	Code    int32       `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string      `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    []*PostInfo `thrift:"data,3" frugal:"3,default,list<PostInfo>" json:"data"`
}

func NewGetsPostInUserRPCResponse() *GetsPostInUserRPCResponse {
	return &GetsPostInUserRPCResponse{}
}

func (p *GetsPostInUserRPCResponse) InitDefault() {
	*p = GetsPostInUserRPCResponse{}
}

func (p *GetsPostInUserRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetsPostInUserRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetsPostInUserRPCResponse) GetData() (v []*PostInfo) {
	return p.Data
}
func (p *GetsPostInUserRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetsPostInUserRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetsPostInUserRPCResponse) SetData(val []*PostInfo) {
	p.Data = val
}

var fieldIDToName_GetsPostInUserRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *GetsPostInUserRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetsPostInUserRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsPostInUserRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetsPostInUserRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetsPostInUserRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*PostInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPostInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetsPostInUserRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostInUserRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsPostInUserRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetsPostInUserRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetsPostInUserRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetsPostInUserRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsPostInUserRPCResponse(%+v)", *p)
}

func (p *GetsPostInUserRPCResponse) DeepEqual(ano *GetsPostInUserRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetsPostInUserRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetsPostInUserRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetsPostInUserRPCResponse) Field3DeepEqual(src []*PostInfo) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetsPostInHRRPCRequest struct {
	Limit               int64 `thrift:"limit,1" frugal:"1,default,i64" json:"limit"`
	Offset              int64 `thrift:"offset,2" frugal:"2,default,i64" json:"offset"`
	HrId                int64 `thrift:"hr_id,3" frugal:"3,default,i64" json:"hr_id"`
	IsSchoolRecruitment int8  `thrift:"is_school_recruitment,4" frugal:"4,default,byte" json:"is_school_recruitment"`
	IsInternship        int8  `thrift:"is_internship,5" frugal:"5,default,byte" json:"is_internship"`
}

func NewGetsPostInHRRPCRequest() *GetsPostInHRRPCRequest {
	return &GetsPostInHRRPCRequest{}
}

func (p *GetsPostInHRRPCRequest) InitDefault() {
	*p = GetsPostInHRRPCRequest{}
}

func (p *GetsPostInHRRPCRequest) GetLimit() (v int64) {
	return p.Limit
}

func (p *GetsPostInHRRPCRequest) GetOffset() (v int64) {
	return p.Offset
}

func (p *GetsPostInHRRPCRequest) GetHrId() (v int64) {
	return p.HrId
}

func (p *GetsPostInHRRPCRequest) GetIsSchoolRecruitment() (v int8) {
	return p.IsSchoolRecruitment
}

func (p *GetsPostInHRRPCRequest) GetIsInternship() (v int8) {
	return p.IsInternship
}
func (p *GetsPostInHRRPCRequest) SetLimit(val int64) {
	p.Limit = val
}
func (p *GetsPostInHRRPCRequest) SetOffset(val int64) {
	p.Offset = val
}
func (p *GetsPostInHRRPCRequest) SetHrId(val int64) {
	p.HrId = val
}
func (p *GetsPostInHRRPCRequest) SetIsSchoolRecruitment(val int8) {
	p.IsSchoolRecruitment = val
}
func (p *GetsPostInHRRPCRequest) SetIsInternship(val int8) {
	p.IsInternship = val
}

var fieldIDToName_GetsPostInHRRPCRequest = map[int16]string{
	1: "limit",
	2: "offset",
	3: "hr_id",
	4: "is_school_recruitment",
	5: "is_internship",
}

func (p *GetsPostInHRRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetsPostInHRRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsPostInHRRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetsPostInHRRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Offset = v
	}
	return nil
}

func (p *GetsPostInHRRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.HrId = v
	}
	return nil
}

func (p *GetsPostInHRRPCRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsSchoolRecruitment = v
	}
	return nil
}

func (p *GetsPostInHRRPCRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsInternship = v
	}
	return nil
}

func (p *GetsPostInHRRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostInHRRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsPostInHRRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetsPostInHRRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("offset", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetsPostInHRRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hr_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.HrId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetsPostInHRRPCRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_school_recruitment", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsSchoolRecruitment); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetsPostInHRRPCRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_internship", thrift.BYTE, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsInternship); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *GetsPostInHRRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsPostInHRRPCRequest(%+v)", *p)
}

func (p *GetsPostInHRRPCRequest) DeepEqual(ano *GetsPostInHRRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field2DeepEqual(ano.Offset) {
		return false
	}
	if !p.Field3DeepEqual(ano.HrId) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsSchoolRecruitment) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsInternship) {
		return false
	}
	return true
}

func (p *GetsPostInHRRPCRequest) Field1DeepEqual(src int64) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *GetsPostInHRRPCRequest) Field2DeepEqual(src int64) bool {

	if p.Offset != src {
		return false
	}
	return true
}
func (p *GetsPostInHRRPCRequest) Field3DeepEqual(src int64) bool {

	if p.HrId != src {
		return false
	}
	return true
}
func (p *GetsPostInHRRPCRequest) Field4DeepEqual(src int8) bool {

	if p.IsSchoolRecruitment != src {
		return false
	}
	return true
}
func (p *GetsPostInHRRPCRequest) Field5DeepEqual(src int8) bool {

	if p.IsInternship != src {
		return false
	}
	return true
}

type GetsPostInHRRPCResponse struct {
	Code    int32       `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string      `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    []*PostInfo `thrift:"data,3" frugal:"3,default,list<PostInfo>" json:"data"`
}

func NewGetsPostInHRRPCResponse() *GetsPostInHRRPCResponse {
	return &GetsPostInHRRPCResponse{}
}

func (p *GetsPostInHRRPCResponse) InitDefault() {
	*p = GetsPostInHRRPCResponse{}
}

func (p *GetsPostInHRRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetsPostInHRRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetsPostInHRRPCResponse) GetData() (v []*PostInfo) {
	return p.Data
}
func (p *GetsPostInHRRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetsPostInHRRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetsPostInHRRPCResponse) SetData(val []*PostInfo) {
	p.Data = val
}

var fieldIDToName_GetsPostInHRRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *GetsPostInHRRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetsPostInHRRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetsPostInHRRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetsPostInHRRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetsPostInHRRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*PostInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPostInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetsPostInHRRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostInHRRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetsPostInHRRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetsPostInHRRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetsPostInHRRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetsPostInHRRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetsPostInHRRPCResponse(%+v)", *p)
}

func (p *GetsPostInHRRPCResponse) DeepEqual(ano *GetsPostInHRRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetsPostInHRRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetsPostInHRRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetsPostInHRRPCResponse) Field3DeepEqual(src []*PostInfo) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type DeliveryPostRPCRequest struct {
	IsDelivery int8  `thrift:"is_delivery,1" frugal:"1,default,byte" json:"is_delivery"`
	UserId     int64 `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	PostId     int64 `thrift:"post_id,3" frugal:"3,default,i64" json:"post_id"`
}

func NewDeliveryPostRPCRequest() *DeliveryPostRPCRequest {
	return &DeliveryPostRPCRequest{}
}

func (p *DeliveryPostRPCRequest) InitDefault() {
	*p = DeliveryPostRPCRequest{}
}

func (p *DeliveryPostRPCRequest) GetIsDelivery() (v int8) {
	return p.IsDelivery
}

func (p *DeliveryPostRPCRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *DeliveryPostRPCRequest) GetPostId() (v int64) {
	return p.PostId
}
func (p *DeliveryPostRPCRequest) SetIsDelivery(val int8) {
	p.IsDelivery = val
}
func (p *DeliveryPostRPCRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *DeliveryPostRPCRequest) SetPostId(val int64) {
	p.PostId = val
}

var fieldIDToName_DeliveryPostRPCRequest = map[int16]string{
	1: "is_delivery",
	2: "user_id",
	3: "post_id",
}

func (p *DeliveryPostRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeliveryPostRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeliveryPostRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsDelivery = v
	}
	return nil
}

func (p *DeliveryPostRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *DeliveryPostRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostId = v
	}
	return nil
}

func (p *DeliveryPostRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeliveryPostRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeliveryPostRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_delivery", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsDelivery); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeliveryPostRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeliveryPostRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DeliveryPostRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeliveryPostRPCRequest(%+v)", *p)
}

func (p *DeliveryPostRPCRequest) DeepEqual(ano *DeliveryPostRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IsDelivery) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.PostId) {
		return false
	}
	return true
}

func (p *DeliveryPostRPCRequest) Field1DeepEqual(src int8) bool {

	if p.IsDelivery != src {
		return false
	}
	return true
}
func (p *DeliveryPostRPCRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *DeliveryPostRPCRequest) Field3DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}

type DeliveryPostRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewDeliveryPostRPCResponse() *DeliveryPostRPCResponse {
	return &DeliveryPostRPCResponse{}
}

func (p *DeliveryPostRPCResponse) InitDefault() {
	*p = DeliveryPostRPCResponse{}
}

func (p *DeliveryPostRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *DeliveryPostRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *DeliveryPostRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *DeliveryPostRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_DeliveryPostRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *DeliveryPostRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeliveryPostRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeliveryPostRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *DeliveryPostRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *DeliveryPostRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeliveryPostRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeliveryPostRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeliveryPostRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeliveryPostRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeliveryPostRPCResponse(%+v)", *p)
}

func (p *DeliveryPostRPCResponse) DeepEqual(ano *DeliveryPostRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *DeliveryPostRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *DeliveryPostRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type CollectPostRPCRequest struct {
	IsCollect int8  `thrift:"is_collect,1" frugal:"1,default,byte" json:"is_collect"`
	UserId    int64 `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	PostId    int64 `thrift:"post_id,3" frugal:"3,default,i64" json:"post_id"`
}

func NewCollectPostRPCRequest() *CollectPostRPCRequest {
	return &CollectPostRPCRequest{}
}

func (p *CollectPostRPCRequest) InitDefault() {
	*p = CollectPostRPCRequest{}
}

func (p *CollectPostRPCRequest) GetIsCollect() (v int8) {
	return p.IsCollect
}

func (p *CollectPostRPCRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *CollectPostRPCRequest) GetPostId() (v int64) {
	return p.PostId
}
func (p *CollectPostRPCRequest) SetIsCollect(val int8) {
	p.IsCollect = val
}
func (p *CollectPostRPCRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *CollectPostRPCRequest) SetPostId(val int64) {
	p.PostId = val
}

var fieldIDToName_CollectPostRPCRequest = map[int16]string{
	1: "is_collect",
	2: "user_id",
	3: "post_id",
}

func (p *CollectPostRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CollectPostRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CollectPostRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsCollect = v
	}
	return nil
}

func (p *CollectPostRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *CollectPostRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostId = v
	}
	return nil
}

func (p *CollectPostRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CollectPostRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CollectPostRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_collect", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsCollect); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CollectPostRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CollectPostRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CollectPostRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectPostRPCRequest(%+v)", *p)
}

func (p *CollectPostRPCRequest) DeepEqual(ano *CollectPostRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IsCollect) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.PostId) {
		return false
	}
	return true
}

func (p *CollectPostRPCRequest) Field1DeepEqual(src int8) bool {

	if p.IsCollect != src {
		return false
	}
	return true
}
func (p *CollectPostRPCRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *CollectPostRPCRequest) Field3DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}

type CollectPostRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewCollectPostRPCResponse() *CollectPostRPCResponse {
	return &CollectPostRPCResponse{}
}

func (p *CollectPostRPCResponse) InitDefault() {
	*p = CollectPostRPCResponse{}
}

func (p *CollectPostRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *CollectPostRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *CollectPostRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *CollectPostRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_CollectPostRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *CollectPostRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CollectPostRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CollectPostRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *CollectPostRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *CollectPostRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CollectPostRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CollectPostRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CollectPostRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CollectPostRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CollectPostRPCResponse(%+v)", *p)
}

func (p *CollectPostRPCResponse) DeepEqual(ano *CollectPostRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *CollectPostRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *CollectPostRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type GetDeliveryPostRPCRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewGetDeliveryPostRPCRequest() *GetDeliveryPostRPCRequest {
	return &GetDeliveryPostRPCRequest{}
}

func (p *GetDeliveryPostRPCRequest) InitDefault() {
	*p = GetDeliveryPostRPCRequest{}
}

func (p *GetDeliveryPostRPCRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetDeliveryPostRPCRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_GetDeliveryPostRPCRequest = map[int16]string{
	1: "user_id",
}

func (p *GetDeliveryPostRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDeliveryPostRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDeliveryPostRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetDeliveryPostRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeliveryPostRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDeliveryPostRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDeliveryPostRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDeliveryPostRPCRequest(%+v)", *p)
}

func (p *GetDeliveryPostRPCRequest) DeepEqual(ano *GetDeliveryPostRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *GetDeliveryPostRPCRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type GetDeliveryPostRPCResponse struct {
	Code    int32                     `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string                    `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    []*GetDeliveryPostRPCData `thrift:"data,3" frugal:"3,default,list<GetDeliveryPostRPCData>" json:"data"`
}

func NewGetDeliveryPostRPCResponse() *GetDeliveryPostRPCResponse {
	return &GetDeliveryPostRPCResponse{}
}

func (p *GetDeliveryPostRPCResponse) InitDefault() {
	*p = GetDeliveryPostRPCResponse{}
}

func (p *GetDeliveryPostRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetDeliveryPostRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetDeliveryPostRPCResponse) GetData() (v []*GetDeliveryPostRPCData) {
	return p.Data
}
func (p *GetDeliveryPostRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetDeliveryPostRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetDeliveryPostRPCResponse) SetData(val []*GetDeliveryPostRPCData) {
	p.Data = val
}

var fieldIDToName_GetDeliveryPostRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *GetDeliveryPostRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDeliveryPostRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDeliveryPostRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetDeliveryPostRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetDeliveryPostRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*GetDeliveryPostRPCData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewGetDeliveryPostRPCData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetDeliveryPostRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeliveryPostRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDeliveryPostRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDeliveryPostRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetDeliveryPostRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetDeliveryPostRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDeliveryPostRPCResponse(%+v)", *p)
}

func (p *GetDeliveryPostRPCResponse) DeepEqual(ano *GetDeliveryPostRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetDeliveryPostRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetDeliveryPostRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetDeliveryPostRPCResponse) Field3DeepEqual(src []*GetDeliveryPostRPCData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type GetDeliveryPostRPCData struct {
	PostInformation *PostInfo `thrift:"post_information,1" frugal:"1,default,PostInfo" json:"post_information"`
	ResumeStatus    string    `thrift:"resume_status,2" frugal:"2,default,string" json:"resume_status"`
}

func NewGetDeliveryPostRPCData() *GetDeliveryPostRPCData {
	return &GetDeliveryPostRPCData{}
}

func (p *GetDeliveryPostRPCData) InitDefault() {
	*p = GetDeliveryPostRPCData{}
}

var GetDeliveryPostRPCData_PostInformation_DEFAULT *PostInfo

func (p *GetDeliveryPostRPCData) GetPostInformation() (v *PostInfo) {
	if !p.IsSetPostInformation() {
		return GetDeliveryPostRPCData_PostInformation_DEFAULT
	}
	return p.PostInformation
}

func (p *GetDeliveryPostRPCData) GetResumeStatus() (v string) {
	return p.ResumeStatus
}
func (p *GetDeliveryPostRPCData) SetPostInformation(val *PostInfo) {
	p.PostInformation = val
}
func (p *GetDeliveryPostRPCData) SetResumeStatus(val string) {
	p.ResumeStatus = val
}

var fieldIDToName_GetDeliveryPostRPCData = map[int16]string{
	1: "post_information",
	2: "resume_status",
}

func (p *GetDeliveryPostRPCData) IsSetPostInformation() bool {
	return p.PostInformation != nil
}

func (p *GetDeliveryPostRPCData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDeliveryPostRPCData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDeliveryPostRPCData) ReadField1(iprot thrift.TProtocol) error {
	p.PostInformation = NewPostInfo()
	if err := p.PostInformation.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetDeliveryPostRPCData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ResumeStatus = v
	}
	return nil
}

func (p *GetDeliveryPostRPCData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeliveryPostRPCData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDeliveryPostRPCData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_information", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.PostInformation.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetDeliveryPostRPCData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resume_status", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ResumeStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetDeliveryPostRPCData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDeliveryPostRPCData(%+v)", *p)
}

func (p *GetDeliveryPostRPCData) DeepEqual(ano *GetDeliveryPostRPCData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostInformation) {
		return false
	}
	if !p.Field2DeepEqual(ano.ResumeStatus) {
		return false
	}
	return true
}

func (p *GetDeliveryPostRPCData) Field1DeepEqual(src *PostInfo) bool {

	if !p.PostInformation.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDeliveryPostRPCData) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ResumeStatus, src) != 0 {
		return false
	}
	return true
}

type GetCollectPostRPCRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewGetCollectPostRPCRequest() *GetCollectPostRPCRequest {
	return &GetCollectPostRPCRequest{}
}

func (p *GetCollectPostRPCRequest) InitDefault() {
	*p = GetCollectPostRPCRequest{}
}

func (p *GetCollectPostRPCRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetCollectPostRPCRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_GetCollectPostRPCRequest = map[int16]string{
	1: "user_id",
}

func (p *GetCollectPostRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCollectPostRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCollectPostRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetCollectPostRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCollectPostRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCollectPostRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCollectPostRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCollectPostRPCRequest(%+v)", *p)
}

func (p *GetCollectPostRPCRequest) DeepEqual(ano *GetCollectPostRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *GetCollectPostRPCRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type GetCollectPostRPCResponse struct {
	Code    int32       `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string      `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    []*PostInfo `thrift:"data,3" frugal:"3,default,list<PostInfo>" json:"data"`
}

func NewGetCollectPostRPCResponse() *GetCollectPostRPCResponse {
	return &GetCollectPostRPCResponse{}
}

func (p *GetCollectPostRPCResponse) InitDefault() {
	*p = GetCollectPostRPCResponse{}
}

func (p *GetCollectPostRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetCollectPostRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetCollectPostRPCResponse) GetData() (v []*PostInfo) {
	return p.Data
}
func (p *GetCollectPostRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetCollectPostRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetCollectPostRPCResponse) SetData(val []*PostInfo) {
	p.Data = val
}

var fieldIDToName_GetCollectPostRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *GetCollectPostRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCollectPostRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCollectPostRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetCollectPostRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetCollectPostRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*PostInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewPostInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetCollectPostRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCollectPostRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCollectPostRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCollectPostRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetCollectPostRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetCollectPostRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCollectPostRPCResponse(%+v)", *p)
}

func (p *GetCollectPostRPCResponse) DeepEqual(ano *GetCollectPostRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetCollectPostRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetCollectPostRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetCollectPostRPCResponse) Field3DeepEqual(src []*PostInfo) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type UpdateResumeStatusRPCRequest struct {
	ResumeOperate int8  `thrift:"resume_operate,1" frugal:"1,default,byte" json:"resume_operate"`
	UserId        int64 `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
	PostId        int64 `thrift:"post_id,3" frugal:"3,default,i64" json:"post_id"`
}

func NewUpdateResumeStatusRPCRequest() *UpdateResumeStatusRPCRequest {
	return &UpdateResumeStatusRPCRequest{}
}

func (p *UpdateResumeStatusRPCRequest) InitDefault() {
	*p = UpdateResumeStatusRPCRequest{}
}

func (p *UpdateResumeStatusRPCRequest) GetResumeOperate() (v int8) {
	return p.ResumeOperate
}

func (p *UpdateResumeStatusRPCRequest) GetUserId() (v int64) {
	return p.UserId
}

func (p *UpdateResumeStatusRPCRequest) GetPostId() (v int64) {
	return p.PostId
}
func (p *UpdateResumeStatusRPCRequest) SetResumeOperate(val int8) {
	p.ResumeOperate = val
}
func (p *UpdateResumeStatusRPCRequest) SetUserId(val int64) {
	p.UserId = val
}
func (p *UpdateResumeStatusRPCRequest) SetPostId(val int64) {
	p.PostId = val
}

var fieldIDToName_UpdateResumeStatusRPCRequest = map[int16]string{
	1: "resume_operate",
	2: "user_id",
	3: "post_id",
}

func (p *UpdateResumeStatusRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateResumeStatusRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateResumeStatusRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.ResumeOperate = v
	}
	return nil
}

func (p *UpdateResumeStatusRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *UpdateResumeStatusRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostId = v
	}
	return nil
}

func (p *UpdateResumeStatusRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateResumeStatusRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateResumeStatusRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("resume_operate", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.ResumeOperate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateResumeStatusRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateResumeStatusRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UpdateResumeStatusRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateResumeStatusRPCRequest(%+v)", *p)
}

func (p *UpdateResumeStatusRPCRequest) DeepEqual(ano *UpdateResumeStatusRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ResumeOperate) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.PostId) {
		return false
	}
	return true
}

func (p *UpdateResumeStatusRPCRequest) Field1DeepEqual(src int8) bool {

	if p.ResumeOperate != src {
		return false
	}
	return true
}
func (p *UpdateResumeStatusRPCRequest) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}
func (p *UpdateResumeStatusRPCRequest) Field3DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}

type UpdateResumeStatusRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewUpdateResumeStatusRPCResponse() *UpdateResumeStatusRPCResponse {
	return &UpdateResumeStatusRPCResponse{}
}

func (p *UpdateResumeStatusRPCResponse) InitDefault() {
	*p = UpdateResumeStatusRPCResponse{}
}

func (p *UpdateResumeStatusRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *UpdateResumeStatusRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *UpdateResumeStatusRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *UpdateResumeStatusRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_UpdateResumeStatusRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *UpdateResumeStatusRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateResumeStatusRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateResumeStatusRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *UpdateResumeStatusRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *UpdateResumeStatusRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateResumeStatusRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateResumeStatusRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateResumeStatusRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateResumeStatusRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateResumeStatusRPCResponse(%+v)", *p)
}

func (p *UpdateResumeStatusRPCResponse) DeepEqual(ano *UpdateResumeStatusRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *UpdateResumeStatusRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *UpdateResumeStatusRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type DeleteResumeRelativeInfoByHRIdRPCRequest struct {
	HrId int64 `thrift:"hr_id,1" frugal:"1,default,i64" json:"hr_id"`
}

func NewDeleteResumeRelativeInfoByHRIdRPCRequest() *DeleteResumeRelativeInfoByHRIdRPCRequest {
	return &DeleteResumeRelativeInfoByHRIdRPCRequest{}
}

func (p *DeleteResumeRelativeInfoByHRIdRPCRequest) InitDefault() {
	*p = DeleteResumeRelativeInfoByHRIdRPCRequest{}
}

func (p *DeleteResumeRelativeInfoByHRIdRPCRequest) GetHrId() (v int64) {
	return p.HrId
}
func (p *DeleteResumeRelativeInfoByHRIdRPCRequest) SetHrId(val int64) {
	p.HrId = val
}

var fieldIDToName_DeleteResumeRelativeInfoByHRIdRPCRequest = map[int16]string{
	1: "hr_id",
}

func (p *DeleteResumeRelativeInfoByHRIdRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteResumeRelativeInfoByHRIdRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByHRIdRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.HrId = v
	}
	return nil
}

func (p *DeleteResumeRelativeInfoByHRIdRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByHRIdRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByHRIdRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("hr_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.HrId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByHRIdRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteResumeRelativeInfoByHRIdRPCRequest(%+v)", *p)
}

func (p *DeleteResumeRelativeInfoByHRIdRPCRequest) DeepEqual(ano *DeleteResumeRelativeInfoByHRIdRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HrId) {
		return false
	}
	return true
}

func (p *DeleteResumeRelativeInfoByHRIdRPCRequest) Field1DeepEqual(src int64) bool {

	if p.HrId != src {
		return false
	}
	return true
}

type DeleteResumeRelativeInfoByHRIdRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewDeleteResumeRelativeInfoByHRIdRPCResponse() *DeleteResumeRelativeInfoByHRIdRPCResponse {
	return &DeleteResumeRelativeInfoByHRIdRPCResponse{}
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) InitDefault() {
	*p = DeleteResumeRelativeInfoByHRIdRPCResponse{}
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_DeleteResumeRelativeInfoByHRIdRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteResumeRelativeInfoByHRIdRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByHRIdRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteResumeRelativeInfoByHRIdRPCResponse(%+v)", *p)
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) DeepEqual(ano *DeleteResumeRelativeInfoByHRIdRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *DeleteResumeRelativeInfoByHRIdRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type DeleteResumeRelativeInfoByDepartmentIdRPCRequest struct {
	DepartmentId int64 `thrift:"department_id,1" frugal:"1,default,i64" json:"department_id"`
}

func NewDeleteResumeRelativeInfoByDepartmentIdRPCRequest() *DeleteResumeRelativeInfoByDepartmentIdRPCRequest {
	return &DeleteResumeRelativeInfoByDepartmentIdRPCRequest{}
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) InitDefault() {
	*p = DeleteResumeRelativeInfoByDepartmentIdRPCRequest{}
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) GetDepartmentId() (v int64) {
	return p.DepartmentId
}
func (p *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) SetDepartmentId(val int64) {
	p.DepartmentId = val
}

var fieldIDToName_DeleteResumeRelativeInfoByDepartmentIdRPCRequest = map[int16]string{
	1: "department_id",
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteResumeRelativeInfoByDepartmentIdRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.DepartmentId = v
	}
	return nil
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByDepartmentIdRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("department_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DepartmentId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteResumeRelativeInfoByDepartmentIdRPCRequest(%+v)", *p)
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) DeepEqual(ano *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DepartmentId) {
		return false
	}
	return true
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) Field1DeepEqual(src int64) bool {

	if p.DepartmentId != src {
		return false
	}
	return true
}

type DeleteResumeRelativeInfoByDepartmentIdRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewDeleteResumeRelativeInfoByDepartmentIdRPCResponse() *DeleteResumeRelativeInfoByDepartmentIdRPCResponse {
	return &DeleteResumeRelativeInfoByDepartmentIdRPCResponse{}
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) InitDefault() {
	*p = DeleteResumeRelativeInfoByDepartmentIdRPCResponse{}
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_DeleteResumeRelativeInfoByDepartmentIdRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteResumeRelativeInfoByDepartmentIdRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByDepartmentIdRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteResumeRelativeInfoByDepartmentIdRPCResponse(%+v)", *p)
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) DeepEqual(ano *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest struct {
	PostCategoryIdList []int64 `thrift:"post_category_id_list,1" frugal:"1,default,list<i64>" json:"post_category_id_list"`
}

func NewDeleteResumeRelativeInfoByPostCategoryIdListRPCRequest() *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest {
	return &DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest{}
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) InitDefault() {
	*p = DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest{}
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) GetPostCategoryIdList() (v []int64) {
	return p.PostCategoryIdList
}
func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) SetPostCategoryIdList(val []int64) {
	p.PostCategoryIdList = val
}

var fieldIDToName_DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest = map[int16]string{
	1: "post_category_id_list",
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.PostCategoryIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.PostCategoryIdList = append(p.PostCategoryIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_category_id_list", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.PostCategoryIdList)); err != nil {
		return err
	}
	for _, v := range p.PostCategoryIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest(%+v)", *p)
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) DeepEqual(ano *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostCategoryIdList) {
		return false
	}
	return true
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) Field1DeepEqual(src []int64) bool {

	if len(p.PostCategoryIdList) != len(src) {
		return false
	}
	for i, v := range p.PostCategoryIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewDeleteResumeRelativeInfoByPostCategoryIdListRPCResponse() *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse {
	return &DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse{}
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) InitDefault() {
	*p = DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse{}
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse(%+v)", *p)
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) DeepEqual(ano *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type GetUserIdByPostIdRPCRequest struct {
	IsTalentPool int8  `thrift:"is_talent_pool,1" frugal:"1,default,i8" json:"is_talent_pool"`
	PostId       int64 `thrift:"post_id,2" frugal:"2,default,i64" json:"post_id"`
	Limit        int32 `thrift:"limit,3" frugal:"3,default,i32" json:"limit"`
	Offset       int32 `thrift:"offset,4" frugal:"4,default,i32" json:"offset"`
}

func NewGetUserIdByPostIdRPCRequest() *GetUserIdByPostIdRPCRequest {
	return &GetUserIdByPostIdRPCRequest{}
}

func (p *GetUserIdByPostIdRPCRequest) InitDefault() {
	*p = GetUserIdByPostIdRPCRequest{}
}

func (p *GetUserIdByPostIdRPCRequest) GetIsTalentPool() (v int8) {
	return p.IsTalentPool
}

func (p *GetUserIdByPostIdRPCRequest) GetPostId() (v int64) {
	return p.PostId
}

func (p *GetUserIdByPostIdRPCRequest) GetLimit() (v int32) {
	return p.Limit
}

func (p *GetUserIdByPostIdRPCRequest) GetOffset() (v int32) {
	return p.Offset
}
func (p *GetUserIdByPostIdRPCRequest) SetIsTalentPool(val int8) {
	p.IsTalentPool = val
}
func (p *GetUserIdByPostIdRPCRequest) SetPostId(val int64) {
	p.PostId = val
}
func (p *GetUserIdByPostIdRPCRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *GetUserIdByPostIdRPCRequest) SetOffset(val int32) {
	p.Offset = val
}

var fieldIDToName_GetUserIdByPostIdRPCRequest = map[int16]string{
	1: "is_talent_pool",
	2: "post_id",
	3: "limit",
	4: "offset",
}

func (p *GetUserIdByPostIdRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserIdByPostIdRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsTalentPool = v
	}
	return nil
}

func (p *GetUserIdByPostIdRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostId = v
	}
	return nil
}

func (p *GetUserIdByPostIdRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetUserIdByPostIdRPCRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Offset = v
	}
	return nil
}

func (p *GetUserIdByPostIdRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserIdByPostIdRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_talent_pool", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsTalentPool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("offset", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserIdByPostIdRPCRequest(%+v)", *p)
}

func (p *GetUserIdByPostIdRPCRequest) DeepEqual(ano *GetUserIdByPostIdRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IsTalentPool) {
		return false
	}
	if !p.Field2DeepEqual(ano.PostId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field4DeepEqual(ano.Offset) {
		return false
	}
	return true
}

func (p *GetUserIdByPostIdRPCRequest) Field1DeepEqual(src int8) bool {

	if p.IsTalentPool != src {
		return false
	}
	return true
}
func (p *GetUserIdByPostIdRPCRequest) Field2DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}
func (p *GetUserIdByPostIdRPCRequest) Field3DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *GetUserIdByPostIdRPCRequest) Field4DeepEqual(src int32) bool {

	if p.Offset != src {
		return false
	}
	return true
}

type GetUserIdByPostIdRPCResponse struct {
	Code       int32   `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message    string  `thrift:"message,2" frugal:"2,default,string" json:"message"`
	UserIdList []int64 `thrift:"user_id_list,3" frugal:"3,default,list<i64>" json:"user_id_list"`
}

func NewGetUserIdByPostIdRPCResponse() *GetUserIdByPostIdRPCResponse {
	return &GetUserIdByPostIdRPCResponse{}
}

func (p *GetUserIdByPostIdRPCResponse) InitDefault() {
	*p = GetUserIdByPostIdRPCResponse{}
}

func (p *GetUserIdByPostIdRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetUserIdByPostIdRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetUserIdByPostIdRPCResponse) GetUserIdList() (v []int64) {
	return p.UserIdList
}
func (p *GetUserIdByPostIdRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetUserIdByPostIdRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetUserIdByPostIdRPCResponse) SetUserIdList(val []int64) {
	p.UserIdList = val
}

var fieldIDToName_GetUserIdByPostIdRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "user_id_list",
}

func (p *GetUserIdByPostIdRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetUserIdByPostIdRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetUserIdByPostIdRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetUserIdByPostIdRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.UserIdList = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.UserIdList = append(p.UserIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetUserIdByPostIdRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserIdByPostIdRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.UserIdList)); err != nil {
		return err
	}
	for _, v := range p.UserIdList {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetUserIdByPostIdRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetUserIdByPostIdRPCResponse(%+v)", *p)
}

func (p *GetUserIdByPostIdRPCResponse) DeepEqual(ano *GetUserIdByPostIdRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.UserIdList) {
		return false
	}
	return true
}

func (p *GetUserIdByPostIdRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetUserIdByPostIdRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetUserIdByPostIdRPCResponse) Field3DeepEqual(src []int64) bool {

	if len(p.UserIdList) != len(src) {
		return false
	}
	for i, v := range p.UserIdList {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type DeletePostCityByCityIdRPCRequest struct {
	CityId int64 `thrift:"city_id,1" frugal:"1,default,i64" json:"city_id"`
}

func NewDeletePostCityByCityIdRPCRequest() *DeletePostCityByCityIdRPCRequest {
	return &DeletePostCityByCityIdRPCRequest{}
}

func (p *DeletePostCityByCityIdRPCRequest) InitDefault() {
	*p = DeletePostCityByCityIdRPCRequest{}
}

func (p *DeletePostCityByCityIdRPCRequest) GetCityId() (v int64) {
	return p.CityId
}
func (p *DeletePostCityByCityIdRPCRequest) SetCityId(val int64) {
	p.CityId = val
}

var fieldIDToName_DeletePostCityByCityIdRPCRequest = map[int16]string{
	1: "city_id",
}

func (p *DeletePostCityByCityIdRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePostCityByCityIdRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeletePostCityByCityIdRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.CityId = v
	}
	return nil
}

func (p *DeletePostCityByCityIdRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostCityByCityIdRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePostCityByCityIdRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.CityId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeletePostCityByCityIdRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePostCityByCityIdRPCRequest(%+v)", *p)
}

func (p *DeletePostCityByCityIdRPCRequest) DeepEqual(ano *DeletePostCityByCityIdRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CityId) {
		return false
	}
	return true
}

func (p *DeletePostCityByCityIdRPCRequest) Field1DeepEqual(src int64) bool {

	if p.CityId != src {
		return false
	}
	return true
}

type DeletePostCityByCityIdRPCResposne struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewDeletePostCityByCityIdRPCResposne() *DeletePostCityByCityIdRPCResposne {
	return &DeletePostCityByCityIdRPCResposne{}
}

func (p *DeletePostCityByCityIdRPCResposne) InitDefault() {
	*p = DeletePostCityByCityIdRPCResposne{}
}

func (p *DeletePostCityByCityIdRPCResposne) GetCode() (v int32) {
	return p.Code
}

func (p *DeletePostCityByCityIdRPCResposne) GetMessage() (v string) {
	return p.Message
}
func (p *DeletePostCityByCityIdRPCResposne) SetCode(val int32) {
	p.Code = val
}
func (p *DeletePostCityByCityIdRPCResposne) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_DeletePostCityByCityIdRPCResposne = map[int16]string{
	1: "code",
	2: "message",
}

func (p *DeletePostCityByCityIdRPCResposne) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePostCityByCityIdRPCResposne[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeletePostCityByCityIdRPCResposne) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *DeletePostCityByCityIdRPCResposne) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *DeletePostCityByCityIdRPCResposne) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostCityByCityIdRPCResposne"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePostCityByCityIdRPCResposne) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DeletePostCityByCityIdRPCResposne) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DeletePostCityByCityIdRPCResposne) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePostCityByCityIdRPCResposne(%+v)", *p)
}

func (p *DeletePostCityByCityIdRPCResposne) DeepEqual(ano *DeletePostCityByCityIdRPCResposne) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *DeletePostCityByCityIdRPCResposne) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *DeletePostCityByCityIdRPCResposne) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type PostRPCService interface {
	AppendPost(ctx context.Context, request *AppendPostRPCRequest) (r *AppendPostRPCResponse, err error)

	UpdatePost(ctx context.Context, request *UpdatePostRPCRequest) (r *UpdatePostRPCResponse, err error)

	DeletePost(ctx context.Context, request *DeletePostRPCRequest) (r *DeletePostRPCResponse, err error)

	GetsPostInUser(ctx context.Context, request *GetsPostInUserRPCRequest) (r *GetsPostInUserRPCResponse, err error)

	GetsPostInHR(ctx context.Context, request *GetsPostInHRRPCRequest) (r *GetsPostInHRRPCResponse, err error)

	DeliveryPost(ctx context.Context, request *DeliveryPostRPCRequest) (r *DeliveryPostRPCResponse, err error)

	CollectPost(ctx context.Context, request *CollectPostRPCRequest) (r *CollectPostRPCResponse, err error)

	GetDeliveryPost(ctx context.Context, request *GetDeliveryPostRPCRequest) (r *GetDeliveryPostRPCResponse, err error)

	GetCollectPost(ctx context.Context, request *GetCollectPostRPCRequest) (r *GetCollectPostRPCResponse, err error)

	UpdateResumeStatus(ctx context.Context, request *UpdateResumeStatusRPCRequest) (r *UpdateResumeStatusRPCResponse, err error)

	GetUserIdByPostId(ctx context.Context, request *GetUserIdByPostIdRPCRequest) (r *GetUserIdByPostIdRPCResponse, err error)

	DeleteResumeRelativeInfoByHRId(ctx context.Context, request *DeleteResumeRelativeInfoByHRIdRPCRequest) (r *DeleteResumeRelativeInfoByHRIdRPCResponse, err error)

	DeleteResumeRelativeInfoByDepartmentId(ctx context.Context, request *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) (r *DeleteResumeRelativeInfoByDepartmentIdRPCResponse, err error)

	DeleteResumeRelativeInfoByPostCategoryIdList(ctx context.Context, request *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) (r *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse, err error)

	DeletePostCityByCityId(ctx context.Context, request *DeletePostCityByCityIdRPCRequest) (r *DeletePostCityByCityIdRPCResposne, err error)
}

type PostRPCServiceClient struct {
	c thrift.TClient
}

func NewPostRPCServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PostRPCServiceClient {
	return &PostRPCServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewPostRPCServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PostRPCServiceClient {
	return &PostRPCServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewPostRPCServiceClient(c thrift.TClient) *PostRPCServiceClient {
	return &PostRPCServiceClient{
		c: c,
	}
}

func (p *PostRPCServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *PostRPCServiceClient) AppendPost(ctx context.Context, request *AppendPostRPCRequest) (r *AppendPostRPCResponse, err error) {
	var _args PostRPCServiceAppendPostArgs
	_args.Request = request
	var _result PostRPCServiceAppendPostResult
	if err = p.Client_().Call(ctx, "AppendPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) UpdatePost(ctx context.Context, request *UpdatePostRPCRequest) (r *UpdatePostRPCResponse, err error) {
	var _args PostRPCServiceUpdatePostArgs
	_args.Request = request
	var _result PostRPCServiceUpdatePostResult
	if err = p.Client_().Call(ctx, "UpdatePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) DeletePost(ctx context.Context, request *DeletePostRPCRequest) (r *DeletePostRPCResponse, err error) {
	var _args PostRPCServiceDeletePostArgs
	_args.Request = request
	var _result PostRPCServiceDeletePostResult
	if err = p.Client_().Call(ctx, "DeletePost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) GetsPostInUser(ctx context.Context, request *GetsPostInUserRPCRequest) (r *GetsPostInUserRPCResponse, err error) {
	var _args PostRPCServiceGetsPostInUserArgs
	_args.Request = request
	var _result PostRPCServiceGetsPostInUserResult
	if err = p.Client_().Call(ctx, "GetsPostInUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) GetsPostInHR(ctx context.Context, request *GetsPostInHRRPCRequest) (r *GetsPostInHRRPCResponse, err error) {
	var _args PostRPCServiceGetsPostInHRArgs
	_args.Request = request
	var _result PostRPCServiceGetsPostInHRResult
	if err = p.Client_().Call(ctx, "GetsPostInHR", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) DeliveryPost(ctx context.Context, request *DeliveryPostRPCRequest) (r *DeliveryPostRPCResponse, err error) {
	var _args PostRPCServiceDeliveryPostArgs
	_args.Request = request
	var _result PostRPCServiceDeliveryPostResult
	if err = p.Client_().Call(ctx, "DeliveryPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) CollectPost(ctx context.Context, request *CollectPostRPCRequest) (r *CollectPostRPCResponse, err error) {
	var _args PostRPCServiceCollectPostArgs
	_args.Request = request
	var _result PostRPCServiceCollectPostResult
	if err = p.Client_().Call(ctx, "CollectPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) GetDeliveryPost(ctx context.Context, request *GetDeliveryPostRPCRequest) (r *GetDeliveryPostRPCResponse, err error) {
	var _args PostRPCServiceGetDeliveryPostArgs
	_args.Request = request
	var _result PostRPCServiceGetDeliveryPostResult
	if err = p.Client_().Call(ctx, "GetDeliveryPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) GetCollectPost(ctx context.Context, request *GetCollectPostRPCRequest) (r *GetCollectPostRPCResponse, err error) {
	var _args PostRPCServiceGetCollectPostArgs
	_args.Request = request
	var _result PostRPCServiceGetCollectPostResult
	if err = p.Client_().Call(ctx, "GetCollectPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) UpdateResumeStatus(ctx context.Context, request *UpdateResumeStatusRPCRequest) (r *UpdateResumeStatusRPCResponse, err error) {
	var _args PostRPCServiceUpdateResumeStatusArgs
	_args.Request = request
	var _result PostRPCServiceUpdateResumeStatusResult
	if err = p.Client_().Call(ctx, "UpdateResumeStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) GetUserIdByPostId(ctx context.Context, request *GetUserIdByPostIdRPCRequest) (r *GetUserIdByPostIdRPCResponse, err error) {
	var _args PostRPCServiceGetUserIdByPostIdArgs
	_args.Request = request
	var _result PostRPCServiceGetUserIdByPostIdResult
	if err = p.Client_().Call(ctx, "GetUserIdByPostId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) DeleteResumeRelativeInfoByHRId(ctx context.Context, request *DeleteResumeRelativeInfoByHRIdRPCRequest) (r *DeleteResumeRelativeInfoByHRIdRPCResponse, err error) {
	var _args PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs
	_args.Request = request
	var _result PostRPCServiceDeleteResumeRelativeInfoByHRIdResult
	if err = p.Client_().Call(ctx, "DeleteResumeRelativeInfoByHRId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) DeleteResumeRelativeInfoByDepartmentId(ctx context.Context, request *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) (r *DeleteResumeRelativeInfoByDepartmentIdRPCResponse, err error) {
	var _args PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs
	_args.Request = request
	var _result PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult
	if err = p.Client_().Call(ctx, "DeleteResumeRelativeInfoByDepartmentId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) DeleteResumeRelativeInfoByPostCategoryIdList(ctx context.Context, request *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) (r *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse, err error) {
	var _args PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs
	_args.Request = request
	var _result PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult
	if err = p.Client_().Call(ctx, "DeleteResumeRelativeInfoByPostCategoryIdList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PostRPCServiceClient) DeletePostCityByCityId(ctx context.Context, request *DeletePostCityByCityIdRPCRequest) (r *DeletePostCityByCityIdRPCResposne, err error) {
	var _args PostRPCServiceDeletePostCityByCityIdArgs
	_args.Request = request
	var _result PostRPCServiceDeletePostCityByCityIdResult
	if err = p.Client_().Call(ctx, "DeletePostCityByCityId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PostRPCServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PostRPCService
}

func (p *PostRPCServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PostRPCServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PostRPCServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPostRPCServiceProcessor(handler PostRPCService) *PostRPCServiceProcessor {
	self := &PostRPCServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("AppendPost", &postRPCServiceProcessorAppendPost{handler: handler})
	self.AddToProcessorMap("UpdatePost", &postRPCServiceProcessorUpdatePost{handler: handler})
	self.AddToProcessorMap("DeletePost", &postRPCServiceProcessorDeletePost{handler: handler})
	self.AddToProcessorMap("GetsPostInUser", &postRPCServiceProcessorGetsPostInUser{handler: handler})
	self.AddToProcessorMap("GetsPostInHR", &postRPCServiceProcessorGetsPostInHR{handler: handler})
	self.AddToProcessorMap("DeliveryPost", &postRPCServiceProcessorDeliveryPost{handler: handler})
	self.AddToProcessorMap("CollectPost", &postRPCServiceProcessorCollectPost{handler: handler})
	self.AddToProcessorMap("GetDeliveryPost", &postRPCServiceProcessorGetDeliveryPost{handler: handler})
	self.AddToProcessorMap("GetCollectPost", &postRPCServiceProcessorGetCollectPost{handler: handler})
	self.AddToProcessorMap("UpdateResumeStatus", &postRPCServiceProcessorUpdateResumeStatus{handler: handler})
	self.AddToProcessorMap("GetUserIdByPostId", &postRPCServiceProcessorGetUserIdByPostId{handler: handler})
	self.AddToProcessorMap("DeleteResumeRelativeInfoByHRId", &postRPCServiceProcessorDeleteResumeRelativeInfoByHRId{handler: handler})
	self.AddToProcessorMap("DeleteResumeRelativeInfoByDepartmentId", &postRPCServiceProcessorDeleteResumeRelativeInfoByDepartmentId{handler: handler})
	self.AddToProcessorMap("DeleteResumeRelativeInfoByPostCategoryIdList", &postRPCServiceProcessorDeleteResumeRelativeInfoByPostCategoryIdList{handler: handler})
	self.AddToProcessorMap("DeletePostCityByCityId", &postRPCServiceProcessorDeletePostCityByCityId{handler: handler})
	return self
}
func (p *PostRPCServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type postRPCServiceProcessorAppendPost struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorAppendPost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceAppendPostArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AppendPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceAppendPostResult{}
	var retval *AppendPostRPCResponse
	if retval, err2 = p.handler.AppendPost(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AppendPost: "+err2.Error())
		oprot.WriteMessageBegin("AppendPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("AppendPost", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorUpdatePost struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorUpdatePost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceUpdatePostArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdatePost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceUpdatePostResult{}
	var retval *UpdatePostRPCResponse
	if retval, err2 = p.handler.UpdatePost(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePost: "+err2.Error())
		oprot.WriteMessageBegin("UpdatePost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdatePost", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorDeletePost struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorDeletePost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceDeletePostArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceDeletePostResult{}
	var retval *DeletePostRPCResponse
	if retval, err2 = p.handler.DeletePost(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePost: "+err2.Error())
		oprot.WriteMessageBegin("DeletePost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePost", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorGetsPostInUser struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorGetsPostInUser) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceGetsPostInUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetsPostInUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceGetsPostInUserResult{}
	var retval *GetsPostInUserRPCResponse
	if retval, err2 = p.handler.GetsPostInUser(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetsPostInUser: "+err2.Error())
		oprot.WriteMessageBegin("GetsPostInUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetsPostInUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorGetsPostInHR struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorGetsPostInHR) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceGetsPostInHRArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetsPostInHR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceGetsPostInHRResult{}
	var retval *GetsPostInHRRPCResponse
	if retval, err2 = p.handler.GetsPostInHR(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetsPostInHR: "+err2.Error())
		oprot.WriteMessageBegin("GetsPostInHR", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetsPostInHR", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorDeliveryPost struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorDeliveryPost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceDeliveryPostArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeliveryPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceDeliveryPostResult{}
	var retval *DeliveryPostRPCResponse
	if retval, err2 = p.handler.DeliveryPost(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeliveryPost: "+err2.Error())
		oprot.WriteMessageBegin("DeliveryPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeliveryPost", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorCollectPost struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorCollectPost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceCollectPostArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CollectPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceCollectPostResult{}
	var retval *CollectPostRPCResponse
	if retval, err2 = p.handler.CollectPost(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CollectPost: "+err2.Error())
		oprot.WriteMessageBegin("CollectPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CollectPost", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorGetDeliveryPost struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorGetDeliveryPost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceGetDeliveryPostArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDeliveryPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceGetDeliveryPostResult{}
	var retval *GetDeliveryPostRPCResponse
	if retval, err2 = p.handler.GetDeliveryPost(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDeliveryPost: "+err2.Error())
		oprot.WriteMessageBegin("GetDeliveryPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDeliveryPost", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorGetCollectPost struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorGetCollectPost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceGetCollectPostArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCollectPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceGetCollectPostResult{}
	var retval *GetCollectPostRPCResponse
	if retval, err2 = p.handler.GetCollectPost(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCollectPost: "+err2.Error())
		oprot.WriteMessageBegin("GetCollectPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCollectPost", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorUpdateResumeStatus struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorUpdateResumeStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceUpdateResumeStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateResumeStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceUpdateResumeStatusResult{}
	var retval *UpdateResumeStatusRPCResponse
	if retval, err2 = p.handler.UpdateResumeStatus(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateResumeStatus: "+err2.Error())
		oprot.WriteMessageBegin("UpdateResumeStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateResumeStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorGetUserIdByPostId struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorGetUserIdByPostId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceGetUserIdByPostIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetUserIdByPostId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceGetUserIdByPostIdResult{}
	var retval *GetUserIdByPostIdRPCResponse
	if retval, err2 = p.handler.GetUserIdByPostId(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetUserIdByPostId: "+err2.Error())
		oprot.WriteMessageBegin("GetUserIdByPostId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetUserIdByPostId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorDeleteResumeRelativeInfoByHRId struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorDeleteResumeRelativeInfoByHRId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteResumeRelativeInfoByHRId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceDeleteResumeRelativeInfoByHRIdResult{}
	var retval *DeleteResumeRelativeInfoByHRIdRPCResponse
	if retval, err2 = p.handler.DeleteResumeRelativeInfoByHRId(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteResumeRelativeInfoByHRId: "+err2.Error())
		oprot.WriteMessageBegin("DeleteResumeRelativeInfoByHRId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteResumeRelativeInfoByHRId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorDeleteResumeRelativeInfoByDepartmentId struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorDeleteResumeRelativeInfoByDepartmentId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteResumeRelativeInfoByDepartmentId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult{}
	var retval *DeleteResumeRelativeInfoByDepartmentIdRPCResponse
	if retval, err2 = p.handler.DeleteResumeRelativeInfoByDepartmentId(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteResumeRelativeInfoByDepartmentId: "+err2.Error())
		oprot.WriteMessageBegin("DeleteResumeRelativeInfoByDepartmentId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteResumeRelativeInfoByDepartmentId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorDeleteResumeRelativeInfoByPostCategoryIdList struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorDeleteResumeRelativeInfoByPostCategoryIdList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteResumeRelativeInfoByPostCategoryIdList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult{}
	var retval *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse
	if retval, err2 = p.handler.DeleteResumeRelativeInfoByPostCategoryIdList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteResumeRelativeInfoByPostCategoryIdList: "+err2.Error())
		oprot.WriteMessageBegin("DeleteResumeRelativeInfoByPostCategoryIdList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteResumeRelativeInfoByPostCategoryIdList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type postRPCServiceProcessorDeletePostCityByCityId struct {
	handler PostRPCService
}

func (p *postRPCServiceProcessorDeletePostCityByCityId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PostRPCServiceDeletePostCityByCityIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePostCityByCityId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PostRPCServiceDeletePostCityByCityIdResult{}
	var retval *DeletePostCityByCityIdRPCResposne
	if retval, err2 = p.handler.DeletePostCityByCityId(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePostCityByCityId: "+err2.Error())
		oprot.WriteMessageBegin("DeletePostCityByCityId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePostCityByCityId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PostRPCServiceAppendPostArgs struct {
	Request *AppendPostRPCRequest `thrift:"request,1" frugal:"1,default,AppendPostRPCRequest" json:"request"`
}

func NewPostRPCServiceAppendPostArgs() *PostRPCServiceAppendPostArgs {
	return &PostRPCServiceAppendPostArgs{}
}

func (p *PostRPCServiceAppendPostArgs) InitDefault() {
	*p = PostRPCServiceAppendPostArgs{}
}

var PostRPCServiceAppendPostArgs_Request_DEFAULT *AppendPostRPCRequest

func (p *PostRPCServiceAppendPostArgs) GetRequest() (v *AppendPostRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceAppendPostArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceAppendPostArgs) SetRequest(val *AppendPostRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceAppendPostArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceAppendPostArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceAppendPostArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceAppendPostArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceAppendPostArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewAppendPostRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceAppendPostArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendPost_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceAppendPostArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceAppendPostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceAppendPostArgs(%+v)", *p)
}

func (p *PostRPCServiceAppendPostArgs) DeepEqual(ano *PostRPCServiceAppendPostArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceAppendPostArgs) Field1DeepEqual(src *AppendPostRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceAppendPostResult struct {
	Success *AppendPostRPCResponse `thrift:"success,0,optional" frugal:"0,optional,AppendPostRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceAppendPostResult() *PostRPCServiceAppendPostResult {
	return &PostRPCServiceAppendPostResult{}
}

func (p *PostRPCServiceAppendPostResult) InitDefault() {
	*p = PostRPCServiceAppendPostResult{}
}

var PostRPCServiceAppendPostResult_Success_DEFAULT *AppendPostRPCResponse

func (p *PostRPCServiceAppendPostResult) GetSuccess() (v *AppendPostRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceAppendPostResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceAppendPostResult) SetSuccess(x interface{}) {
	p.Success = x.(*AppendPostRPCResponse)
}

var fieldIDToName_PostRPCServiceAppendPostResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceAppendPostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceAppendPostResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceAppendPostResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceAppendPostResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewAppendPostRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceAppendPostResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AppendPost_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceAppendPostResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceAppendPostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceAppendPostResult(%+v)", *p)
}

func (p *PostRPCServiceAppendPostResult) DeepEqual(ano *PostRPCServiceAppendPostResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceAppendPostResult) Field0DeepEqual(src *AppendPostRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceUpdatePostArgs struct {
	Request *UpdatePostRPCRequest `thrift:"request,1" frugal:"1,default,UpdatePostRPCRequest" json:"request"`
}

func NewPostRPCServiceUpdatePostArgs() *PostRPCServiceUpdatePostArgs {
	return &PostRPCServiceUpdatePostArgs{}
}

func (p *PostRPCServiceUpdatePostArgs) InitDefault() {
	*p = PostRPCServiceUpdatePostArgs{}
}

var PostRPCServiceUpdatePostArgs_Request_DEFAULT *UpdatePostRPCRequest

func (p *PostRPCServiceUpdatePostArgs) GetRequest() (v *UpdatePostRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceUpdatePostArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceUpdatePostArgs) SetRequest(val *UpdatePostRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceUpdatePostArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceUpdatePostArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceUpdatePostArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceUpdatePostArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceUpdatePostArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewUpdatePostRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceUpdatePostArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePost_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceUpdatePostArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceUpdatePostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceUpdatePostArgs(%+v)", *p)
}

func (p *PostRPCServiceUpdatePostArgs) DeepEqual(ano *PostRPCServiceUpdatePostArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceUpdatePostArgs) Field1DeepEqual(src *UpdatePostRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceUpdatePostResult struct {
	Success *UpdatePostRPCResponse `thrift:"success,0,optional" frugal:"0,optional,UpdatePostRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceUpdatePostResult() *PostRPCServiceUpdatePostResult {
	return &PostRPCServiceUpdatePostResult{}
}

func (p *PostRPCServiceUpdatePostResult) InitDefault() {
	*p = PostRPCServiceUpdatePostResult{}
}

var PostRPCServiceUpdatePostResult_Success_DEFAULT *UpdatePostRPCResponse

func (p *PostRPCServiceUpdatePostResult) GetSuccess() (v *UpdatePostRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceUpdatePostResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceUpdatePostResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdatePostRPCResponse)
}

var fieldIDToName_PostRPCServiceUpdatePostResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceUpdatePostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceUpdatePostResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceUpdatePostResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceUpdatePostResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdatePostRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceUpdatePostResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePost_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceUpdatePostResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceUpdatePostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceUpdatePostResult(%+v)", *p)
}

func (p *PostRPCServiceUpdatePostResult) DeepEqual(ano *PostRPCServiceUpdatePostResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceUpdatePostResult) Field0DeepEqual(src *UpdatePostRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeletePostArgs struct {
	Request *DeletePostRPCRequest `thrift:"request,1" frugal:"1,default,DeletePostRPCRequest" json:"request"`
}

func NewPostRPCServiceDeletePostArgs() *PostRPCServiceDeletePostArgs {
	return &PostRPCServiceDeletePostArgs{}
}

func (p *PostRPCServiceDeletePostArgs) InitDefault() {
	*p = PostRPCServiceDeletePostArgs{}
}

var PostRPCServiceDeletePostArgs_Request_DEFAULT *DeletePostRPCRequest

func (p *PostRPCServiceDeletePostArgs) GetRequest() (v *DeletePostRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceDeletePostArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceDeletePostArgs) SetRequest(val *DeletePostRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceDeletePostArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceDeletePostArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceDeletePostArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeletePostArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeletePostArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewDeletePostRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeletePostArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePost_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeletePostArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceDeletePostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeletePostArgs(%+v)", *p)
}

func (p *PostRPCServiceDeletePostArgs) DeepEqual(ano *PostRPCServiceDeletePostArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeletePostArgs) Field1DeepEqual(src *DeletePostRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeletePostResult struct {
	Success *DeletePostRPCResponse `thrift:"success,0,optional" frugal:"0,optional,DeletePostRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceDeletePostResult() *PostRPCServiceDeletePostResult {
	return &PostRPCServiceDeletePostResult{}
}

func (p *PostRPCServiceDeletePostResult) InitDefault() {
	*p = PostRPCServiceDeletePostResult{}
}

var PostRPCServiceDeletePostResult_Success_DEFAULT *DeletePostRPCResponse

func (p *PostRPCServiceDeletePostResult) GetSuccess() (v *DeletePostRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceDeletePostResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceDeletePostResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeletePostRPCResponse)
}

var fieldIDToName_PostRPCServiceDeletePostResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceDeletePostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceDeletePostResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeletePostResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeletePostResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeletePostRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeletePostResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePost_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeletePostResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceDeletePostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeletePostResult(%+v)", *p)
}

func (p *PostRPCServiceDeletePostResult) DeepEqual(ano *PostRPCServiceDeletePostResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeletePostResult) Field0DeepEqual(src *DeletePostRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceGetsPostInUserArgs struct {
	Request *GetsPostInUserRPCRequest `thrift:"request,1" frugal:"1,default,GetsPostInUserRPCRequest" json:"request"`
}

func NewPostRPCServiceGetsPostInUserArgs() *PostRPCServiceGetsPostInUserArgs {
	return &PostRPCServiceGetsPostInUserArgs{}
}

func (p *PostRPCServiceGetsPostInUserArgs) InitDefault() {
	*p = PostRPCServiceGetsPostInUserArgs{}
}

var PostRPCServiceGetsPostInUserArgs_Request_DEFAULT *GetsPostInUserRPCRequest

func (p *PostRPCServiceGetsPostInUserArgs) GetRequest() (v *GetsPostInUserRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceGetsPostInUserArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceGetsPostInUserArgs) SetRequest(val *GetsPostInUserRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceGetsPostInUserArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceGetsPostInUserArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceGetsPostInUserArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceGetsPostInUserArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInUserArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetsPostInUserRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceGetsPostInUserArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostInUser_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceGetsPostInUserArgs(%+v)", *p)
}

func (p *PostRPCServiceGetsPostInUserArgs) DeepEqual(ano *PostRPCServiceGetsPostInUserArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceGetsPostInUserArgs) Field1DeepEqual(src *GetsPostInUserRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceGetsPostInUserResult struct {
	Success *GetsPostInUserRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetsPostInUserRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceGetsPostInUserResult() *PostRPCServiceGetsPostInUserResult {
	return &PostRPCServiceGetsPostInUserResult{}
}

func (p *PostRPCServiceGetsPostInUserResult) InitDefault() {
	*p = PostRPCServiceGetsPostInUserResult{}
}

var PostRPCServiceGetsPostInUserResult_Success_DEFAULT *GetsPostInUserRPCResponse

func (p *PostRPCServiceGetsPostInUserResult) GetSuccess() (v *GetsPostInUserRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceGetsPostInUserResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceGetsPostInUserResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetsPostInUserRPCResponse)
}

var fieldIDToName_PostRPCServiceGetsPostInUserResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceGetsPostInUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceGetsPostInUserResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceGetsPostInUserResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInUserResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetsPostInUserRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceGetsPostInUserResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostInUser_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceGetsPostInUserResult(%+v)", *p)
}

func (p *PostRPCServiceGetsPostInUserResult) DeepEqual(ano *PostRPCServiceGetsPostInUserResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceGetsPostInUserResult) Field0DeepEqual(src *GetsPostInUserRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceGetsPostInHRArgs struct {
	Request *GetsPostInHRRPCRequest `thrift:"request,1" frugal:"1,default,GetsPostInHRRPCRequest" json:"request"`
}

func NewPostRPCServiceGetsPostInHRArgs() *PostRPCServiceGetsPostInHRArgs {
	return &PostRPCServiceGetsPostInHRArgs{}
}

func (p *PostRPCServiceGetsPostInHRArgs) InitDefault() {
	*p = PostRPCServiceGetsPostInHRArgs{}
}

var PostRPCServiceGetsPostInHRArgs_Request_DEFAULT *GetsPostInHRRPCRequest

func (p *PostRPCServiceGetsPostInHRArgs) GetRequest() (v *GetsPostInHRRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceGetsPostInHRArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceGetsPostInHRArgs) SetRequest(val *GetsPostInHRRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceGetsPostInHRArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceGetsPostInHRArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceGetsPostInHRArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceGetsPostInHRArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInHRArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetsPostInHRRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceGetsPostInHRArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostInHR_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInHRArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInHRArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceGetsPostInHRArgs(%+v)", *p)
}

func (p *PostRPCServiceGetsPostInHRArgs) DeepEqual(ano *PostRPCServiceGetsPostInHRArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceGetsPostInHRArgs) Field1DeepEqual(src *GetsPostInHRRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceGetsPostInHRResult struct {
	Success *GetsPostInHRRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetsPostInHRRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceGetsPostInHRResult() *PostRPCServiceGetsPostInHRResult {
	return &PostRPCServiceGetsPostInHRResult{}
}

func (p *PostRPCServiceGetsPostInHRResult) InitDefault() {
	*p = PostRPCServiceGetsPostInHRResult{}
}

var PostRPCServiceGetsPostInHRResult_Success_DEFAULT *GetsPostInHRRPCResponse

func (p *PostRPCServiceGetsPostInHRResult) GetSuccess() (v *GetsPostInHRRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceGetsPostInHRResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceGetsPostInHRResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetsPostInHRRPCResponse)
}

var fieldIDToName_PostRPCServiceGetsPostInHRResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceGetsPostInHRResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceGetsPostInHRResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceGetsPostInHRResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInHRResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetsPostInHRRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceGetsPostInHRResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetsPostInHR_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInHRResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceGetsPostInHRResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceGetsPostInHRResult(%+v)", *p)
}

func (p *PostRPCServiceGetsPostInHRResult) DeepEqual(ano *PostRPCServiceGetsPostInHRResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceGetsPostInHRResult) Field0DeepEqual(src *GetsPostInHRRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeliveryPostArgs struct {
	Request *DeliveryPostRPCRequest `thrift:"request,1" frugal:"1,default,DeliveryPostRPCRequest" json:"request"`
}

func NewPostRPCServiceDeliveryPostArgs() *PostRPCServiceDeliveryPostArgs {
	return &PostRPCServiceDeliveryPostArgs{}
}

func (p *PostRPCServiceDeliveryPostArgs) InitDefault() {
	*p = PostRPCServiceDeliveryPostArgs{}
}

var PostRPCServiceDeliveryPostArgs_Request_DEFAULT *DeliveryPostRPCRequest

func (p *PostRPCServiceDeliveryPostArgs) GetRequest() (v *DeliveryPostRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceDeliveryPostArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceDeliveryPostArgs) SetRequest(val *DeliveryPostRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceDeliveryPostArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceDeliveryPostArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceDeliveryPostArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeliveryPostArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeliveryPostArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewDeliveryPostRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeliveryPostArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeliveryPost_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeliveryPostArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceDeliveryPostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeliveryPostArgs(%+v)", *p)
}

func (p *PostRPCServiceDeliveryPostArgs) DeepEqual(ano *PostRPCServiceDeliveryPostArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeliveryPostArgs) Field1DeepEqual(src *DeliveryPostRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeliveryPostResult struct {
	Success *DeliveryPostRPCResponse `thrift:"success,0,optional" frugal:"0,optional,DeliveryPostRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceDeliveryPostResult() *PostRPCServiceDeliveryPostResult {
	return &PostRPCServiceDeliveryPostResult{}
}

func (p *PostRPCServiceDeliveryPostResult) InitDefault() {
	*p = PostRPCServiceDeliveryPostResult{}
}

var PostRPCServiceDeliveryPostResult_Success_DEFAULT *DeliveryPostRPCResponse

func (p *PostRPCServiceDeliveryPostResult) GetSuccess() (v *DeliveryPostRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceDeliveryPostResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceDeliveryPostResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeliveryPostRPCResponse)
}

var fieldIDToName_PostRPCServiceDeliveryPostResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceDeliveryPostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceDeliveryPostResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeliveryPostResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeliveryPostResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeliveryPostRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeliveryPostResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeliveryPost_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeliveryPostResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceDeliveryPostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeliveryPostResult(%+v)", *p)
}

func (p *PostRPCServiceDeliveryPostResult) DeepEqual(ano *PostRPCServiceDeliveryPostResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeliveryPostResult) Field0DeepEqual(src *DeliveryPostRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceCollectPostArgs struct {
	Request *CollectPostRPCRequest `thrift:"request,1" frugal:"1,default,CollectPostRPCRequest" json:"request"`
}

func NewPostRPCServiceCollectPostArgs() *PostRPCServiceCollectPostArgs {
	return &PostRPCServiceCollectPostArgs{}
}

func (p *PostRPCServiceCollectPostArgs) InitDefault() {
	*p = PostRPCServiceCollectPostArgs{}
}

var PostRPCServiceCollectPostArgs_Request_DEFAULT *CollectPostRPCRequest

func (p *PostRPCServiceCollectPostArgs) GetRequest() (v *CollectPostRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceCollectPostArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceCollectPostArgs) SetRequest(val *CollectPostRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceCollectPostArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceCollectPostArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceCollectPostArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceCollectPostArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceCollectPostArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewCollectPostRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceCollectPostArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CollectPost_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceCollectPostArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceCollectPostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceCollectPostArgs(%+v)", *p)
}

func (p *PostRPCServiceCollectPostArgs) DeepEqual(ano *PostRPCServiceCollectPostArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceCollectPostArgs) Field1DeepEqual(src *CollectPostRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceCollectPostResult struct {
	Success *CollectPostRPCResponse `thrift:"success,0,optional" frugal:"0,optional,CollectPostRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceCollectPostResult() *PostRPCServiceCollectPostResult {
	return &PostRPCServiceCollectPostResult{}
}

func (p *PostRPCServiceCollectPostResult) InitDefault() {
	*p = PostRPCServiceCollectPostResult{}
}

var PostRPCServiceCollectPostResult_Success_DEFAULT *CollectPostRPCResponse

func (p *PostRPCServiceCollectPostResult) GetSuccess() (v *CollectPostRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceCollectPostResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceCollectPostResult) SetSuccess(x interface{}) {
	p.Success = x.(*CollectPostRPCResponse)
}

var fieldIDToName_PostRPCServiceCollectPostResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceCollectPostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceCollectPostResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceCollectPostResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceCollectPostResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCollectPostRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceCollectPostResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CollectPost_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceCollectPostResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceCollectPostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceCollectPostResult(%+v)", *p)
}

func (p *PostRPCServiceCollectPostResult) DeepEqual(ano *PostRPCServiceCollectPostResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceCollectPostResult) Field0DeepEqual(src *CollectPostRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceGetDeliveryPostArgs struct {
	Request *GetDeliveryPostRPCRequest `thrift:"request,1" frugal:"1,default,GetDeliveryPostRPCRequest" json:"request"`
}

func NewPostRPCServiceGetDeliveryPostArgs() *PostRPCServiceGetDeliveryPostArgs {
	return &PostRPCServiceGetDeliveryPostArgs{}
}

func (p *PostRPCServiceGetDeliveryPostArgs) InitDefault() {
	*p = PostRPCServiceGetDeliveryPostArgs{}
}

var PostRPCServiceGetDeliveryPostArgs_Request_DEFAULT *GetDeliveryPostRPCRequest

func (p *PostRPCServiceGetDeliveryPostArgs) GetRequest() (v *GetDeliveryPostRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceGetDeliveryPostArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceGetDeliveryPostArgs) SetRequest(val *GetDeliveryPostRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceGetDeliveryPostArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceGetDeliveryPostArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceGetDeliveryPostArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceGetDeliveryPostArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceGetDeliveryPostArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetDeliveryPostRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceGetDeliveryPostArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeliveryPost_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceGetDeliveryPostArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceGetDeliveryPostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceGetDeliveryPostArgs(%+v)", *p)
}

func (p *PostRPCServiceGetDeliveryPostArgs) DeepEqual(ano *PostRPCServiceGetDeliveryPostArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceGetDeliveryPostArgs) Field1DeepEqual(src *GetDeliveryPostRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceGetDeliveryPostResult struct {
	Success *GetDeliveryPostRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetDeliveryPostRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceGetDeliveryPostResult() *PostRPCServiceGetDeliveryPostResult {
	return &PostRPCServiceGetDeliveryPostResult{}
}

func (p *PostRPCServiceGetDeliveryPostResult) InitDefault() {
	*p = PostRPCServiceGetDeliveryPostResult{}
}

var PostRPCServiceGetDeliveryPostResult_Success_DEFAULT *GetDeliveryPostRPCResponse

func (p *PostRPCServiceGetDeliveryPostResult) GetSuccess() (v *GetDeliveryPostRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceGetDeliveryPostResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceGetDeliveryPostResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDeliveryPostRPCResponse)
}

var fieldIDToName_PostRPCServiceGetDeliveryPostResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceGetDeliveryPostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceGetDeliveryPostResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceGetDeliveryPostResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceGetDeliveryPostResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetDeliveryPostRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceGetDeliveryPostResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDeliveryPost_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceGetDeliveryPostResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceGetDeliveryPostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceGetDeliveryPostResult(%+v)", *p)
}

func (p *PostRPCServiceGetDeliveryPostResult) DeepEqual(ano *PostRPCServiceGetDeliveryPostResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceGetDeliveryPostResult) Field0DeepEqual(src *GetDeliveryPostRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceGetCollectPostArgs struct {
	Request *GetCollectPostRPCRequest `thrift:"request,1" frugal:"1,default,GetCollectPostRPCRequest" json:"request"`
}

func NewPostRPCServiceGetCollectPostArgs() *PostRPCServiceGetCollectPostArgs {
	return &PostRPCServiceGetCollectPostArgs{}
}

func (p *PostRPCServiceGetCollectPostArgs) InitDefault() {
	*p = PostRPCServiceGetCollectPostArgs{}
}

var PostRPCServiceGetCollectPostArgs_Request_DEFAULT *GetCollectPostRPCRequest

func (p *PostRPCServiceGetCollectPostArgs) GetRequest() (v *GetCollectPostRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceGetCollectPostArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceGetCollectPostArgs) SetRequest(val *GetCollectPostRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceGetCollectPostArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceGetCollectPostArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceGetCollectPostArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceGetCollectPostArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceGetCollectPostArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetCollectPostRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceGetCollectPostArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCollectPost_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceGetCollectPostArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceGetCollectPostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceGetCollectPostArgs(%+v)", *p)
}

func (p *PostRPCServiceGetCollectPostArgs) DeepEqual(ano *PostRPCServiceGetCollectPostArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceGetCollectPostArgs) Field1DeepEqual(src *GetCollectPostRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceGetCollectPostResult struct {
	Success *GetCollectPostRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetCollectPostRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceGetCollectPostResult() *PostRPCServiceGetCollectPostResult {
	return &PostRPCServiceGetCollectPostResult{}
}

func (p *PostRPCServiceGetCollectPostResult) InitDefault() {
	*p = PostRPCServiceGetCollectPostResult{}
}

var PostRPCServiceGetCollectPostResult_Success_DEFAULT *GetCollectPostRPCResponse

func (p *PostRPCServiceGetCollectPostResult) GetSuccess() (v *GetCollectPostRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceGetCollectPostResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceGetCollectPostResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetCollectPostRPCResponse)
}

var fieldIDToName_PostRPCServiceGetCollectPostResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceGetCollectPostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceGetCollectPostResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceGetCollectPostResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceGetCollectPostResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetCollectPostRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceGetCollectPostResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCollectPost_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceGetCollectPostResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceGetCollectPostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceGetCollectPostResult(%+v)", *p)
}

func (p *PostRPCServiceGetCollectPostResult) DeepEqual(ano *PostRPCServiceGetCollectPostResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceGetCollectPostResult) Field0DeepEqual(src *GetCollectPostRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceUpdateResumeStatusArgs struct {
	Request *UpdateResumeStatusRPCRequest `thrift:"request,1" frugal:"1,default,UpdateResumeStatusRPCRequest" json:"request"`
}

func NewPostRPCServiceUpdateResumeStatusArgs() *PostRPCServiceUpdateResumeStatusArgs {
	return &PostRPCServiceUpdateResumeStatusArgs{}
}

func (p *PostRPCServiceUpdateResumeStatusArgs) InitDefault() {
	*p = PostRPCServiceUpdateResumeStatusArgs{}
}

var PostRPCServiceUpdateResumeStatusArgs_Request_DEFAULT *UpdateResumeStatusRPCRequest

func (p *PostRPCServiceUpdateResumeStatusArgs) GetRequest() (v *UpdateResumeStatusRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceUpdateResumeStatusArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceUpdateResumeStatusArgs) SetRequest(val *UpdateResumeStatusRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceUpdateResumeStatusArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceUpdateResumeStatusArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceUpdateResumeStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceUpdateResumeStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceUpdateResumeStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewUpdateResumeStatusRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceUpdateResumeStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateResumeStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceUpdateResumeStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceUpdateResumeStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceUpdateResumeStatusArgs(%+v)", *p)
}

func (p *PostRPCServiceUpdateResumeStatusArgs) DeepEqual(ano *PostRPCServiceUpdateResumeStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceUpdateResumeStatusArgs) Field1DeepEqual(src *UpdateResumeStatusRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceUpdateResumeStatusResult struct {
	Success *UpdateResumeStatusRPCResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateResumeStatusRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceUpdateResumeStatusResult() *PostRPCServiceUpdateResumeStatusResult {
	return &PostRPCServiceUpdateResumeStatusResult{}
}

func (p *PostRPCServiceUpdateResumeStatusResult) InitDefault() {
	*p = PostRPCServiceUpdateResumeStatusResult{}
}

var PostRPCServiceUpdateResumeStatusResult_Success_DEFAULT *UpdateResumeStatusRPCResponse

func (p *PostRPCServiceUpdateResumeStatusResult) GetSuccess() (v *UpdateResumeStatusRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceUpdateResumeStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceUpdateResumeStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateResumeStatusRPCResponse)
}

var fieldIDToName_PostRPCServiceUpdateResumeStatusResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceUpdateResumeStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceUpdateResumeStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceUpdateResumeStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceUpdateResumeStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdateResumeStatusRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceUpdateResumeStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateResumeStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceUpdateResumeStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceUpdateResumeStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceUpdateResumeStatusResult(%+v)", *p)
}

func (p *PostRPCServiceUpdateResumeStatusResult) DeepEqual(ano *PostRPCServiceUpdateResumeStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceUpdateResumeStatusResult) Field0DeepEqual(src *UpdateResumeStatusRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceGetUserIdByPostIdArgs struct {
	Request *GetUserIdByPostIdRPCRequest `thrift:"request,1" frugal:"1,default,GetUserIdByPostIdRPCRequest" json:"request"`
}

func NewPostRPCServiceGetUserIdByPostIdArgs() *PostRPCServiceGetUserIdByPostIdArgs {
	return &PostRPCServiceGetUserIdByPostIdArgs{}
}

func (p *PostRPCServiceGetUserIdByPostIdArgs) InitDefault() {
	*p = PostRPCServiceGetUserIdByPostIdArgs{}
}

var PostRPCServiceGetUserIdByPostIdArgs_Request_DEFAULT *GetUserIdByPostIdRPCRequest

func (p *PostRPCServiceGetUserIdByPostIdArgs) GetRequest() (v *GetUserIdByPostIdRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceGetUserIdByPostIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceGetUserIdByPostIdArgs) SetRequest(val *GetUserIdByPostIdRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceGetUserIdByPostIdArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceGetUserIdByPostIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceGetUserIdByPostIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceGetUserIdByPostIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceGetUserIdByPostIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetUserIdByPostIdRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceGetUserIdByPostIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserIdByPostId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceGetUserIdByPostIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceGetUserIdByPostIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceGetUserIdByPostIdArgs(%+v)", *p)
}

func (p *PostRPCServiceGetUserIdByPostIdArgs) DeepEqual(ano *PostRPCServiceGetUserIdByPostIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceGetUserIdByPostIdArgs) Field1DeepEqual(src *GetUserIdByPostIdRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceGetUserIdByPostIdResult struct {
	Success *GetUserIdByPostIdRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetUserIdByPostIdRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceGetUserIdByPostIdResult() *PostRPCServiceGetUserIdByPostIdResult {
	return &PostRPCServiceGetUserIdByPostIdResult{}
}

func (p *PostRPCServiceGetUserIdByPostIdResult) InitDefault() {
	*p = PostRPCServiceGetUserIdByPostIdResult{}
}

var PostRPCServiceGetUserIdByPostIdResult_Success_DEFAULT *GetUserIdByPostIdRPCResponse

func (p *PostRPCServiceGetUserIdByPostIdResult) GetSuccess() (v *GetUserIdByPostIdRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceGetUserIdByPostIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceGetUserIdByPostIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetUserIdByPostIdRPCResponse)
}

var fieldIDToName_PostRPCServiceGetUserIdByPostIdResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceGetUserIdByPostIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceGetUserIdByPostIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceGetUserIdByPostIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceGetUserIdByPostIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetUserIdByPostIdRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceGetUserIdByPostIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetUserIdByPostId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceGetUserIdByPostIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceGetUserIdByPostIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceGetUserIdByPostIdResult(%+v)", *p)
}

func (p *PostRPCServiceGetUserIdByPostIdResult) DeepEqual(ano *PostRPCServiceGetUserIdByPostIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceGetUserIdByPostIdResult) Field0DeepEqual(src *GetUserIdByPostIdRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs struct {
	Request *DeleteResumeRelativeInfoByHRIdRPCRequest `thrift:"request,1" frugal:"1,default,DeleteResumeRelativeInfoByHRIdRPCRequest" json:"request"`
}

func NewPostRPCServiceDeleteResumeRelativeInfoByHRIdArgs() *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs {
	return &PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs{}
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) InitDefault() {
	*p = PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs{}
}

var PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs_Request_DEFAULT *DeleteResumeRelativeInfoByHRIdRPCRequest

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) GetRequest() (v *DeleteResumeRelativeInfoByHRIdRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) SetRequest(val *DeleteResumeRelativeInfoByHRIdRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewDeleteResumeRelativeInfoByHRIdRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByHRId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs(%+v)", *p)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) DeepEqual(ano *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdArgs) Field1DeepEqual(src *DeleteResumeRelativeInfoByHRIdRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeleteResumeRelativeInfoByHRIdResult struct {
	Success *DeleteResumeRelativeInfoByHRIdRPCResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteResumeRelativeInfoByHRIdRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceDeleteResumeRelativeInfoByHRIdResult() *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult {
	return &PostRPCServiceDeleteResumeRelativeInfoByHRIdResult{}
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) InitDefault() {
	*p = PostRPCServiceDeleteResumeRelativeInfoByHRIdResult{}
}

var PostRPCServiceDeleteResumeRelativeInfoByHRIdResult_Success_DEFAULT *DeleteResumeRelativeInfoByHRIdRPCResponse

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) GetSuccess() (v *DeleteResumeRelativeInfoByHRIdRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceDeleteResumeRelativeInfoByHRIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteResumeRelativeInfoByHRIdRPCResponse)
}

var fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByHRIdResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByHRIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeleteResumeRelativeInfoByHRIdRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByHRId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeleteResumeRelativeInfoByHRIdResult(%+v)", *p)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) DeepEqual(ano *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByHRIdResult) Field0DeepEqual(src *DeleteResumeRelativeInfoByHRIdRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs struct {
	Request *DeleteResumeRelativeInfoByDepartmentIdRPCRequest `thrift:"request,1" frugal:"1,default,DeleteResumeRelativeInfoByDepartmentIdRPCRequest" json:"request"`
}

func NewPostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs() *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs {
	return &PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs{}
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) InitDefault() {
	*p = PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs{}
}

var PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs_Request_DEFAULT *DeleteResumeRelativeInfoByDepartmentIdRPCRequest

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) GetRequest() (v *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) SetRequest(val *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewDeleteResumeRelativeInfoByDepartmentIdRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByDepartmentId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs(%+v)", *p)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) DeepEqual(ano *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdArgs) Field1DeepEqual(src *DeleteResumeRelativeInfoByDepartmentIdRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult struct {
	Success *DeleteResumeRelativeInfoByDepartmentIdRPCResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteResumeRelativeInfoByDepartmentIdRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult() *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult {
	return &PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult{}
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) InitDefault() {
	*p = PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult{}
}

var PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult_Success_DEFAULT *DeleteResumeRelativeInfoByDepartmentIdRPCResponse

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) GetSuccess() (v *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteResumeRelativeInfoByDepartmentIdRPCResponse)
}

var fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeleteResumeRelativeInfoByDepartmentIdRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByDepartmentId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult(%+v)", *p)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) DeepEqual(ano *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByDepartmentIdResult) Field0DeepEqual(src *DeleteResumeRelativeInfoByDepartmentIdRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs struct {
	Request *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest `thrift:"request,1" frugal:"1,default,DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest" json:"request"`
}

func NewPostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs() *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs {
	return &PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs{}
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) InitDefault() {
	*p = PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs{}
}

var PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs_Request_DEFAULT *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) GetRequest() (v *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) SetRequest(val *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewDeleteResumeRelativeInfoByPostCategoryIdListRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByPostCategoryIdList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs(%+v)", *p)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) DeepEqual(ano *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListArgs) Field1DeepEqual(src *DeleteResumeRelativeInfoByPostCategoryIdListRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult struct {
	Success *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse" json:"success,omitempty"`
}

func NewPostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult() *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult {
	return &PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult{}
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) InitDefault() {
	*p = PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult{}
}

var PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult_Success_DEFAULT *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) GetSuccess() (v *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) {
	if !p.IsSetSuccess() {
		return PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse)
}

var fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeleteResumeRelativeInfoByPostCategoryIdListRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteResumeRelativeInfoByPostCategoryIdList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult(%+v)", *p)
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) DeepEqual(ano *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeleteResumeRelativeInfoByPostCategoryIdListResult) Field0DeepEqual(src *DeleteResumeRelativeInfoByPostCategoryIdListRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeletePostCityByCityIdArgs struct {
	Request *DeletePostCityByCityIdRPCRequest `thrift:"request,1" frugal:"1,default,DeletePostCityByCityIdRPCRequest" json:"request"`
}

func NewPostRPCServiceDeletePostCityByCityIdArgs() *PostRPCServiceDeletePostCityByCityIdArgs {
	return &PostRPCServiceDeletePostCityByCityIdArgs{}
}

func (p *PostRPCServiceDeletePostCityByCityIdArgs) InitDefault() {
	*p = PostRPCServiceDeletePostCityByCityIdArgs{}
}

var PostRPCServiceDeletePostCityByCityIdArgs_Request_DEFAULT *DeletePostCityByCityIdRPCRequest

func (p *PostRPCServiceDeletePostCityByCityIdArgs) GetRequest() (v *DeletePostCityByCityIdRPCRequest) {
	if !p.IsSetRequest() {
		return PostRPCServiceDeletePostCityByCityIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PostRPCServiceDeletePostCityByCityIdArgs) SetRequest(val *DeletePostCityByCityIdRPCRequest) {
	p.Request = val
}

var fieldIDToName_PostRPCServiceDeletePostCityByCityIdArgs = map[int16]string{
	1: "request",
}

func (p *PostRPCServiceDeletePostCityByCityIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PostRPCServiceDeletePostCityByCityIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeletePostCityByCityIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeletePostCityByCityIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewDeletePostCityByCityIdRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeletePostCityByCityIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostCityByCityId_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeletePostCityByCityIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PostRPCServiceDeletePostCityByCityIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeletePostCityByCityIdArgs(%+v)", *p)
}

func (p *PostRPCServiceDeletePostCityByCityIdArgs) DeepEqual(ano *PostRPCServiceDeletePostCityByCityIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeletePostCityByCityIdArgs) Field1DeepEqual(src *DeletePostCityByCityIdRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PostRPCServiceDeletePostCityByCityIdResult struct {
	Success *DeletePostCityByCityIdRPCResposne `thrift:"success,0,optional" frugal:"0,optional,DeletePostCityByCityIdRPCResposne" json:"success,omitempty"`
}

func NewPostRPCServiceDeletePostCityByCityIdResult() *PostRPCServiceDeletePostCityByCityIdResult {
	return &PostRPCServiceDeletePostCityByCityIdResult{}
}

func (p *PostRPCServiceDeletePostCityByCityIdResult) InitDefault() {
	*p = PostRPCServiceDeletePostCityByCityIdResult{}
}

var PostRPCServiceDeletePostCityByCityIdResult_Success_DEFAULT *DeletePostCityByCityIdRPCResposne

func (p *PostRPCServiceDeletePostCityByCityIdResult) GetSuccess() (v *DeletePostCityByCityIdRPCResposne) {
	if !p.IsSetSuccess() {
		return PostRPCServiceDeletePostCityByCityIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PostRPCServiceDeletePostCityByCityIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeletePostCityByCityIdRPCResposne)
}

var fieldIDToName_PostRPCServiceDeletePostCityByCityIdResult = map[int16]string{
	0: "success",
}

func (p *PostRPCServiceDeletePostCityByCityIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PostRPCServiceDeletePostCityByCityIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PostRPCServiceDeletePostCityByCityIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PostRPCServiceDeletePostCityByCityIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewDeletePostCityByCityIdRPCResposne()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PostRPCServiceDeletePostCityByCityIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePostCityByCityId_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PostRPCServiceDeletePostCityByCityIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PostRPCServiceDeletePostCityByCityIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PostRPCServiceDeletePostCityByCityIdResult(%+v)", *p)
}

func (p *PostRPCServiceDeletePostCityByCityIdResult) DeepEqual(ano *PostRPCServiceDeletePostCityByCityIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PostRPCServiceDeletePostCityByCityIdResult) Field0DeepEqual(src *DeletePostCityByCityIdRPCResposne) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
