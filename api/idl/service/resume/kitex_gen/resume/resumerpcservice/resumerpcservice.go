// Code generated by Kitex v0.5.2. DO NOT EDIT.

package resumerpcservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	resume "resume-resolving/api/idl/service/resume/kitex_gen/resume"
)

func serviceInfo() *kitex.ServiceInfo {
	return resumeRPCServiceServiceInfo
}

var resumeRPCServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ResumeRPCService"
	handlerType := (*resume.ResumeRPCService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UploadStructResume": kitex.NewMethodInfo(uploadStructResumeHandler, newResumeRPCServiceUploadStructResumeArgs, newResumeRPCServiceUploadStructResumeResult, false),
		"GetResumeById":      kitex.NewMethodInfo(getResumeByIdHandler, newResumeRPCServiceGetResumeByIdArgs, newResumeRPCServiceGetResumeByIdResult, false),
		"GetResumeByPost":    kitex.NewMethodInfo(getResumeByPostHandler, newResumeRPCServiceGetResumeByPostArgs, newResumeRPCServiceGetResumeByPostResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "resume",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func uploadStructResumeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resume.ResumeRPCServiceUploadStructResumeArgs)
	realResult := result.(*resume.ResumeRPCServiceUploadStructResumeResult)
	success, err := handler.(resume.ResumeRPCService).UploadStructResume(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newResumeRPCServiceUploadStructResumeArgs() interface{} {
	return resume.NewResumeRPCServiceUploadStructResumeArgs()
}

func newResumeRPCServiceUploadStructResumeResult() interface{} {
	return resume.NewResumeRPCServiceUploadStructResumeResult()
}

func getResumeByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resume.ResumeRPCServiceGetResumeByIdArgs)
	realResult := result.(*resume.ResumeRPCServiceGetResumeByIdResult)
	success, err := handler.(resume.ResumeRPCService).GetResumeById(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newResumeRPCServiceGetResumeByIdArgs() interface{} {
	return resume.NewResumeRPCServiceGetResumeByIdArgs()
}

func newResumeRPCServiceGetResumeByIdResult() interface{} {
	return resume.NewResumeRPCServiceGetResumeByIdResult()
}

func getResumeByPostHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*resume.ResumeRPCServiceGetResumeByPostArgs)
	realResult := result.(*resume.ResumeRPCServiceGetResumeByPostResult)
	success, err := handler.(resume.ResumeRPCService).GetResumeByPost(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newResumeRPCServiceGetResumeByPostArgs() interface{} {
	return resume.NewResumeRPCServiceGetResumeByPostArgs()
}

func newResumeRPCServiceGetResumeByPostResult() interface{} {
	return resume.NewResumeRPCServiceGetResumeByPostResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UploadStructResume(ctx context.Context, request *resume.UploadStructResumeRPCRequest) (r *resume.UploadStructResumeRPCResponse, err error) {
	var _args resume.ResumeRPCServiceUploadStructResumeArgs
	_args.Request = request
	var _result resume.ResumeRPCServiceUploadStructResumeResult
	if err = p.c.Call(ctx, "UploadStructResume", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetResumeById(ctx context.Context, request *resume.GetResumeByIdRPCRequest) (r *resume.GetResumeByIdRPCResponse, err error) {
	var _args resume.ResumeRPCServiceGetResumeByIdArgs
	_args.Request = request
	var _result resume.ResumeRPCServiceGetResumeByIdResult
	if err = p.c.Call(ctx, "GetResumeById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetResumeByPost(ctx context.Context, request *resume.GetResumeByPostRPCRequest) (r *resume.GetResumeByPostRPCResponse, err error) {
	var _args resume.ResumeRPCServiceGetResumeByPostArgs
	_args.Request = request
	var _result resume.ResumeRPCServiceGetResumeByPostResult
	if err = p.c.Call(ctx, "GetResumeByPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
