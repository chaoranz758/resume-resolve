// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package resume

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"resume-resolving/api/idl/service/resume/kitex_gen/base"
	"strings"
)

type UploadStructResumeRPCRequest struct {
	BasicInformation          *base.BasicInfo                   `thrift:"basic_information,1" frugal:"1,default,base.BasicInfo" json:"basic_information"`
	EducationalExperienceList []*base.EducationalExperienceList `thrift:"educational_experience_list,2" frugal:"2,default,list<base.EducationalExperienceList>" json:"educational_experience_list"`
	InternshipExperienceList  []*base.InternshipExperienceList  `thrift:"internship_experience_list,3" frugal:"3,default,list<base.InternshipExperienceList>" json:"internship_experience_list"`
	WorkExperienceList        []*base.WorkExperienceList        `thrift:"work_experience_list,4" frugal:"4,default,list<base.WorkExperienceList>" json:"work_experience_list"`
	ProjectExperienceList     []*base.ProjectExperienceList     `thrift:"project_experience_list,5" frugal:"5,default,list<base.ProjectExperienceList>" json:"project_experience_list"`
	ContestList               []*base.ContestList               `thrift:"contest_list,6" frugal:"6,default,list<base.ContestList>" json:"contest_list"`
	CertificateList           []*base.CertificateList           `thrift:"certificate_list,7" frugal:"7,default,list<base.CertificateList>" json:"certificate_list"`
	LanguageList              []*base.LanguageList              `thrift:"language_list,8" frugal:"8,default,list<base.LanguageList>" json:"language_list"`
	SocialList                []*base.SocialList                `thrift:"social_list,9" frugal:"9,default,list<base.SocialList>" json:"social_list"`
}

func NewUploadStructResumeRPCRequest() *UploadStructResumeRPCRequest {
	return &UploadStructResumeRPCRequest{}
}

func (p *UploadStructResumeRPCRequest) InitDefault() {
	*p = UploadStructResumeRPCRequest{}
}

var UploadStructResumeRPCRequest_BasicInformation_DEFAULT *base.BasicInfo

func (p *UploadStructResumeRPCRequest) GetBasicInformation() (v *base.BasicInfo) {
	if !p.IsSetBasicInformation() {
		return UploadStructResumeRPCRequest_BasicInformation_DEFAULT
	}
	return p.BasicInformation
}

func (p *UploadStructResumeRPCRequest) GetEducationalExperienceList() (v []*base.EducationalExperienceList) {
	return p.EducationalExperienceList
}

func (p *UploadStructResumeRPCRequest) GetInternshipExperienceList() (v []*base.InternshipExperienceList) {
	return p.InternshipExperienceList
}

func (p *UploadStructResumeRPCRequest) GetWorkExperienceList() (v []*base.WorkExperienceList) {
	return p.WorkExperienceList
}

func (p *UploadStructResumeRPCRequest) GetProjectExperienceList() (v []*base.ProjectExperienceList) {
	return p.ProjectExperienceList
}

func (p *UploadStructResumeRPCRequest) GetContestList() (v []*base.ContestList) {
	return p.ContestList
}

func (p *UploadStructResumeRPCRequest) GetCertificateList() (v []*base.CertificateList) {
	return p.CertificateList
}

func (p *UploadStructResumeRPCRequest) GetLanguageList() (v []*base.LanguageList) {
	return p.LanguageList
}

func (p *UploadStructResumeRPCRequest) GetSocialList() (v []*base.SocialList) {
	return p.SocialList
}
func (p *UploadStructResumeRPCRequest) SetBasicInformation(val *base.BasicInfo) {
	p.BasicInformation = val
}
func (p *UploadStructResumeRPCRequest) SetEducationalExperienceList(val []*base.EducationalExperienceList) {
	p.EducationalExperienceList = val
}
func (p *UploadStructResumeRPCRequest) SetInternshipExperienceList(val []*base.InternshipExperienceList) {
	p.InternshipExperienceList = val
}
func (p *UploadStructResumeRPCRequest) SetWorkExperienceList(val []*base.WorkExperienceList) {
	p.WorkExperienceList = val
}
func (p *UploadStructResumeRPCRequest) SetProjectExperienceList(val []*base.ProjectExperienceList) {
	p.ProjectExperienceList = val
}
func (p *UploadStructResumeRPCRequest) SetContestList(val []*base.ContestList) {
	p.ContestList = val
}
func (p *UploadStructResumeRPCRequest) SetCertificateList(val []*base.CertificateList) {
	p.CertificateList = val
}
func (p *UploadStructResumeRPCRequest) SetLanguageList(val []*base.LanguageList) {
	p.LanguageList = val
}
func (p *UploadStructResumeRPCRequest) SetSocialList(val []*base.SocialList) {
	p.SocialList = val
}

var fieldIDToName_UploadStructResumeRPCRequest = map[int16]string{
	1: "basic_information",
	2: "educational_experience_list",
	3: "internship_experience_list",
	4: "work_experience_list",
	5: "project_experience_list",
	6: "contest_list",
	7: "certificate_list",
	8: "language_list",
	9: "social_list",
}

func (p *UploadStructResumeRPCRequest) IsSetBasicInformation() bool {
	return p.BasicInformation != nil
}

func (p *UploadStructResumeRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadStructResumeRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	p.BasicInformation = base.NewBasicInfo()
	if err := p.BasicInformation.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UploadStructResumeRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.EducationalExperienceList = make([]*base.EducationalExperienceList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewEducationalExperienceList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.EducationalExperienceList = append(p.EducationalExperienceList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UploadStructResumeRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.InternshipExperienceList = make([]*base.InternshipExperienceList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewInternshipExperienceList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.InternshipExperienceList = append(p.InternshipExperienceList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UploadStructResumeRPCRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.WorkExperienceList = make([]*base.WorkExperienceList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewWorkExperienceList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.WorkExperienceList = append(p.WorkExperienceList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UploadStructResumeRPCRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ProjectExperienceList = make([]*base.ProjectExperienceList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewProjectExperienceList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ProjectExperienceList = append(p.ProjectExperienceList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UploadStructResumeRPCRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ContestList = make([]*base.ContestList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewContestList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ContestList = append(p.ContestList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UploadStructResumeRPCRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CertificateList = make([]*base.CertificateList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewCertificateList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.CertificateList = append(p.CertificateList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UploadStructResumeRPCRequest) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.LanguageList = make([]*base.LanguageList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewLanguageList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.LanguageList = append(p.LanguageList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UploadStructResumeRPCRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SocialList = make([]*base.SocialList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewSocialList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SocialList = append(p.SocialList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *UploadStructResumeRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadStructResumeRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("basic_information", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BasicInformation.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("educational_experience_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EducationalExperienceList)); err != nil {
		return err
	}
	for _, v := range p.EducationalExperienceList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("internship_experience_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InternshipExperienceList)); err != nil {
		return err
	}
	for _, v := range p.InternshipExperienceList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("work_experience_list", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.WorkExperienceList)); err != nil {
		return err
	}
	for _, v := range p.WorkExperienceList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("project_experience_list", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProjectExperienceList)); err != nil {
		return err
	}
	for _, v := range p.ProjectExperienceList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("contest_list", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ContestList)); err != nil {
		return err
	}
	for _, v := range p.ContestList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("certificate_list", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CertificateList)); err != nil {
		return err
	}
	for _, v := range p.CertificateList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("language_list", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LanguageList)); err != nil {
		return err
	}
	for _, v := range p.LanguageList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("social_list", thrift.LIST, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SocialList)); err != nil {
		return err
	}
	for _, v := range p.SocialList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UploadStructResumeRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadStructResumeRPCRequest(%+v)", *p)
}

func (p *UploadStructResumeRPCRequest) DeepEqual(ano *UploadStructResumeRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BasicInformation) {
		return false
	}
	if !p.Field2DeepEqual(ano.EducationalExperienceList) {
		return false
	}
	if !p.Field3DeepEqual(ano.InternshipExperienceList) {
		return false
	}
	if !p.Field4DeepEqual(ano.WorkExperienceList) {
		return false
	}
	if !p.Field5DeepEqual(ano.ProjectExperienceList) {
		return false
	}
	if !p.Field6DeepEqual(ano.ContestList) {
		return false
	}
	if !p.Field7DeepEqual(ano.CertificateList) {
		return false
	}
	if !p.Field8DeepEqual(ano.LanguageList) {
		return false
	}
	if !p.Field9DeepEqual(ano.SocialList) {
		return false
	}
	return true
}

func (p *UploadStructResumeRPCRequest) Field1DeepEqual(src *base.BasicInfo) bool {

	if !p.BasicInformation.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UploadStructResumeRPCRequest) Field2DeepEqual(src []*base.EducationalExperienceList) bool {

	if len(p.EducationalExperienceList) != len(src) {
		return false
	}
	for i, v := range p.EducationalExperienceList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UploadStructResumeRPCRequest) Field3DeepEqual(src []*base.InternshipExperienceList) bool {

	if len(p.InternshipExperienceList) != len(src) {
		return false
	}
	for i, v := range p.InternshipExperienceList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UploadStructResumeRPCRequest) Field4DeepEqual(src []*base.WorkExperienceList) bool {

	if len(p.WorkExperienceList) != len(src) {
		return false
	}
	for i, v := range p.WorkExperienceList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UploadStructResumeRPCRequest) Field5DeepEqual(src []*base.ProjectExperienceList) bool {

	if len(p.ProjectExperienceList) != len(src) {
		return false
	}
	for i, v := range p.ProjectExperienceList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UploadStructResumeRPCRequest) Field6DeepEqual(src []*base.ContestList) bool {

	if len(p.ContestList) != len(src) {
		return false
	}
	for i, v := range p.ContestList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UploadStructResumeRPCRequest) Field7DeepEqual(src []*base.CertificateList) bool {

	if len(p.CertificateList) != len(src) {
		return false
	}
	for i, v := range p.CertificateList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UploadStructResumeRPCRequest) Field8DeepEqual(src []*base.LanguageList) bool {

	if len(p.LanguageList) != len(src) {
		return false
	}
	for i, v := range p.LanguageList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UploadStructResumeRPCRequest) Field9DeepEqual(src []*base.SocialList) bool {

	if len(p.SocialList) != len(src) {
		return false
	}
	for i, v := range p.SocialList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type UploadStructResumeRPCResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewUploadStructResumeRPCResponse() *UploadStructResumeRPCResponse {
	return &UploadStructResumeRPCResponse{}
}

func (p *UploadStructResumeRPCResponse) InitDefault() {
	*p = UploadStructResumeRPCResponse{}
}

func (p *UploadStructResumeRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *UploadStructResumeRPCResponse) GetMessage() (v string) {
	return p.Message
}
func (p *UploadStructResumeRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *UploadStructResumeRPCResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_UploadStructResumeRPCResponse = map[int16]string{
	1: "code",
	2: "message",
}

func (p *UploadStructResumeRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UploadStructResumeRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UploadStructResumeRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *UploadStructResumeRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *UploadStructResumeRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadStructResumeRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UploadStructResumeRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UploadStructResumeRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UploadStructResumeRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UploadStructResumeRPCResponse(%+v)", *p)
}

func (p *UploadStructResumeRPCResponse) DeepEqual(ano *UploadStructResumeRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *UploadStructResumeRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *UploadStructResumeRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type GetResumeByIdRPCRequest struct {
	UserId int64 `thrift:"user_id,1" frugal:"1,default,i64" json:"user_id"`
}

func NewGetResumeByIdRPCRequest() *GetResumeByIdRPCRequest {
	return &GetResumeByIdRPCRequest{}
}

func (p *GetResumeByIdRPCRequest) InitDefault() {
	*p = GetResumeByIdRPCRequest{}
}

func (p *GetResumeByIdRPCRequest) GetUserId() (v int64) {
	return p.UserId
}
func (p *GetResumeByIdRPCRequest) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_GetResumeByIdRPCRequest = map[int16]string{
	1: "user_id",
}

func (p *GetResumeByIdRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetResumeByIdRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetResumeByIdRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *GetResumeByIdRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResumeByIdRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetResumeByIdRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetResumeByIdRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResumeByIdRPCRequest(%+v)", *p)
}

func (p *GetResumeByIdRPCRequest) DeepEqual(ano *GetResumeByIdRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *GetResumeByIdRPCRequest) Field1DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type GetResumeByIdRPCResponse struct {
	Code    int32       `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string      `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    *ResumeInfo `thrift:"data,3" frugal:"3,default,ResumeInfo" json:"data"`
}

func NewGetResumeByIdRPCResponse() *GetResumeByIdRPCResponse {
	return &GetResumeByIdRPCResponse{}
}

func (p *GetResumeByIdRPCResponse) InitDefault() {
	*p = GetResumeByIdRPCResponse{}
}

func (p *GetResumeByIdRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetResumeByIdRPCResponse) GetMessage() (v string) {
	return p.Message
}

var GetResumeByIdRPCResponse_Data_DEFAULT *ResumeInfo

func (p *GetResumeByIdRPCResponse) GetData() (v *ResumeInfo) {
	if !p.IsSetData() {
		return GetResumeByIdRPCResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *GetResumeByIdRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetResumeByIdRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetResumeByIdRPCResponse) SetData(val *ResumeInfo) {
	p.Data = val
}

var fieldIDToName_GetResumeByIdRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *GetResumeByIdRPCResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetResumeByIdRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetResumeByIdRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetResumeByIdRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetResumeByIdRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetResumeByIdRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	p.Data = NewResumeInfo()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetResumeByIdRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResumeByIdRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetResumeByIdRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetResumeByIdRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetResumeByIdRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetResumeByIdRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResumeByIdRPCResponse(%+v)", *p)
}

func (p *GetResumeByIdRPCResponse) DeepEqual(ano *GetResumeByIdRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetResumeByIdRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetResumeByIdRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetResumeByIdRPCResponse) Field3DeepEqual(src *ResumeInfo) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type GetResumeByPostRPCRequest struct {
	PostId       int64 `thrift:"post_id,1" frugal:"1,default,i64" json:"post_id"`
	IsTalentPool int8  `thrift:"is_talent_pool,2" frugal:"2,default,byte" json:"is_talent_pool"`
	Limit        int32 `thrift:"limit,3" frugal:"3,default,i32" json:"limit"`
	Offset       int32 `thrift:"offset,4" frugal:"4,default,i32" json:"offset"`
}

func NewGetResumeByPostRPCRequest() *GetResumeByPostRPCRequest {
	return &GetResumeByPostRPCRequest{}
}

func (p *GetResumeByPostRPCRequest) InitDefault() {
	*p = GetResumeByPostRPCRequest{}
}

func (p *GetResumeByPostRPCRequest) GetPostId() (v int64) {
	return p.PostId
}

func (p *GetResumeByPostRPCRequest) GetIsTalentPool() (v int8) {
	return p.IsTalentPool
}

func (p *GetResumeByPostRPCRequest) GetLimit() (v int32) {
	return p.Limit
}

func (p *GetResumeByPostRPCRequest) GetOffset() (v int32) {
	return p.Offset
}
func (p *GetResumeByPostRPCRequest) SetPostId(val int64) {
	p.PostId = val
}
func (p *GetResumeByPostRPCRequest) SetIsTalentPool(val int8) {
	p.IsTalentPool = val
}
func (p *GetResumeByPostRPCRequest) SetLimit(val int32) {
	p.Limit = val
}
func (p *GetResumeByPostRPCRequest) SetOffset(val int32) {
	p.Offset = val
}

var fieldIDToName_GetResumeByPostRPCRequest = map[int16]string{
	1: "post_id",
	2: "is_talent_pool",
	3: "limit",
	4: "offset",
}

func (p *GetResumeByPostRPCRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetResumeByPostRPCRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetResumeByPostRPCRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PostId = v
	}
	return nil
}

func (p *GetResumeByPostRPCRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.IsTalentPool = v
	}
	return nil
}

func (p *GetResumeByPostRPCRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Limit = v
	}
	return nil
}

func (p *GetResumeByPostRPCRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Offset = v
	}
	return nil
}

func (p *GetResumeByPostRPCRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResumeByPostRPCRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetResumeByPostRPCRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("post_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PostId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetResumeByPostRPCRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_talent_pool", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.IsTalentPool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetResumeByPostRPCRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("limit", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Limit); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetResumeByPostRPCRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("offset", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Offset); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *GetResumeByPostRPCRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResumeByPostRPCRequest(%+v)", *p)
}

func (p *GetResumeByPostRPCRequest) DeepEqual(ano *GetResumeByPostRPCRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PostId) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsTalentPool) {
		return false
	}
	if !p.Field3DeepEqual(ano.Limit) {
		return false
	}
	if !p.Field4DeepEqual(ano.Offset) {
		return false
	}
	return true
}

func (p *GetResumeByPostRPCRequest) Field1DeepEqual(src int64) bool {

	if p.PostId != src {
		return false
	}
	return true
}
func (p *GetResumeByPostRPCRequest) Field2DeepEqual(src int8) bool {

	if p.IsTalentPool != src {
		return false
	}
	return true
}
func (p *GetResumeByPostRPCRequest) Field3DeepEqual(src int32) bool {

	if p.Limit != src {
		return false
	}
	return true
}
func (p *GetResumeByPostRPCRequest) Field4DeepEqual(src int32) bool {

	if p.Offset != src {
		return false
	}
	return true
}

type GetResumeByPostRPCResponse struct {
	Code    int32         `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string        `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Data    []*ResumeInfo `thrift:"data,3" frugal:"3,default,list<ResumeInfo>" json:"data"`
}

func NewGetResumeByPostRPCResponse() *GetResumeByPostRPCResponse {
	return &GetResumeByPostRPCResponse{}
}

func (p *GetResumeByPostRPCResponse) InitDefault() {
	*p = GetResumeByPostRPCResponse{}
}

func (p *GetResumeByPostRPCResponse) GetCode() (v int32) {
	return p.Code
}

func (p *GetResumeByPostRPCResponse) GetMessage() (v string) {
	return p.Message
}

func (p *GetResumeByPostRPCResponse) GetData() (v []*ResumeInfo) {
	return p.Data
}
func (p *GetResumeByPostRPCResponse) SetCode(val int32) {
	p.Code = val
}
func (p *GetResumeByPostRPCResponse) SetMessage(val string) {
	p.Message = val
}
func (p *GetResumeByPostRPCResponse) SetData(val []*ResumeInfo) {
	p.Data = val
}

var fieldIDToName_GetResumeByPostRPCResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "data",
}

func (p *GetResumeByPostRPCResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetResumeByPostRPCResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetResumeByPostRPCResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Code = v
	}
	return nil
}

func (p *GetResumeByPostRPCResponse) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetResumeByPostRPCResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*ResumeInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewResumeInfo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetResumeByPostRPCResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResumeByPostRPCResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetResumeByPostRPCResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetResumeByPostRPCResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetResumeByPostRPCResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetResumeByPostRPCResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResumeByPostRPCResponse(%+v)", *p)
}

func (p *GetResumeByPostRPCResponse) DeepEqual(ano *GetResumeByPostRPCResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *GetResumeByPostRPCResponse) Field1DeepEqual(src int32) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *GetResumeByPostRPCResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}
func (p *GetResumeByPostRPCResponse) Field3DeepEqual(src []*ResumeInfo) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ResumeInfo struct {
	BasicInformation          *base.BasicInfoWithResumeId       `thrift:"basic_information,1" frugal:"1,default,base.BasicInfoWithResumeId" json:"basic_information"`
	EducationalExperienceList []*base.EducationalExperienceList `thrift:"educational_experience_list,2" frugal:"2,default,list<base.EducationalExperienceList>" json:"educational_experience_list"`
	InternshipExperienceList  []*base.InternshipExperienceList  `thrift:"internship_experience_list,3" frugal:"3,default,list<base.InternshipExperienceList>" json:"internship_experience_list"`
	WorkExperienceList        []*base.WorkExperienceList        `thrift:"work_experience_list,4" frugal:"4,default,list<base.WorkExperienceList>" json:"work_experience_list"`
	ProjectExperienceList     []*base.ProjectExperienceList     `thrift:"project_experience_list,5" frugal:"5,default,list<base.ProjectExperienceList>" json:"project_experience_list"`
	ContestList               []*base.ContestList               `thrift:"contest_list,6" frugal:"6,default,list<base.ContestList>" json:"contest_list"`
	CertificateList           []*base.CertificateList           `thrift:"certificate_list,7" frugal:"7,default,list<base.CertificateList>" json:"certificate_list"`
	LanguageList              []*base.LanguageList              `thrift:"language_list,8" frugal:"8,default,list<base.LanguageList>" json:"language_list"`
	SocialList                []*base.SocialList                `thrift:"social_list,9" frugal:"9,default,list<base.SocialList>" json:"social_list"`
	TalentPortrait            *TalentPortrait                   `thrift:"talent_portrait,10" frugal:"10,default,TalentPortrait" json:"talent_portrait"`
}

func NewResumeInfo() *ResumeInfo {
	return &ResumeInfo{}
}

func (p *ResumeInfo) InitDefault() {
	*p = ResumeInfo{}
}

var ResumeInfo_BasicInformation_DEFAULT *base.BasicInfoWithResumeId

func (p *ResumeInfo) GetBasicInformation() (v *base.BasicInfoWithResumeId) {
	if !p.IsSetBasicInformation() {
		return ResumeInfo_BasicInformation_DEFAULT
	}
	return p.BasicInformation
}

func (p *ResumeInfo) GetEducationalExperienceList() (v []*base.EducationalExperienceList) {
	return p.EducationalExperienceList
}

func (p *ResumeInfo) GetInternshipExperienceList() (v []*base.InternshipExperienceList) {
	return p.InternshipExperienceList
}

func (p *ResumeInfo) GetWorkExperienceList() (v []*base.WorkExperienceList) {
	return p.WorkExperienceList
}

func (p *ResumeInfo) GetProjectExperienceList() (v []*base.ProjectExperienceList) {
	return p.ProjectExperienceList
}

func (p *ResumeInfo) GetContestList() (v []*base.ContestList) {
	return p.ContestList
}

func (p *ResumeInfo) GetCertificateList() (v []*base.CertificateList) {
	return p.CertificateList
}

func (p *ResumeInfo) GetLanguageList() (v []*base.LanguageList) {
	return p.LanguageList
}

func (p *ResumeInfo) GetSocialList() (v []*base.SocialList) {
	return p.SocialList
}

var ResumeInfo_TalentPortrait_DEFAULT *TalentPortrait

func (p *ResumeInfo) GetTalentPortrait() (v *TalentPortrait) {
	if !p.IsSetTalentPortrait() {
		return ResumeInfo_TalentPortrait_DEFAULT
	}
	return p.TalentPortrait
}
func (p *ResumeInfo) SetBasicInformation(val *base.BasicInfoWithResumeId) {
	p.BasicInformation = val
}
func (p *ResumeInfo) SetEducationalExperienceList(val []*base.EducationalExperienceList) {
	p.EducationalExperienceList = val
}
func (p *ResumeInfo) SetInternshipExperienceList(val []*base.InternshipExperienceList) {
	p.InternshipExperienceList = val
}
func (p *ResumeInfo) SetWorkExperienceList(val []*base.WorkExperienceList) {
	p.WorkExperienceList = val
}
func (p *ResumeInfo) SetProjectExperienceList(val []*base.ProjectExperienceList) {
	p.ProjectExperienceList = val
}
func (p *ResumeInfo) SetContestList(val []*base.ContestList) {
	p.ContestList = val
}
func (p *ResumeInfo) SetCertificateList(val []*base.CertificateList) {
	p.CertificateList = val
}
func (p *ResumeInfo) SetLanguageList(val []*base.LanguageList) {
	p.LanguageList = val
}
func (p *ResumeInfo) SetSocialList(val []*base.SocialList) {
	p.SocialList = val
}
func (p *ResumeInfo) SetTalentPortrait(val *TalentPortrait) {
	p.TalentPortrait = val
}

var fieldIDToName_ResumeInfo = map[int16]string{
	1:  "basic_information",
	2:  "educational_experience_list",
	3:  "internship_experience_list",
	4:  "work_experience_list",
	5:  "project_experience_list",
	6:  "contest_list",
	7:  "certificate_list",
	8:  "language_list",
	9:  "social_list",
	10: "talent_portrait",
}

func (p *ResumeInfo) IsSetBasicInformation() bool {
	return p.BasicInformation != nil
}

func (p *ResumeInfo) IsSetTalentPortrait() bool {
	return p.TalentPortrait != nil
}

func (p *ResumeInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResumeInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResumeInfo) ReadField1(iprot thrift.TProtocol) error {
	p.BasicInformation = base.NewBasicInfoWithResumeId()
	if err := p.BasicInformation.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResumeInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.EducationalExperienceList = make([]*base.EducationalExperienceList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewEducationalExperienceList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.EducationalExperienceList = append(p.EducationalExperienceList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ResumeInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.InternshipExperienceList = make([]*base.InternshipExperienceList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewInternshipExperienceList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.InternshipExperienceList = append(p.InternshipExperienceList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ResumeInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.WorkExperienceList = make([]*base.WorkExperienceList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewWorkExperienceList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.WorkExperienceList = append(p.WorkExperienceList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ResumeInfo) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ProjectExperienceList = make([]*base.ProjectExperienceList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewProjectExperienceList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ProjectExperienceList = append(p.ProjectExperienceList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ResumeInfo) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ContestList = make([]*base.ContestList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewContestList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ContestList = append(p.ContestList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ResumeInfo) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.CertificateList = make([]*base.CertificateList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewCertificateList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.CertificateList = append(p.CertificateList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ResumeInfo) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.LanguageList = make([]*base.LanguageList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewLanguageList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.LanguageList = append(p.LanguageList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ResumeInfo) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.SocialList = make([]*base.SocialList, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewSocialList()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.SocialList = append(p.SocialList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *ResumeInfo) ReadField10(iprot thrift.TProtocol) error {
	p.TalentPortrait = NewTalentPortrait()
	if err := p.TalentPortrait.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResumeInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResumeInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResumeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("basic_information", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BasicInformation.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResumeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("educational_experience_list", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EducationalExperienceList)); err != nil {
		return err
	}
	for _, v := range p.EducationalExperienceList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ResumeInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("internship_experience_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InternshipExperienceList)); err != nil {
		return err
	}
	for _, v := range p.InternshipExperienceList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ResumeInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("work_experience_list", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.WorkExperienceList)); err != nil {
		return err
	}
	for _, v := range p.WorkExperienceList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ResumeInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("project_experience_list", thrift.LIST, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProjectExperienceList)); err != nil {
		return err
	}
	for _, v := range p.ProjectExperienceList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ResumeInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("contest_list", thrift.LIST, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ContestList)); err != nil {
		return err
	}
	for _, v := range p.ContestList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ResumeInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("certificate_list", thrift.LIST, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CertificateList)); err != nil {
		return err
	}
	for _, v := range p.CertificateList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *ResumeInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("language_list", thrift.LIST, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LanguageList)); err != nil {
		return err
	}
	for _, v := range p.LanguageList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ResumeInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("social_list", thrift.LIST, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SocialList)); err != nil {
		return err
	}
	for _, v := range p.SocialList {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *ResumeInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("talent_portrait", thrift.STRUCT, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.TalentPortrait.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ResumeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResumeInfo(%+v)", *p)
}

func (p *ResumeInfo) DeepEqual(ano *ResumeInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BasicInformation) {
		return false
	}
	if !p.Field2DeepEqual(ano.EducationalExperienceList) {
		return false
	}
	if !p.Field3DeepEqual(ano.InternshipExperienceList) {
		return false
	}
	if !p.Field4DeepEqual(ano.WorkExperienceList) {
		return false
	}
	if !p.Field5DeepEqual(ano.ProjectExperienceList) {
		return false
	}
	if !p.Field6DeepEqual(ano.ContestList) {
		return false
	}
	if !p.Field7DeepEqual(ano.CertificateList) {
		return false
	}
	if !p.Field8DeepEqual(ano.LanguageList) {
		return false
	}
	if !p.Field9DeepEqual(ano.SocialList) {
		return false
	}
	if !p.Field10DeepEqual(ano.TalentPortrait) {
		return false
	}
	return true
}

func (p *ResumeInfo) Field1DeepEqual(src *base.BasicInfoWithResumeId) bool {

	if !p.BasicInformation.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ResumeInfo) Field2DeepEqual(src []*base.EducationalExperienceList) bool {

	if len(p.EducationalExperienceList) != len(src) {
		return false
	}
	for i, v := range p.EducationalExperienceList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ResumeInfo) Field3DeepEqual(src []*base.InternshipExperienceList) bool {

	if len(p.InternshipExperienceList) != len(src) {
		return false
	}
	for i, v := range p.InternshipExperienceList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ResumeInfo) Field4DeepEqual(src []*base.WorkExperienceList) bool {

	if len(p.WorkExperienceList) != len(src) {
		return false
	}
	for i, v := range p.WorkExperienceList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ResumeInfo) Field5DeepEqual(src []*base.ProjectExperienceList) bool {

	if len(p.ProjectExperienceList) != len(src) {
		return false
	}
	for i, v := range p.ProjectExperienceList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ResumeInfo) Field6DeepEqual(src []*base.ContestList) bool {

	if len(p.ContestList) != len(src) {
		return false
	}
	for i, v := range p.ContestList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ResumeInfo) Field7DeepEqual(src []*base.CertificateList) bool {

	if len(p.CertificateList) != len(src) {
		return false
	}
	for i, v := range p.CertificateList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ResumeInfo) Field8DeepEqual(src []*base.LanguageList) bool {

	if len(p.LanguageList) != len(src) {
		return false
	}
	for i, v := range p.LanguageList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ResumeInfo) Field9DeepEqual(src []*base.SocialList) bool {

	if len(p.SocialList) != len(src) {
		return false
	}
	for i, v := range p.SocialList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ResumeInfo) Field10DeepEqual(src *TalentPortrait) bool {

	if !p.TalentPortrait.DeepEqual(src) {
		return false
	}
	return true
}

type TalentPortrait struct {
	Age              int16  `thrift:"age,1" frugal:"1,default,i16" json:"age"`
	MaxEducation     string `thrift:"max_education,2" frugal:"2,default,string" json:"max_education"`
	GraduatedSchool  string `thrift:"graduated_school,3" frugal:"3,default,string" json:"graduated_school"`
	SchoolLevel      int8   `thrift:"school_level,4" frugal:"4,default,i8" json:"school_level"`
	WorkingSeniority int16  `thrift:"working_seniority,5" frugal:"5,default,i16" json:"working_seniority"`
}

func NewTalentPortrait() *TalentPortrait {
	return &TalentPortrait{}
}

func (p *TalentPortrait) InitDefault() {
	*p = TalentPortrait{}
}

func (p *TalentPortrait) GetAge() (v int16) {
	return p.Age
}

func (p *TalentPortrait) GetMaxEducation() (v string) {
	return p.MaxEducation
}

func (p *TalentPortrait) GetGraduatedSchool() (v string) {
	return p.GraduatedSchool
}

func (p *TalentPortrait) GetSchoolLevel() (v int8) {
	return p.SchoolLevel
}

func (p *TalentPortrait) GetWorkingSeniority() (v int16) {
	return p.WorkingSeniority
}
func (p *TalentPortrait) SetAge(val int16) {
	p.Age = val
}
func (p *TalentPortrait) SetMaxEducation(val string) {
	p.MaxEducation = val
}
func (p *TalentPortrait) SetGraduatedSchool(val string) {
	p.GraduatedSchool = val
}
func (p *TalentPortrait) SetSchoolLevel(val int8) {
	p.SchoolLevel = val
}
func (p *TalentPortrait) SetWorkingSeniority(val int16) {
	p.WorkingSeniority = val
}

var fieldIDToName_TalentPortrait = map[int16]string{
	1: "age",
	2: "max_education",
	3: "graduated_school",
	4: "school_level",
	5: "working_seniority",
}

func (p *TalentPortrait) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TalentPortrait[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TalentPortrait) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Age = v
	}
	return nil
}

func (p *TalentPortrait) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MaxEducation = v
	}
	return nil
}

func (p *TalentPortrait) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.GraduatedSchool = v
	}
	return nil
}

func (p *TalentPortrait) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.SchoolLevel = v
	}
	return nil
}

func (p *TalentPortrait) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.WorkingSeniority = v
	}
	return nil
}

func (p *TalentPortrait) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TalentPortrait"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TalentPortrait) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("age", thrift.I16, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.Age); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TalentPortrait) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("max_education", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MaxEducation); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TalentPortrait) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("graduated_school", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.GraduatedSchool); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TalentPortrait) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("school_level", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.SchoolLevel); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *TalentPortrait) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("working_seniority", thrift.I16, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI16(p.WorkingSeniority); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TalentPortrait) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TalentPortrait(%+v)", *p)
}

func (p *TalentPortrait) DeepEqual(ano *TalentPortrait) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Age) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxEducation) {
		return false
	}
	if !p.Field3DeepEqual(ano.GraduatedSchool) {
		return false
	}
	if !p.Field4DeepEqual(ano.SchoolLevel) {
		return false
	}
	if !p.Field5DeepEqual(ano.WorkingSeniority) {
		return false
	}
	return true
}

func (p *TalentPortrait) Field1DeepEqual(src int16) bool {

	if p.Age != src {
		return false
	}
	return true
}
func (p *TalentPortrait) Field2DeepEqual(src string) bool {

	if strings.Compare(p.MaxEducation, src) != 0 {
		return false
	}
	return true
}
func (p *TalentPortrait) Field3DeepEqual(src string) bool {

	if strings.Compare(p.GraduatedSchool, src) != 0 {
		return false
	}
	return true
}
func (p *TalentPortrait) Field4DeepEqual(src int8) bool {

	if p.SchoolLevel != src {
		return false
	}
	return true
}
func (p *TalentPortrait) Field5DeepEqual(src int16) bool {

	if p.WorkingSeniority != src {
		return false
	}
	return true
}

type ResumeRPCService interface {
	UploadStructResume(ctx context.Context, request *UploadStructResumeRPCRequest) (r *UploadStructResumeRPCResponse, err error)

	GetResumeById(ctx context.Context, request *GetResumeByIdRPCRequest) (r *GetResumeByIdRPCResponse, err error)

	GetResumeByPost(ctx context.Context, request *GetResumeByPostRPCRequest) (r *GetResumeByPostRPCResponse, err error)
}

type ResumeRPCServiceClient struct {
	c thrift.TClient
}

func NewResumeRPCServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ResumeRPCServiceClient {
	return &ResumeRPCServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewResumeRPCServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ResumeRPCServiceClient {
	return &ResumeRPCServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewResumeRPCServiceClient(c thrift.TClient) *ResumeRPCServiceClient {
	return &ResumeRPCServiceClient{
		c: c,
	}
}

func (p *ResumeRPCServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ResumeRPCServiceClient) UploadStructResume(ctx context.Context, request *UploadStructResumeRPCRequest) (r *UploadStructResumeRPCResponse, err error) {
	var _args ResumeRPCServiceUploadStructResumeArgs
	_args.Request = request
	var _result ResumeRPCServiceUploadStructResumeResult
	if err = p.Client_().Call(ctx, "UploadStructResume", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ResumeRPCServiceClient) GetResumeById(ctx context.Context, request *GetResumeByIdRPCRequest) (r *GetResumeByIdRPCResponse, err error) {
	var _args ResumeRPCServiceGetResumeByIdArgs
	_args.Request = request
	var _result ResumeRPCServiceGetResumeByIdResult
	if err = p.Client_().Call(ctx, "GetResumeById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ResumeRPCServiceClient) GetResumeByPost(ctx context.Context, request *GetResumeByPostRPCRequest) (r *GetResumeByPostRPCResponse, err error) {
	var _args ResumeRPCServiceGetResumeByPostArgs
	_args.Request = request
	var _result ResumeRPCServiceGetResumeByPostResult
	if err = p.Client_().Call(ctx, "GetResumeByPost", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ResumeRPCServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ResumeRPCService
}

func (p *ResumeRPCServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ResumeRPCServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ResumeRPCServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewResumeRPCServiceProcessor(handler ResumeRPCService) *ResumeRPCServiceProcessor {
	self := &ResumeRPCServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("UploadStructResume", &resumeRPCServiceProcessorUploadStructResume{handler: handler})
	self.AddToProcessorMap("GetResumeById", &resumeRPCServiceProcessorGetResumeById{handler: handler})
	self.AddToProcessorMap("GetResumeByPost", &resumeRPCServiceProcessorGetResumeByPost{handler: handler})
	return self
}
func (p *ResumeRPCServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type resumeRPCServiceProcessorUploadStructResume struct {
	handler ResumeRPCService
}

func (p *resumeRPCServiceProcessorUploadStructResume) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResumeRPCServiceUploadStructResumeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UploadStructResume", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResumeRPCServiceUploadStructResumeResult{}
	var retval *UploadStructResumeRPCResponse
	if retval, err2 = p.handler.UploadStructResume(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UploadStructResume: "+err2.Error())
		oprot.WriteMessageBegin("UploadStructResume", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UploadStructResume", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resumeRPCServiceProcessorGetResumeById struct {
	handler ResumeRPCService
}

func (p *resumeRPCServiceProcessorGetResumeById) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResumeRPCServiceGetResumeByIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetResumeById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResumeRPCServiceGetResumeByIdResult{}
	var retval *GetResumeByIdRPCResponse
	if retval, err2 = p.handler.GetResumeById(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetResumeById: "+err2.Error())
		oprot.WriteMessageBegin("GetResumeById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetResumeById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type resumeRPCServiceProcessorGetResumeByPost struct {
	handler ResumeRPCService
}

func (p *resumeRPCServiceProcessorGetResumeByPost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ResumeRPCServiceGetResumeByPostArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetResumeByPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ResumeRPCServiceGetResumeByPostResult{}
	var retval *GetResumeByPostRPCResponse
	if retval, err2 = p.handler.GetResumeByPost(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetResumeByPost: "+err2.Error())
		oprot.WriteMessageBegin("GetResumeByPost", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetResumeByPost", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ResumeRPCServiceUploadStructResumeArgs struct {
	Request *UploadStructResumeRPCRequest `thrift:"request,1" frugal:"1,default,UploadStructResumeRPCRequest" json:"request"`
}

func NewResumeRPCServiceUploadStructResumeArgs() *ResumeRPCServiceUploadStructResumeArgs {
	return &ResumeRPCServiceUploadStructResumeArgs{}
}

func (p *ResumeRPCServiceUploadStructResumeArgs) InitDefault() {
	*p = ResumeRPCServiceUploadStructResumeArgs{}
}

var ResumeRPCServiceUploadStructResumeArgs_Request_DEFAULT *UploadStructResumeRPCRequest

func (p *ResumeRPCServiceUploadStructResumeArgs) GetRequest() (v *UploadStructResumeRPCRequest) {
	if !p.IsSetRequest() {
		return ResumeRPCServiceUploadStructResumeArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ResumeRPCServiceUploadStructResumeArgs) SetRequest(val *UploadStructResumeRPCRequest) {
	p.Request = val
}

var fieldIDToName_ResumeRPCServiceUploadStructResumeArgs = map[int16]string{
	1: "request",
}

func (p *ResumeRPCServiceUploadStructResumeArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ResumeRPCServiceUploadStructResumeArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResumeRPCServiceUploadStructResumeArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResumeRPCServiceUploadStructResumeArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewUploadStructResumeRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResumeRPCServiceUploadStructResumeArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadStructResume_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResumeRPCServiceUploadStructResumeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResumeRPCServiceUploadStructResumeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResumeRPCServiceUploadStructResumeArgs(%+v)", *p)
}

func (p *ResumeRPCServiceUploadStructResumeArgs) DeepEqual(ano *ResumeRPCServiceUploadStructResumeArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *ResumeRPCServiceUploadStructResumeArgs) Field1DeepEqual(src *UploadStructResumeRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type ResumeRPCServiceUploadStructResumeResult struct {
	Success *UploadStructResumeRPCResponse `thrift:"success,0,optional" frugal:"0,optional,UploadStructResumeRPCResponse" json:"success,omitempty"`
}

func NewResumeRPCServiceUploadStructResumeResult() *ResumeRPCServiceUploadStructResumeResult {
	return &ResumeRPCServiceUploadStructResumeResult{}
}

func (p *ResumeRPCServiceUploadStructResumeResult) InitDefault() {
	*p = ResumeRPCServiceUploadStructResumeResult{}
}

var ResumeRPCServiceUploadStructResumeResult_Success_DEFAULT *UploadStructResumeRPCResponse

func (p *ResumeRPCServiceUploadStructResumeResult) GetSuccess() (v *UploadStructResumeRPCResponse) {
	if !p.IsSetSuccess() {
		return ResumeRPCServiceUploadStructResumeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ResumeRPCServiceUploadStructResumeResult) SetSuccess(x interface{}) {
	p.Success = x.(*UploadStructResumeRPCResponse)
}

var fieldIDToName_ResumeRPCServiceUploadStructResumeResult = map[int16]string{
	0: "success",
}

func (p *ResumeRPCServiceUploadStructResumeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResumeRPCServiceUploadStructResumeResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResumeRPCServiceUploadStructResumeResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResumeRPCServiceUploadStructResumeResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUploadStructResumeRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResumeRPCServiceUploadStructResumeResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UploadStructResume_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResumeRPCServiceUploadStructResumeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResumeRPCServiceUploadStructResumeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResumeRPCServiceUploadStructResumeResult(%+v)", *p)
}

func (p *ResumeRPCServiceUploadStructResumeResult) DeepEqual(ano *ResumeRPCServiceUploadStructResumeResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ResumeRPCServiceUploadStructResumeResult) Field0DeepEqual(src *UploadStructResumeRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ResumeRPCServiceGetResumeByIdArgs struct {
	Request *GetResumeByIdRPCRequest `thrift:"request,1" frugal:"1,default,GetResumeByIdRPCRequest" json:"request"`
}

func NewResumeRPCServiceGetResumeByIdArgs() *ResumeRPCServiceGetResumeByIdArgs {
	return &ResumeRPCServiceGetResumeByIdArgs{}
}

func (p *ResumeRPCServiceGetResumeByIdArgs) InitDefault() {
	*p = ResumeRPCServiceGetResumeByIdArgs{}
}

var ResumeRPCServiceGetResumeByIdArgs_Request_DEFAULT *GetResumeByIdRPCRequest

func (p *ResumeRPCServiceGetResumeByIdArgs) GetRequest() (v *GetResumeByIdRPCRequest) {
	if !p.IsSetRequest() {
		return ResumeRPCServiceGetResumeByIdArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ResumeRPCServiceGetResumeByIdArgs) SetRequest(val *GetResumeByIdRPCRequest) {
	p.Request = val
}

var fieldIDToName_ResumeRPCServiceGetResumeByIdArgs = map[int16]string{
	1: "request",
}

func (p *ResumeRPCServiceGetResumeByIdArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ResumeRPCServiceGetResumeByIdArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResumeRPCServiceGetResumeByIdArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByIdArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetResumeByIdRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResumeRPCServiceGetResumeByIdArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResumeById_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResumeRPCServiceGetResumeByIdArgs(%+v)", *p)
}

func (p *ResumeRPCServiceGetResumeByIdArgs) DeepEqual(ano *ResumeRPCServiceGetResumeByIdArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *ResumeRPCServiceGetResumeByIdArgs) Field1DeepEqual(src *GetResumeByIdRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type ResumeRPCServiceGetResumeByIdResult struct {
	Success *GetResumeByIdRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetResumeByIdRPCResponse" json:"success,omitempty"`
}

func NewResumeRPCServiceGetResumeByIdResult() *ResumeRPCServiceGetResumeByIdResult {
	return &ResumeRPCServiceGetResumeByIdResult{}
}

func (p *ResumeRPCServiceGetResumeByIdResult) InitDefault() {
	*p = ResumeRPCServiceGetResumeByIdResult{}
}

var ResumeRPCServiceGetResumeByIdResult_Success_DEFAULT *GetResumeByIdRPCResponse

func (p *ResumeRPCServiceGetResumeByIdResult) GetSuccess() (v *GetResumeByIdRPCResponse) {
	if !p.IsSetSuccess() {
		return ResumeRPCServiceGetResumeByIdResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ResumeRPCServiceGetResumeByIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetResumeByIdRPCResponse)
}

var fieldIDToName_ResumeRPCServiceGetResumeByIdResult = map[int16]string{
	0: "success",
}

func (p *ResumeRPCServiceGetResumeByIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResumeRPCServiceGetResumeByIdResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResumeRPCServiceGetResumeByIdResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByIdResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetResumeByIdRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResumeRPCServiceGetResumeByIdResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResumeById_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResumeRPCServiceGetResumeByIdResult(%+v)", *p)
}

func (p *ResumeRPCServiceGetResumeByIdResult) DeepEqual(ano *ResumeRPCServiceGetResumeByIdResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ResumeRPCServiceGetResumeByIdResult) Field0DeepEqual(src *GetResumeByIdRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ResumeRPCServiceGetResumeByPostArgs struct {
	Request *GetResumeByPostRPCRequest `thrift:"request,1" frugal:"1,default,GetResumeByPostRPCRequest" json:"request"`
}

func NewResumeRPCServiceGetResumeByPostArgs() *ResumeRPCServiceGetResumeByPostArgs {
	return &ResumeRPCServiceGetResumeByPostArgs{}
}

func (p *ResumeRPCServiceGetResumeByPostArgs) InitDefault() {
	*p = ResumeRPCServiceGetResumeByPostArgs{}
}

var ResumeRPCServiceGetResumeByPostArgs_Request_DEFAULT *GetResumeByPostRPCRequest

func (p *ResumeRPCServiceGetResumeByPostArgs) GetRequest() (v *GetResumeByPostRPCRequest) {
	if !p.IsSetRequest() {
		return ResumeRPCServiceGetResumeByPostArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ResumeRPCServiceGetResumeByPostArgs) SetRequest(val *GetResumeByPostRPCRequest) {
	p.Request = val
}

var fieldIDToName_ResumeRPCServiceGetResumeByPostArgs = map[int16]string{
	1: "request",
}

func (p *ResumeRPCServiceGetResumeByPostArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ResumeRPCServiceGetResumeByPostArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResumeRPCServiceGetResumeByPostArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByPostArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetResumeByPostRPCRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResumeRPCServiceGetResumeByPostArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResumeByPost_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByPostArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByPostArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResumeRPCServiceGetResumeByPostArgs(%+v)", *p)
}

func (p *ResumeRPCServiceGetResumeByPostArgs) DeepEqual(ano *ResumeRPCServiceGetResumeByPostArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *ResumeRPCServiceGetResumeByPostArgs) Field1DeepEqual(src *GetResumeByPostRPCRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type ResumeRPCServiceGetResumeByPostResult struct {
	Success *GetResumeByPostRPCResponse `thrift:"success,0,optional" frugal:"0,optional,GetResumeByPostRPCResponse" json:"success,omitempty"`
}

func NewResumeRPCServiceGetResumeByPostResult() *ResumeRPCServiceGetResumeByPostResult {
	return &ResumeRPCServiceGetResumeByPostResult{}
}

func (p *ResumeRPCServiceGetResumeByPostResult) InitDefault() {
	*p = ResumeRPCServiceGetResumeByPostResult{}
}

var ResumeRPCServiceGetResumeByPostResult_Success_DEFAULT *GetResumeByPostRPCResponse

func (p *ResumeRPCServiceGetResumeByPostResult) GetSuccess() (v *GetResumeByPostRPCResponse) {
	if !p.IsSetSuccess() {
		return ResumeRPCServiceGetResumeByPostResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ResumeRPCServiceGetResumeByPostResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetResumeByPostRPCResponse)
}

var fieldIDToName_ResumeRPCServiceGetResumeByPostResult = map[int16]string{
	0: "success",
}

func (p *ResumeRPCServiceGetResumeByPostResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ResumeRPCServiceGetResumeByPostResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResumeRPCServiceGetResumeByPostResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByPostResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetResumeByPostRPCResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ResumeRPCServiceGetResumeByPostResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetResumeByPost_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByPostResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ResumeRPCServiceGetResumeByPostResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResumeRPCServiceGetResumeByPostResult(%+v)", *p)
}

func (p *ResumeRPCServiceGetResumeByPostResult) DeepEqual(ano *ResumeRPCServiceGetResumeByPostResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ResumeRPCServiceGetResumeByPostResult) Field0DeepEqual(src *GetResumeByPostRPCResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
