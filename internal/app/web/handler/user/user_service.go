// Code generated by hertz generator.

package user

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	user1 "resume-resolving/api/idl/service/user/kitex_gen/user"
	"resume-resolving/api/idl/web/user"
	"resume-resolving/internal/app/web"
	"resume-resolving/internal/app/web/pkg/code"
	"strings"
)

// UserLogin .
// @router /api/v1/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.UserClient.Client.UserLogin(context.Background(), &user1.UserLoginRPCRequest{
		Username: req.Username,
		Password: req.Password,
		Role:     req.Role,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// UserChangePassword .
// @router /api/v1/user/change-password [POST]
func UserChangePassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserChangePasswordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	if strings.EqualFold(req.Password, req.NewPassword) {
		hlog.Error(code.GetMsg(code.CodePasswordInputRepeat), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodePasswordInputRepeat,
			"message": code.GetMsg(code.CodePasswordInputRepeat),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.UserClient.Client.UserChangePassword(context.Background(), &user1.UserChangePasswordRPCRequest{
		Username:     req.Username,
		Password:     req.Password,
		NewPassword_: req.NewPassword,
		Role:         req.Role,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// UserRegister .
// @router /api/v1/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	if !strings.EqualFold(req.Password, req.RePassword) {
		hlog.Error(code.GetMsg(code.CodePasswordInputNotRepeat), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodePasswordInputNotRepeat,
			"message": code.GetMsg(code.CodePasswordInputNotRepeat),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.UserClient.Client.UserRegister(context.Background(), &user1.UserRegisterRPCRequest{
		Username: req.Username,
		Password: req.Password,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// HRRegister .
// @router /api/v1/user/hr-register [POST]
func HRRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.HRRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.UserClient.Client.HRRegister(context.Background(), &user1.HRRegisterRPCRequest{
		Username:     req.Username,
		DepartmentId: req.DepartmentID,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// HRDelete .
// @router /api/v1/user/hr-delete [POST]
func HRDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.HRDeleteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.UserClient.Client.HRDelete(context.Background(), &user1.HRDeleteRPCRequest{
		UserId: req.UserID,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// GetHRByDepartment .
// @router /api/v1/user/gets-department [GET]
func GetHRByDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetHRByDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.UserClient.Client.GetHRByDepartment(context.Background(), &user1.GetHRByDepartmentRPCRequest{
		DepartmentId: req.DepartmentID,
		Limit:        req.Limit,
		Offset:       int32(req.Offset),
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// GetHRByName .
// @router /api/v1/user/get-hr [GET]
func GetHRByName(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetHRByNameRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.UserClient.Client.GetHRByName(context.Background(), &user1.GetHRByNameRPCRequest{
		Username: req.Username,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// GetUserByName .
// @router /api/v1/user/get [GET]
func GetUserByName(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserByNameRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.UserClient.Client.GetUserByName(context.Background(), &user1.GetUserByNameRPCRequest{
		Username: req.Username,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}
