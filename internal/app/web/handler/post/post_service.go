// Code generated by hertz generator.

package post

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	post1 "resume-resolving/api/idl/service/post/kitex_gen/post"
	"resume-resolving/internal/app/web"
	"resume-resolving/internal/app/web/pkg/code"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	post "resume-resolving/api/idl/web/post"
)

// AppendPost .
// @router /api/v1/post/append [POST]
func AppendPost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.AppendPostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostClient.Client.AppendPost(context.Background(), &post1.AppendPostRPCRequest{
		HrId:                req.HrID,
		PostBrief:           req.PostBrief,
		PostDescription:     req.PostDescription,
		PostRequire:         req.PostRequire,
		IsSchoolRecruitment: req.IsSchoolRecruitment,
		IsInternship:        req.IsInternship,
		PostCategoryId:      req.PostCategoryID,
		DepartmentId:        req.DepartmentID,
		CityList:            req.CityList,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// UpdatePost .
// @router /api/v1/post/update [POST]
func UpdatePost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.UpdatePostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostClient.Client.UpdatePost(context.Background(), &post1.UpdatePostRPCRequest{
		PostId:          req.PostID,
		PostBrief:       req.PostBrief,
		PostDescription: req.PostDescription,
		PostRequire:     req.PostRequire,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// DeletePost .
// @router /api/v1/post/delete [POST]
func DeletePost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.DeletePostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostClient.Client.DeletePost(context.Background(), &post1.DeletePostRPCRequest{
		PostId: req.PostID,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// GetsPostInUser .
// @router /api/v1/post/gets-user [POST]
func GetsPostInUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.GetsPostInUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostClient.Client.GetsPostInUser(context.Background(), &post1.GetsPostInUserRPCRequest{
		Limit:               req.Limit,
		Offset:              req.Offset,
		IsNew:               req.IsNew,
		IsSchoolRecruitment: req.IsSchoolRecruitment,
		IsInternship:        req.IsInternship,
		DepartmentIdList:    req.DepartmentIDList,
		PostCategoryIdList:  req.PostCategoryIDList,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// GetsPostInHR .
// @router /api/v1/post/gets-hr [GET]
func GetsPostInHR(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.GetsPostInHRRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostClient.Client.GetsPostInHR(context.Background(), &post1.GetsPostInHRRPCRequest{
		Limit:               req.Limit,
		Offset:              req.Offset,
		HrId:                req.HrID,
		IsSchoolRecruitment: req.IsSchoolRecruitment,
		IsInternship:        req.IsInternship,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// DeliveryPost .
// @router /api/v1/post/delivery [POST]
func DeliveryPost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.DeliveryPostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostClient.Client.DeliveryPost(context.Background(), &post1.DeliveryPostRPCRequest{
		IsDelivery: req.IsDelivery,
		UserId:     req.UserID,
		PostId:     req.PostID,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// CollectPost .
// @router /api/v1/post/collect [POST]
func CollectPost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.CollectPostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostClient.Client.CollectPost(context.Background(), &post1.CollectPostRPCRequest{
		IsCollect: req.IsCollect,
		UserId:    req.UserID,
		PostId:    req.PostID,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// GetDeliveryPost .
// @router /api/v1/post/get-delivery [GET]
func GetDeliveryPost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.GetDeliveryPostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostClient.Client.GetDeliveryPost(context.Background(), &post1.GetDeliveryPostRPCRequest{
		UserId: req.UserID,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// GetCollectPost .
// @router /api/v1/post/get-collect [GET]
func GetCollectPost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.GetCollectPostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostClient.Client.GetCollectPost(context.Background(), &post1.GetCollectPostRPCRequest{
		UserId: req.UserID,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// UpdateResumeStatus .
// @router /api/v1/post/update-resume [POST]
func UpdateResumeStatus(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post.UpdateResumeStatusRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostClient.Client.UpdateResumeStatus(context.Background(), &post1.UpdateResumeStatusRPCRequest{
		ResumeOperate: req.ResumeOperate,
		UserId:        req.UserID,
		PostId:        req.PostID,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}
