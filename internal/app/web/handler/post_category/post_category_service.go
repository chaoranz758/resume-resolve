// Code generated by hertz generator.

package post_category

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"resume-resolving/internal/app/web"
	"resume-resolving/internal/app/web/pkg/code"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	post_category1 "resume-resolving/api/idl/service/post_category/kitex_gen/post_category"
	"resume-resolving/api/idl/web/post_category"
)

// AppendPostCategory .
// @router /api/v1/post-category/append [POST]
func AppendPostCategory(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post_category.AppendPostCategoryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostCategoryClient.Client.AppendPostCategory(context.Background(), &post_category1.AppendPostCategoryRPCRequest{
		PostCategoryName:     req.PostCategoryName,
		PostCategoryLevel:    req.PostCategoryLevel,
		PostCategoryParentId: req.PostCategoryParentID,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// UpdatePostCategory .
// @router /api/v1/post-category/update [POST]
func UpdatePostCategory(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post_category.UpdatePostCategoryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostCategoryClient.Client.UpdatePostCategory(context.Background(), &post_category1.UpdatePostCategoryRPCRequest{
		PostCategoryName: req.PostCategoryName,
		PostCategoryId:   req.PostCategoryID,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// DeletePostCategory .
// @router /api/v1/post-category/delete [POST]
func DeletePostCategory(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post_category.DeletePostCategoryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostCategoryClient.Client.DeletePostCategory(context.Background(), &post_category1.DeletePostCategoryRPCRequest{
		PostCategoryId:       req.PostCategoryID,
		Level:                req.Level,
		PostCategoryParentId: req.PostCategoryParentID,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// GetsPostCategory .
// @router /api/v1/post-category/gets [GET]
func GetsPostCategory(ctx context.Context, c *app.RequestContext) {
	var err error
	var req post_category.GetsPostCategoryRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.PostCategoryClient.Client.GetsPostCategory(context.Background(), &post_category1.GetsPostCategoryRPCRequest{
		Level:          req.Level,
		PostCategoryId: req.PostCategoryID,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}
