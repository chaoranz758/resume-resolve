// Code generated by hertz generator.

package department

import (
	"context"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	department1 "resume-resolving/api/idl/service/department/kitex_gen/department"
	"resume-resolving/internal/app/web"
	"resume-resolving/internal/app/web/pkg/code"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	department "resume-resolving/api/idl/web/department"
)

// AppendDepartment .
// @router /api/v1/department/append [POST]
func AppendDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department.AppendDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.DepartmentClient.Client.AppendDepartment(context.Background(), &department1.AppendDepartmentRPCRequest{
		DepartmentName:        req.DepartmentName,
		DepartmentDescription: req.DepartmentDescription,
		CityList:              req.CityList,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// UpdateDepartment .
// @router /api/v1/department/update [POST]
func UpdateDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department.UpdateDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.DepartmentClient.Client.UpdateDepartment(context.Background(), &department1.UpdateDepartmentRPCRequest{
		DepartmentName:        req.DepartmentName,
		DepartmentDescription: req.DepartmentDescription,
		DepartmentId:          req.DepartmentID,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// DeleteDepartment .
// @router /api/v1/department/delete [POST]
func DeleteDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department.DeleteDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.DepartmentClient.Client.DeleteDepartment(context.Background(), &department1.DeleteDepartmentRPCRequest{
		DepartmentId: req.DepartmentID,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// GetsDepartment .
// @router /api/v1/department/gets [GET]
func GetsDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department.GetsDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.DepartmentClient.Client.GetsDepartment(context.Background(), &department1.GetsDepartmentRPCRequest{})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// AppendCity .
// @router /api/v1/department/city/append [POST]
func AppendCity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department.AppendCityRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.DepartmentClient.Client.AppendCity(context.Background(), &department1.AppendCityRPCRequest{
		CityName: req.CityName,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// DeleteCity .
// @router /api/v1/department/city/delete [POST]
func DeleteCity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department.DeleteCityRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.DepartmentClient.Client.DeleteCity(context.Background(), &department1.DeleteCityRPCRequest{
		CityId: req.CityID,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// GetsCity .
// @router /api/v1/department/city/gets [GET]
func GetsCity(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department.GetsCityRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.DepartmentClient.Client.GetsCity(context.Background(), &department1.GetsCityRPCRequest{})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// GetsCityByDepartment .
// @router /api/v1/department/city/gets-department [GET]
func GetsCityByDepartment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req department.GetsCityByDepartmentRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.DepartmentClient.Client.GetsCityByDepartment(context.Background(), &department1.GetsCityByDepartmentRPCRequest{
		DepartmentId: req.DepartmentID,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}
