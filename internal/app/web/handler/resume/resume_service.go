// Code generated by hertz generator.

package resume

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	base "resume-resolving/api/idl/base"
	base1 "resume-resolving/api/idl/service/resume/kitex_gen/base"
	resume1 "resume-resolving/api/idl/service/resume/kitex_gen/resume"
	resume "resume-resolving/api/idl/web/resume"
	"resume-resolving/internal/app/web"
	"resume-resolving/internal/app/web/pkg/code"
)

// UploadResumeFile .
// @router /api/v1/resume/upload-file [POST]
func UploadResumeFile(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resume.UploadResumeFileRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.NilResponse)

	c.JSON(consts.StatusOK, resp)
}

// UploadStructResume .
// @router /api/v1/resume/upload [POST]
func UploadStructResume(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resume.UploadStructResumeRequest
	err = c.BindAndValidate(&req)

	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
		})
		c.Abort()
		return
	}

	var basicInfo = base1.BasicInfo{
		Name:          req.BasicInformation.Name,
		Phone:         req.BasicInformation.Phone,
		Email:         req.BasicInformation.Email,
		SelfEvaluaton: req.BasicInformation.SelfEvaluaton,
		Birthday:      req.BasicInformation.Birthday,
		UserId:        req.BasicInformation.UserID,
		ResumeUrl:     req.BasicInformation.ResumeURL,
	}

	educationalExperienceList := make([]*base1.EducationalExperienceList, 0, len(req.EducationalExperienceList))
	for i := 0; i < len(req.EducationalExperienceList); i++ {
		var educationalExperience = base1.EducationalExperienceList{
			School:     req.EducationalExperienceList[i].School,
			Education:  req.EducationalExperienceList[i].Education,
			Speciality: req.EducationalExperienceList[i].Speciality,
			StartTime:  req.EducationalExperienceList[i].StartTime,
			EndTime:    req.EducationalExperienceList[i].EndTime,
			Rank:       req.EducationalExperienceList[i].Rank,
		}
		educationalExperienceList = append(educationalExperienceList, &educationalExperience)
	}

	internshipExperienceList := make([]*base1.InternshipExperienceList, 0, len(req.InternshipExperienceList))
	for i := 0; i < len(req.InternshipExperienceList); i++ {
		var internshipExperience = base1.InternshipExperienceList{
			Company:     req.InternshipExperienceList[i].Company,
			Position:    req.InternshipExperienceList[i].Position,
			StartTime:   req.InternshipExperienceList[i].StartTime,
			EndTime:     req.InternshipExperienceList[i].EndTime,
			Description: req.InternshipExperienceList[i].Description,
		}
		internshipExperienceList = append(internshipExperienceList, &internshipExperience)
	}

	workExperienceList := make([]*base1.WorkExperienceList, 0, len(req.WorkExperienceList))
	for i := 0; i < len(req.WorkExperienceList); i++ {
		var workExperience = base1.WorkExperienceList{
			Company:     req.WorkExperienceList[i].Company,
			Position:    req.WorkExperienceList[i].Position,
			StartTime:   req.WorkExperienceList[i].StartTime,
			EndTime:     req.WorkExperienceList[i].EndTime,
			Description: req.WorkExperienceList[i].Description,
		}
		workExperienceList = append(workExperienceList, &workExperience)
	}

	projectExperienceList := make([]*base1.ProjectExperienceList, 0, len(req.ProjectExperienceList))
	for i := 0; i < len(req.ProjectExperienceList); i++ {
		var projectExperience = base1.ProjectExperienceList{
			ProjectName:        req.ProjectExperienceList[i].ProjectName,
			ProjectUrl:         req.ProjectExperienceList[i].ProjectURL,
			ProjectDescription: req.ProjectExperienceList[i].ProjectDescription,
			ProjectRole:        req.ProjectExperienceList[i].ProjectRole,
			StartTime:          req.ProjectExperienceList[i].StartTime,
			EndTime:            req.ProjectExperienceList[i].EndTime,
		}
		projectExperienceList = append(projectExperienceList, &projectExperience)
	}

	contestList := make([]*base1.ContestList, 0, len(req.ContestList))
	for i := 0; i < len(req.ContestList); i++ {
		var contest = base1.ContestList{
			Name:        req.ContestList[i].Name,
			Description: req.ContestList[i].Description,
		}
		contestList = append(contestList, &contest)
	}

	certificateList := make([]*base1.CertificateList, 0, len(req.CertificateList))
	for i := 0; i < len(req.CertificateList); i++ {
		var certificate = base1.CertificateList{
			Name:        req.CertificateList[i].Name,
			Description: req.CertificateList[i].Description,
		}
		certificateList = append(certificateList, &certificate)
	}

	languageList := make([]*base1.LanguageList, 0, len(req.LanguageList))
	for i := 0; i < len(req.LanguageList); i++ {
		var language = base1.LanguageList{
			Language:         req.LanguageList[i].Language,
			ProficiencyLevel: req.LanguageList[i].ProficiencyLevel,
		}
		languageList = append(languageList, &language)
	}

	socialList := make([]*base1.SocialList, 0, len(req.SocialList))
	for i := 0; i < len(req.SocialList); i++ {
		var social = base1.SocialList{
			SocialPlatform: req.SocialList[i].SocialPlatform,
			PlatformUrl:    req.SocialList[i].PlatformURL,
		}
		socialList = append(socialList, &social)
	}

	resp, err := web.GlobalEngine.Options.ResumeClient.Client.UploadStructResume(context.Background(), &resume1.UploadStructResumeRPCRequest{
		BasicInformation:          &basicInfo,
		EducationalExperienceList: educationalExperienceList,
		InternshipExperienceList:  internshipExperienceList,
		WorkExperienceList:        workExperienceList,
		ProjectExperienceList:     projectExperienceList,
		ContestList:               contestList,
		CertificateList:           certificateList,
		LanguageList:              languageList,
		SocialList:                socialList,
	})

	code.RespWithJson(resp.Code, resp.Message, c, err)
}

// GetResumeById .
// @router /api/v1/resume/get-id [GET]
func GetResumeById(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resume.GetResumeByIdRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.ResumeClient.Client.GetResumeById(context.Background(), &resume1.GetResumeByIdRPCRequest{
		UserId: req.UserID,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}

// GetResumeByPost .
// @router /api/v1/resume/gets-post [GET]
func GetResumeByPost(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resume.GetResumeByPostRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error(code.GetMsg(code.CodeInvalidParam), err)
		c.JSON(consts.StatusOK, map[string]interface{}{
			"code":    code.CodeInvalidParam,
			"message": code.GetMsg(code.CodeInvalidParam),
			"data":    nil,
		})
		c.Abort()
		return
	}

	resp, err := web.GlobalEngine.Options.ResumeClient.Client.GetResumeByPost(context.Background(), &resume1.GetResumeByPostRPCRequest{
		PostId:       req.PostID,
		IsTalentPool: req.IsTalentPool,
		Limit:        req.Limit,
		Offset:       req.Offset,
	})

	code.RespWithJsonWithData(resp.Code, resp.Message, c, resp.Data, err)
}
